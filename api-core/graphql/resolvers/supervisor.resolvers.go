package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"context"
	"fmt"

	"github.com/polatbilal/gqlgen-ent/api-core/ent"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobsupervisor"
	"github.com/polatbilal/gqlgen-ent/api-core/graphql/model"
	"github.com/polatbilal/gqlgen-ent/api-core/middlewares"
)

// CreateSupervisor is the resolver for the createSupervisor field.
func (r *mutationResolver) CreateSupervisor(ctx context.Context, input model.JobSupervisorInput) (*ent.JobSupervisor, error) {
	client := middlewares.GetClientFromContext(ctx)

	// YDSID ile supervisor var mı kontrol edelim
	supervisor, err := client.JobSupervisor.Query().Where(jobsupervisor.YDSIDEQ(*input.Ydsid)).Only(ctx)
	if ent.IsNotFound(err) {
		// Supervisor yoksa yeni oluşturalım
		supervisor, err = client.JobSupervisor.Create().
			SetName(*input.Name).
			SetNillableAddress(input.Address).
			SetNillablePhone(input.Phone).
			SetNillableEmail(input.Email).
			SetNillableTcNo(input.TcNo).
			SetNillablePosition(input.Position).
			SetNillableCareer(input.Career).
			SetNillableRegisterNo(input.RegisterNo).
			SetNillableSocialSecurityNo(input.SocialSecurityNo).
			SetNillableSchoolGraduation(input.SchoolGraduation).
			SetYDSID(*input.Ydsid).
			Save(ctx)

		if err != nil {
			return nil, fmt.Errorf("failed to create supervisor: %w", err)
		}
	} else if err != nil {
		return nil, fmt.Errorf("failed to check supervisor: %w", err)
	}

	return supervisor, nil
}

// UpdateSupervisor is the resolver for the updateSupervisor field.
func (r *mutationResolver) UpdateSupervisor(ctx context.Context, ydsid int, input model.JobSupervisorInput) (*ent.JobSupervisor, error) {
	client := middlewares.GetClientFromContext(ctx)

	// Owner'ı doğrudan ydsid ile bul
	supervisor, err := client.JobSupervisor.Query().
		Where(jobsupervisor.YDSIDEQ(*input.Ydsid)).
		Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("supervisor bulunamadı: %v", err)
	}

	supervisor, err = supervisor.Update().
		SetNillableName(input.Name).
		SetNillableAddress(input.Address).
		SetNillablePhone(input.Phone).
		SetNillableEmail(input.Email).
		SetNillableTcNo(input.TcNo).
		SetNillablePosition(input.Position).
		SetNillableCareer(input.Career).
		SetNillableRegisterNo(input.RegisterNo).
		SetNillableSocialSecurityNo(input.SocialSecurityNo).
		SetNillableSchoolGraduation(input.SchoolGraduation).
		Save(ctx)

	if err != nil {
		return nil, fmt.Errorf("failed to update supervisor: %w", err)
	}

	return supervisor, nil
}

// Supervisor is the resolver for the supervisor field.
func (r *queryResolver) Supervisor(ctx context.Context, yibfNo int) (*ent.JobSupervisor, error) {
	client := middlewares.GetClientFromContext(ctx)

	// Önce JobDetail'i bul
	jobDetail, err := client.JobDetail.Query().
		Where(jobdetail.YibfNoEQ(yibfNo)).
		Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("iş detayı bulunamadı: %v", err)
	}

	// JobRelations üzerinden supervisor'ı bul
	relations, err := jobDetail.QueryRelations().Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("iş ilişkileri bulunamadı: %v", err)
	}

	supervisor, err := relations.QuerySupervisor().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	if err != nil {
		return nil, fmt.Errorf("failed to get supervisor: %w", err)
	}

	return supervisor, nil
}

// SupervisorByYdsid is the resolver for the supervisorByYDSID field.
func (r *queryResolver) SupervisorByYdsid(ctx context.Context, ydsid int) (*ent.JobSupervisor, error) {
	client := middlewares.GetClientFromContext(ctx)
	supervisor, err := client.JobSupervisor.Query().Where(jobsupervisor.YDSID(ydsid)).Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	if err != nil {
		return nil, fmt.Errorf("failed to get supervisor: %w", err)
	}
	return supervisor, nil
}
