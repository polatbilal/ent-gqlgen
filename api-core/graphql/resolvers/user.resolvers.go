package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"
	"strconv"

	"github.com/polatbilal/gqlgen-ent/api-core/ent"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/companydetail"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/companyuser"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/user"
	"github.com/polatbilal/gqlgen-ent/api-core/graphql/generated"
	"github.com/polatbilal/gqlgen-ent/api-core/graphql/model"
	"github.com/polatbilal/gqlgen-ent/api-core/middlewares"
	"golang.org/x/crypto/bcrypt"
)

// UpsertUser is the resolver for the upsertUser field.
func (r *mutationResolver) UpsertUser(ctx context.Context, input model.UserInput) (*ent.User, error) {
	client := middlewares.GetClientFromContext(ctx)

	// Kullanıcı adına göre mevcut kullanıcıyı kontrol et
	existingUser, err := client.User.Query().
		Where(user.UsernameEQ(*input.Username)).
		Only(ctx)

	if err != nil {
		if !ent.IsNotFound(err) {
			return nil, fmt.Errorf("kullanıcı kontrolü yapılırken hata: %v", err)
		}
		// Şifreyi hashle
		hashedPassword, err := bcrypt.GenerateFromPassword([]byte(*input.Password), bcrypt.DefaultCost)
		if err != nil {
			return nil, fmt.Errorf("şifre hashlenirken hata: %v", err)
		}

		// Kullanıcı bulunamadı, yeni kullanıcı oluştur
		newUser, err := client.User.Create().
			SetUsername(*input.Username).
			SetName(*input.Name).
			SetEmail(*input.Email).
			SetNillablePhone(input.Phone).
			SetPassword(string(hashedPassword)).
			SetNillableRole(input.Role).
			Save(ctx)

		if err != nil {
			return nil, fmt.Errorf("yeni kullanıcı oluşturulurken hata: %v", err)
		}

		// Şirketleri ekle
		if len(input.CompanyIDs) > 0 {
			for _, companyID := range input.CompanyIDs {
				_, err = client.CompanyUser.Create().
					SetUser(newUser).
					SetCompanyID(*companyID).
					Save(ctx)

				if err != nil {
					return nil, fmt.Errorf("şirket bağlantısı oluşturulurken hata: %v", err)
				}
			}
		}

		return newUser, nil
	}

	// Kullanıcı bulundu, güncelle
	if input.NewPassword != nil && *input.NewPassword != "" {
		// İstek yapan kullanıcının bilgilerini kontrol et
		claims := middlewares.CtxValue(ctx)
		if claims == nil {
			return nil, fmt.Errorf("kullanıcı kimliği bulunamadı")
		}

		// Eğer kullanıcı kendi şifresini değiştiriyorsa veya admin değilse şifre kontrolü yap
		if claims.Username == *input.Username || claims.Role != "Admin" {
			// Mevcut şifreyi kontrol et
			err = bcrypt.CompareHashAndPassword([]byte(existingUser.Password), []byte(*input.Password))
			if err != nil {
				return nil, fmt.Errorf("mevcut şifre yanlış")
			}
		}

		// Yeni şifreyi hashle
		hashedNewPassword, err := bcrypt.GenerateFromPassword([]byte(*input.NewPassword), bcrypt.DefaultCost)
		if err != nil {
			return nil, fmt.Errorf("yeni şifre hashlenirken hata: %v", err)
		}
		input.NewPassword = &[]string{string(hashedNewPassword)}[0]
		fmt.Println("input.NewPassword", input.NewPassword)
	}

	updatedUser, err := client.User.UpdateOne(existingUser).
		SetNillableName(input.Name).
		SetNillableEmail(input.Email).
		SetNillablePhone(input.Phone).
		SetNillablePassword(input.NewPassword).
		SetNillableRole(input.Role).
		Save(ctx)

	if err != nil {
		return nil, fmt.Errorf("kullanıcı güncellenirken hata: %v", err)
	}

	// Şirketleri güncelle
	if len(input.CompanyIDs) == 0 {
		return nil, fmt.Errorf("en az bir şirket ID'si belirtilmelidir")
	}

	// Mevcut şirket bağlantılarını al
	existingCompanies, err := updatedUser.QueryCompanies().QueryCompany().IDs(ctx)
	if err != nil {
		return nil, fmt.Errorf("mevcut şirket bağlantıları kontrol edilirken hata: %v", err)
	}

	// Yeni şirket ID'lerini map'e dönüştür
	newCompanyMap := make(map[int]bool)
	for _, companyID := range input.CompanyIDs {
		newCompanyMap[*companyID] = true
	}

	// Silinmesi gereken bağlantıları bul ve sil
	for _, existingID := range existingCompanies {
		if !newCompanyMap[existingID] {
			// Bu şirket yeni listede yok, bağlantıyı sil
			_, err = client.CompanyUser.Delete().
				Where(
					companyuser.And(
						companyuser.HasUserWith(user.IDEQ(updatedUser.ID)),
						companyuser.HasCompanyWith(companydetail.IDEQ(existingID)),
					),
				).
				Exec(ctx)
			if err != nil {
				return nil, fmt.Errorf("şirket bağlantısı silinirken hata: %v", err)
			}
		}
	}

	// Mevcut şirketleri map'e dönüştür
	existingCompanyMap := make(map[int]bool)
	for _, id := range existingCompanies {
		existingCompanyMap[id] = true
	}

	// Yeni şirket bağlantılarını ekle
	for _, companyID := range input.CompanyIDs {
		if existingCompanyMap[*companyID] {
			continue
		}

		_, err = client.CompanyUser.Create().
			SetUser(updatedUser).
			SetCompanyID(*companyID).
			Save(ctx)

		if err != nil {
			return nil, fmt.Errorf("şirket bağlantısı oluşturulurken hata: %v", err)
		}
	}

	return updatedUser, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	client := middlewares.GetClientFromContext(ctx)
	intID, err := strconv.Atoi(id)
	if err != nil {
		return false, fmt.Errorf("kullanıcı bulunurken hata: %v", err)
	}

	// Önce kullanıcının CompanyUser kayıtlarını sil
	_, err = client.CompanyUser.Delete().Where(companyuser.HasUserWith(user.IDEQ(intID))).Exec(ctx)
	if err != nil {
		return false, fmt.Errorf("kullanıcının şirket bağlantıları silinirken hata: %v", err)
	}

	// Sonra kullanıcıyı sil
	err = client.User.DeleteOneID(intID).Exec(ctx)
	return err == nil, err
}

// ActivateCompanyUsers is the resolver for the activateCompanyUsers field.
func (r *mutationResolver) ActivateCompanyUsers(ctx context.Context, adminID string) ([]*ent.User, error) {
	client := middlewares.GetClientFromContext(ctx)

	// Yetkili kullanıcıyı kontrol et
	if userRole := middlewares.CtxValue(ctx); userRole == nil || userRole.Role != "Manager" {
		return nil, fmt.Errorf("yetkiniz yok")
	}

	// Admin ID'yi int'e çevir
	adminIDInt, err := strconv.Atoi(adminID)
	if err != nil {
		return nil, fmt.Errorf("geçersiz admin ID: %v", err)
	}

	// Admin'i bul ve rolünü kontrol et
	admin, err := client.User.Get(ctx, adminIDInt)
	if err != nil {
		return nil, fmt.Errorf("admin bulunamadı: %v", err)
	}

	if admin.Role != "Admin" {
		return nil, fmt.Errorf("kullanıcı admin değil")
	}

	// Admin'in şirketlerini bul
	companies, err := admin.QueryCompanies().QueryCompany().All(ctx)
	if err != nil {
		return nil, fmt.Errorf("şirketler alınamadı: %v", err)
	}

	if len(companies) == 0 {
		return nil, fmt.Errorf("admin'e bağlı şirket bulunamadı")
	}

	// Şirket ID'lerini topla
	companyIDs := make([]int, len(companies))
	for i, company := range companies {
		companyIDs[i] = company.ID
	}

	// Bu şirketlere bağlı tüm deaktif kullanıcıları bul
	users, err := client.User.Query().
		Where(
			user.And(
				user.HasCompaniesWith(
					companyuser.HasCompanyWith(
						companydetail.IDIn(companyIDs...),
					),
				),
				user.ActiveEQ(false),
			),
		).All(ctx)

	if err != nil {
		return nil, fmt.Errorf("kullanıcılar alınamadı: %v", err)
	}

	// Kullanıcıları aktif et
	for _, u := range users {
		_, err := client.User.UpdateOne(u).
			SetActive(true).
			Save(ctx)

		if err != nil {
			return nil, fmt.Errorf("kullanıcı ID %d aktif edilemedi: %v", u.ID, err)
		}
	}

	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*ent.User, error) {
	client := middlewares.GetClientFromContext(ctx)
	intID, err := strconv.Atoi(id)
	if err != nil {
		fmt.Println("Error:", err)
	}
	return client.User.Query().Where(user.IDEQ(intID)).Only(ctx)
}

// CompanyUsers is the resolver for the companyUsers field.
func (r *queryResolver) CompanyUsers(ctx context.Context) ([]*ent.User, error) {
	client := middlewares.GetClientFromContext(ctx)

	// JWT'den kullanıcı ID'sini al
	claims := middlewares.CtxValue(ctx)
	if claims == nil {
		return nil, fmt.Errorf("kullanıcı kimliği bulunamadı")
	}
	userID := claims.ID

	// Kullanıcının bağlı olduğu şirketleri bul
	companies, err := client.User.Query().
		Where(user.IDEQ(userID)).
		QueryCompanies().
		QueryCompany().
		All(ctx)
	if err != nil {
		return nil, fmt.Errorf("kullanıcının şirketleri alınırken hata: %v", err)
	}

	// Şirket ID'lerini topla
	companyIDs := make([]int, len(companies))
	for i, company := range companies {
		companyIDs[i] = company.ID
	}

	// Bu şirketlere bağlı tüm kullanıcıları al
	users, err := client.User.Query().
		Where(
			user.HasCompaniesWith(
				companyuser.HasCompanyWith(
					companydetail.IDIn(companyIDs...),
				),
			),
		).All(ctx)

	if err != nil {
		return nil, fmt.Errorf("şirket kullanıcıları alınırken hata: %v", err)
	}

	return users, nil
}

// Companies is the resolver for the companies field.
func (r *userResolver) Companies(ctx context.Context, obj *ent.User) ([]*ent.CompanyDetail, error) {
	return obj.QueryCompanies().QueryCompany().All(ctx)
}

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
