package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"

	"github.com/polatbilal/gqlgen-ent/api-core/ent"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobauthor"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/api-core/graphql/generated"
	"github.com/polatbilal/gqlgen-ent/api-core/graphql/model"
	"github.com/polatbilal/gqlgen-ent/api-core/middlewares"
)

// CreateAuthor is the resolver for the createAuthor field.
func (r *mutationResolver) CreateAuthor(ctx context.Context, input model.JobAuthorInput) (*ent.JobAuthor, error) {
	client := middlewares.GetClientFromContext(ctx)

	// Önce mevcut author'ı kontrol et
	existingAuthor, err := client.JobAuthor.Query().
		Where(jobauthor.YibfNo(*input.YibfNo)).
		First(ctx)

	if err != nil && !ent.IsNotFound(err) {
		return nil, fmt.Errorf("failed to query author: %w", err)
	}

	if existingAuthor != nil {
		// Mevcut author varsa güncelle
		author, err := existingAuthor.Update().
			SetNillableStatic(input.Static).
			SetNillableMechanic(input.Mechanic).
			SetNillableElectric(input.Electric).
			SetNillableArchitect(input.Architect).
			SetNillableGeotechnicalEngineer(input.GeotechnicalEngineer).
			SetNillableGeotechnicalGeologist(input.GeotechnicalGeologist).
			SetNillableGeotechnicalGeophysicist(input.GeotechnicalGeophysicist).
			Save(ctx)
		if err != nil {
			return nil, fmt.Errorf("failed to update author: %w", err)
		}
		return author, nil
	}

	// Mevcut author yoksa yeni oluştur
	author, err := client.JobAuthor.Create().
		SetYibfNo(*input.YibfNo).
		SetNillableStatic(input.Static).
		SetNillableMechanic(input.Mechanic).
		SetNillableElectric(input.Electric).
		SetNillableArchitect(input.Architect).
		SetNillableGeotechnicalEngineer(input.GeotechnicalEngineer).
		SetNillableGeotechnicalGeologist(input.GeotechnicalGeologist).
		SetNillableGeotechnicalGeophysicist(input.GeotechnicalGeophysicist).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create author: %w", err)
	}

	return author, nil
}

// UpdateAuthor is the resolver for the updateAuthor field.
func (r *mutationResolver) UpdateAuthor(ctx context.Context, yibfNo int, input model.JobAuthorInput) (*ent.JobAuthor, error) {
	client := middlewares.GetClientFromContext(ctx)

	// Doğrudan yibfNo ile author'ı bul
	author, err := client.JobAuthor.Query().
		Where(jobauthor.YibfNoEQ(yibfNo)).
		Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to query author: %w", err)
	}

	author, err = author.Update().
		SetNillableStatic(input.Static).
		SetNillableMechanic(input.Mechanic).
		SetNillableElectric(input.Electric).
		SetNillableArchitect(input.Architect).
		SetNillableGeotechnicalEngineer(input.GeotechnicalEngineer).
		SetNillableGeotechnicalGeologist(input.GeotechnicalGeologist).
		SetNillableGeotechnicalGeophysicist(input.GeotechnicalGeophysicist).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to update author: %w", err)
	}

	return author, nil
}

// Author is the resolver for the author field.
func (r *queryResolver) Author(ctx context.Context, yibfNo int) (*ent.JobAuthor, error) {
	client := middlewares.GetClientFromContext(ctx)

	// Önce JobDetail'i bul
	jobDetail, err := client.JobDetail.Query().
		Where(jobdetail.YibfNoEQ(yibfNo)).
		Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to query job detail: %w", err)
	}

	// JobRelations üzerinden author'ı bul
	relations, err := jobDetail.QueryRelations().Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to query job relations: %w", err)
	}

	author, err := relations.QueryAuthor().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	if err != nil {
		return nil, fmt.Errorf("failed to get author: %w", err)
	}

	return author, nil
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
