package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"

	"github.com/polatbilal/gqlgen-ent/api-core/ent"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/companydetail"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/companytoken"
	"github.com/polatbilal/gqlgen-ent/api-core/graphql/generated"
	"github.com/polatbilal/gqlgen-ent/api-core/graphql/model"
	"github.com/polatbilal/gqlgen-ent/api-core/middlewares"
	"github.com/polatbilal/gqlgen-ent/handlers-module/service"
)

// CompanyCode is the resolver for the CompanyCode field.
func (r *companyTokenResolver) CompanyCode(ctx context.Context, obj *ent.CompanyToken) (*int, error) {
	company, err := obj.QueryCompany().Only(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, nil
		}
		return nil, fmt.Errorf("şirket bilgisi alınamadı: %v", err)
	}

	return &company.CompanyCode, nil
}

// UpsertToken, token yoksa oluşturur varsa günceller
func (r *mutationResolver) UpsertToken(ctx context.Context, departmentID int, input model.CompanyTokenInput) (*ent.CompanyToken, error) {
	client := middlewares.GetClientFromContext(ctx)

	// Yetkili kullanıcıyı kontrol et
	if userRole := middlewares.CtxValue(ctx); userRole == nil || userRole.Role != "Admin" {
		return nil, fmt.Errorf("yetkiniz yok")
	}

	// Önce token'ı kontrol et
	existingToken, err := client.CompanyToken.Query().Where(companytoken.DepartmentIdEQ(departmentID)).Only(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			// Token bulunamadı, yeni token oluştur
			// 1. Önce token'ı kaydet
			tokenCreate := client.CompanyToken.Create().
				SetYDKUsername(*input.YDKUsername).
				SetYDKPassword(*input.YDKPassword).
				SetToken(*input.Token).
				SetDepartmentId(departmentID)
			createCompanyToken, err := tokenCreate.Save(ctx)
			if err != nil {
				return nil, fmt.Errorf("şirket token oluşturulamadı: %v", err)
			}

			// 2. YDK API'den şirket verisini çek
			svc := &service.ExternalService{
				BaseURL: os.Getenv("YDK_BASE_URL"),
				Client:  &http.Client{},
			}

			// Şirket verisini çek
			requestBody := map[string]interface{}{
				"id": departmentID,
			}

			jsonBody, err := json.Marshal(requestBody)
			if err != nil {
				fmt.Printf("JSON marshal hatası: %v\n", err)
				return createCompanyToken, nil
			}

			url := svc.BaseURL + service.ENDPOINT_COMPANY
			fmt.Printf("İstek URL: %s\n", url)

			req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonBody))
			if err != nil {
				fmt.Printf("HTTP request oluşturma hatası: %v\n", err)
				return createCompanyToken, nil
			}

			req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", *input.Token))
			req.Header.Set("Content-Type", "application/json")

			resp, err := svc.Client.Do(req)
			if err != nil {
				fmt.Printf("HTTP isteği hatası: %v\n", err)
				return createCompanyToken, nil
			}
			defer resp.Body.Close()

			body, err := io.ReadAll(resp.Body)
			if err != nil {
				fmt.Printf("Response body okuma hatası: %v\n", err)
				return createCompanyToken, nil
			}

			fmt.Printf("API Yanıtı: %s\n", string(body))

			var ydkResponse service.YDKCompanyResponse
			if err := json.Unmarshal(body, &ydkResponse); err != nil {
				fmt.Printf("JSON parse hatası: %v\n", err)
				return createCompanyToken, nil
			}

			if len(ydkResponse.Items) > 0 {
				item := ydkResponse.Items[0]

				// 3. Şirket verisini kaydet
				company, err := client.CompanyDetail.Create().
					SetCompanyCode(item.Department.FileNumber).
					SetName(item.Department.Name).
					SetNillableAddress(&item.Department.Person.AddressStr).
					SetNillablePhone(&item.Department.Person.LastPhoneNumber).
					SetNillableEmail(&item.Department.Person.LastEPosta).
					SetNillableWebsite(&item.Department.Person.LastWebAddress).
					SetNillableTaxAdmin(&item.Department.Person.TaxAdministration).
					SetNillableTaxNo(&item.Department.Person.IdentityNumber).
					SetNillableChamberInfo(&item.Department.ChamberInfo).
					SetNillableChamberRegisterNo(&item.Department.RegistrationNumber).
					SetNillableVisaFinishedFor90Days(&item.Department.VisaFinishedFor90Days).
					SetNillableCorePersonAbsent90Days(&item.Department.CorePersonAbsent90Days).
					SetNillableIsClosed(&item.Department.IsClosed).
					SetNillableOwnerName(&item.Person.FullName).
					SetNillableOwnerTcNo(&item.Person.IdentityNumber).
					SetNillableOwnerAddress(&item.Person.AddressStr).
					SetNillableOwnerPhone(&item.Person.LastPhoneNumber).
					SetNillableOwnerEmail(&item.Person.LastEPosta).
					SetNillableOwnerRegisterNo(&item.OccupationalRegistrationNumber).
					SetNillableOwnerCareer(&item.Title.Name).
					Save(ctx)

				if err != nil {
					fmt.Printf("Şirket oluşturma hatası: %v\n", err)
					return createCompanyToken, nil
				}

				fmt.Printf("Şirket başarıyla oluşturuldu: ID=%d\n", company.ID)

				// 4. Token ile şirketi ilişkilendir
				if _, err := createCompanyToken.Update().
					SetCompany(company).
					Save(ctx); err != nil {
					fmt.Printf("Token ile şirket ilişkilendirilemedi: %v\n", err)
				}

				// Kullanıcı ID'sini context'ten al
				claims := middlewares.CtxValue(ctx)
				userID := claims.ID

				// CompanyUser ilişkisini oluştur
				_, err = client.CompanyUser.Create().
					SetCompanyID(company.ID).
					SetUserID(userID).
					Save(ctx)
				if err != nil {
					fmt.Printf("Kullanıcı-şirket ilişkisi oluşturulamadı: %v\n", err)
				}
			}

			return createCompanyToken, nil
		}
		return nil, fmt.Errorf("token sorgulama hatası: %v", err)
	}

	// Token bulunduysa güncelle
	updatedCompanyToken, err := existingToken.Update().
		SetToken(*input.Token).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("şirket token güncellenemedi: %v", err)
	}

	return updatedCompanyToken, nil
}

// CompanyToken is the resolver for the companyToken field.
func (r *queryResolver) CompanyToken(ctx context.Context, companyCode *int) (*ent.CompanyToken, error) {
	client := middlewares.GetClientFromContext(ctx)

	company, err := client.CompanyDetail.Query().Where(companydetail.CompanyCodeEQ(*companyCode)).Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("şirket bulunamadı: %v", err)
	}

	companyToken, err := company.QueryTokens().Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("şirket token bulunamadı: %v", err)
	}

	return companyToken, nil
}

// CompanyToken returns generated.CompanyTokenResolver implementation.
func (r *Resolver) CompanyToken() generated.CompanyTokenResolver { return &companyTokenResolver{r} }

type companyTokenResolver struct{ *Resolver }
