package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"

	"github.com/polatbilal/gqlgen-ent/api-core/ent"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobowner"
	"github.com/polatbilal/gqlgen-ent/api-core/graphql/model"
	"github.com/polatbilal/gqlgen-ent/api-core/middlewares"
)

// CreateOwner is the resolver for the createOwner field.
func (r *mutationResolver) CreateOwner(ctx context.Context, input model.JobOwnerInput) (*ent.JobOwner, error) {
	client := middlewares.GetClientFromContext(ctx)

	// YDSID ile Owner var mı kontrol edelim
	owner, err := client.JobOwner.Query().Where(jobowner.YDSIDEQ(input.Ydsid)).Only(ctx)
	if ent.IsNotFound(err) {
		// Owner yoksa yeni oluşturalım
		owner, err = client.JobOwner.Create().
			SetName(*input.Name).
			SetNillableTcNo(input.TcNo).
			SetNillableTaxAdmin(input.TaxAdmin).
			SetNillableTaxNo(input.TaxNo).
			SetNillablePhone(input.Phone).
			SetNillableEmail(input.Email).
			SetNillableAddress(input.Address).
			SetYDSID(input.Ydsid).
			SetNillableShareholder(input.Shareholder).
			SetNillableNote(input.Note).
			Save(ctx)

		if err != nil {
			return nil, fmt.Errorf("failed to create owner: %w", err)
		}
	} else if err != nil {
		return nil, fmt.Errorf("failed to check owner: %w", err)
	}

	return owner, nil
}

// UpdateOwner is the resolver for the updateOwner field.
func (r *mutationResolver) UpdateOwner(ctx context.Context, yibfNo int, input model.JobOwnerInput) (*ent.JobOwner, error) {
	client := middlewares.GetClientFromContext(ctx)

	// Owner'ı doğrudan ydsid ile bul
	owner, err := client.JobOwner.Query().
		Where(jobowner.YDSIDEQ(input.Ydsid)).
		Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("owner bulunamadı: %v", err)
	}

	// Owner'ı güncelle
	owner, err = owner.Update().
		SetNillableName(input.Name).
		SetNillableTcNo(input.TcNo).
		SetNillableTaxAdmin(input.TaxAdmin).
		SetNillableTaxNo(input.TaxNo).
		SetNillablePhone(input.Phone).
		SetNillableEmail(input.Email).
		SetNillableAddress(input.Address).
		SetNillableShareholder(input.Shareholder).
		SetNillableNote(input.Note).
		Save(ctx)

	if err != nil {
		return nil, fmt.Errorf("failed to update owner: %w", err)
	}

	return owner, nil
}

// AllOwner is the resolver for the allOwner field.
func (r *queryResolver) AllOwner(ctx context.Context) ([]*ent.JobOwner, error) {
	client := middlewares.GetClientFromContext(ctx)
	return client.JobOwner.Query().All(ctx)
}

// Owner is the resolver for the owner field.
func (r *queryResolver) Owner(ctx context.Context, yibfNo int) (*ent.JobOwner, error) {
	client := middlewares.GetClientFromContext(ctx)

	// Önce JobDetail'i bul
	jobDetail, err := client.JobDetail.Query().
		Where(jobdetail.YibfNoEQ(yibfNo)).
		Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("iş detayı bulunamadı: %v", err)
	}

	// JobRelations üzerinden owner'ı bul
	relations, err := jobDetail.QueryRelations().Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("iş ilişkileri bulunamadı: %v", err)
	}

	owner, err := relations.QueryOwner().Only(ctx)
	if ent.IsNotFound(err) {
		return nil, nil
	}
	if err != nil {
		return nil, fmt.Errorf("failed to get owner: %w", err)
	}

	return owner, nil
}

// GetOwner is the resolver for the getOwner field.
func (r *queryResolver) GetOwner(ctx context.Context, ydsid int) (*ent.JobOwner, error) {
	client := middlewares.GetClientFromContext(ctx)
	return client.JobOwner.Query().Where(jobowner.YDSID(ydsid)).Only(ctx)
}
