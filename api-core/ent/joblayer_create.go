// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/joblayer"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobrelations"
)

// JobLayerCreate is the builder for creating a JobLayer entity.
type JobLayerCreate struct {
	config
	mutation *JobLayerMutation
	hooks    []Hook
}

// SetYibfNo sets the "yibfNo" field.
func (jlc *JobLayerCreate) SetYibfNo(i int) *JobLayerCreate {
	jlc.mutation.SetYibfNo(i)
	return jlc
}

// SetName sets the "Name" field.
func (jlc *JobLayerCreate) SetName(s string) *JobLayerCreate {
	jlc.mutation.SetName(s)
	return jlc
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (jlc *JobLayerCreate) SetNillableName(s *string) *JobLayerCreate {
	if s != nil {
		jlc.SetName(*s)
	}
	return jlc
}

// SetMetre sets the "Metre" field.
func (jlc *JobLayerCreate) SetMetre(s string) *JobLayerCreate {
	jlc.mutation.SetMetre(s)
	return jlc
}

// SetNillableMetre sets the "Metre" field if the given value is not nil.
func (jlc *JobLayerCreate) SetNillableMetre(s *string) *JobLayerCreate {
	if s != nil {
		jlc.SetMetre(*s)
	}
	return jlc
}

// SetMoldDate sets the "MoldDate" field.
func (jlc *JobLayerCreate) SetMoldDate(t time.Time) *JobLayerCreate {
	jlc.mutation.SetMoldDate(t)
	return jlc
}

// SetNillableMoldDate sets the "MoldDate" field if the given value is not nil.
func (jlc *JobLayerCreate) SetNillableMoldDate(t *time.Time) *JobLayerCreate {
	if t != nil {
		jlc.SetMoldDate(*t)
	}
	return jlc
}

// SetConcreteDate sets the "ConcreteDate" field.
func (jlc *JobLayerCreate) SetConcreteDate(t time.Time) *JobLayerCreate {
	jlc.mutation.SetConcreteDate(t)
	return jlc
}

// SetNillableConcreteDate sets the "ConcreteDate" field if the given value is not nil.
func (jlc *JobLayerCreate) SetNillableConcreteDate(t *time.Time) *JobLayerCreate {
	if t != nil {
		jlc.SetConcreteDate(*t)
	}
	return jlc
}

// SetSamples sets the "Samples" field.
func (jlc *JobLayerCreate) SetSamples(i int) *JobLayerCreate {
	jlc.mutation.SetSamples(i)
	return jlc
}

// SetNillableSamples sets the "Samples" field if the given value is not nil.
func (jlc *JobLayerCreate) SetNillableSamples(i *int) *JobLayerCreate {
	if i != nil {
		jlc.SetSamples(*i)
	}
	return jlc
}

// SetConcreteClass sets the "ConcreteClass" field.
func (jlc *JobLayerCreate) SetConcreteClass(s string) *JobLayerCreate {
	jlc.mutation.SetConcreteClass(s)
	return jlc
}

// SetNillableConcreteClass sets the "ConcreteClass" field if the given value is not nil.
func (jlc *JobLayerCreate) SetNillableConcreteClass(s *string) *JobLayerCreate {
	if s != nil {
		jlc.SetConcreteClass(*s)
	}
	return jlc
}

// SetWeekResult sets the "WeekResult" field.
func (jlc *JobLayerCreate) SetWeekResult(s string) *JobLayerCreate {
	jlc.mutation.SetWeekResult(s)
	return jlc
}

// SetNillableWeekResult sets the "WeekResult" field if the given value is not nil.
func (jlc *JobLayerCreate) SetNillableWeekResult(s *string) *JobLayerCreate {
	if s != nil {
		jlc.SetWeekResult(*s)
	}
	return jlc
}

// SetMonthResult sets the "MonthResult" field.
func (jlc *JobLayerCreate) SetMonthResult(s string) *JobLayerCreate {
	jlc.mutation.SetMonthResult(s)
	return jlc
}

// SetNillableMonthResult sets the "MonthResult" field if the given value is not nil.
func (jlc *JobLayerCreate) SetNillableMonthResult(s *string) *JobLayerCreate {
	if s != nil {
		jlc.SetMonthResult(*s)
	}
	return jlc
}

// SetCreatedAt sets the "CreatedAt" field.
func (jlc *JobLayerCreate) SetCreatedAt(t time.Time) *JobLayerCreate {
	jlc.mutation.SetCreatedAt(t)
	return jlc
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (jlc *JobLayerCreate) SetNillableCreatedAt(t *time.Time) *JobLayerCreate {
	if t != nil {
		jlc.SetCreatedAt(*t)
	}
	return jlc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (jlc *JobLayerCreate) SetUpdatedAt(t time.Time) *JobLayerCreate {
	jlc.mutation.SetUpdatedAt(t)
	return jlc
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (jlc *JobLayerCreate) SetNillableUpdatedAt(t *time.Time) *JobLayerCreate {
	if t != nil {
		jlc.SetUpdatedAt(*t)
	}
	return jlc
}

// SetLayerID sets the "layer" edge to the JobRelations entity by ID.
func (jlc *JobLayerCreate) SetLayerID(id int) *JobLayerCreate {
	jlc.mutation.SetLayerID(id)
	return jlc
}

// SetNillableLayerID sets the "layer" edge to the JobRelations entity by ID if the given value is not nil.
func (jlc *JobLayerCreate) SetNillableLayerID(id *int) *JobLayerCreate {
	if id != nil {
		jlc = jlc.SetLayerID(*id)
	}
	return jlc
}

// SetLayer sets the "layer" edge to the JobRelations entity.
func (jlc *JobLayerCreate) SetLayer(j *JobRelations) *JobLayerCreate {
	return jlc.SetLayerID(j.ID)
}

// Mutation returns the JobLayerMutation object of the builder.
func (jlc *JobLayerCreate) Mutation() *JobLayerMutation {
	return jlc.mutation
}

// Save creates the JobLayer in the database.
func (jlc *JobLayerCreate) Save(ctx context.Context) (*JobLayer, error) {
	jlc.defaults()
	return withHooks(ctx, jlc.sqlSave, jlc.mutation, jlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jlc *JobLayerCreate) SaveX(ctx context.Context) *JobLayer {
	v, err := jlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jlc *JobLayerCreate) Exec(ctx context.Context) error {
	_, err := jlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jlc *JobLayerCreate) ExecX(ctx context.Context) {
	if err := jlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jlc *JobLayerCreate) defaults() {
	if _, ok := jlc.mutation.Name(); !ok {
		v := joblayer.DefaultName
		jlc.mutation.SetName(v)
	}
	if _, ok := jlc.mutation.Metre(); !ok {
		v := joblayer.DefaultMetre
		jlc.mutation.SetMetre(v)
	}
	if _, ok := jlc.mutation.CreatedAt(); !ok {
		v := joblayer.DefaultCreatedAt()
		jlc.mutation.SetCreatedAt(v)
	}
	if _, ok := jlc.mutation.UpdatedAt(); !ok {
		v := joblayer.DefaultUpdatedAt()
		jlc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jlc *JobLayerCreate) check() error {
	if _, ok := jlc.mutation.YibfNo(); !ok {
		return &ValidationError{Name: "yibfNo", err: errors.New(`ent: missing required field "JobLayer.yibfNo"`)}
	}
	if _, ok := jlc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "JobLayer.Name"`)}
	}
	if _, ok := jlc.mutation.Metre(); !ok {
		return &ValidationError{Name: "Metre", err: errors.New(`ent: missing required field "JobLayer.Metre"`)}
	}
	if _, ok := jlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "CreatedAt", err: errors.New(`ent: missing required field "JobLayer.CreatedAt"`)}
	}
	if _, ok := jlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "UpdatedAt", err: errors.New(`ent: missing required field "JobLayer.UpdatedAt"`)}
	}
	return nil
}

func (jlc *JobLayerCreate) sqlSave(ctx context.Context) (*JobLayer, error) {
	if err := jlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	jlc.mutation.id = &_node.ID
	jlc.mutation.done = true
	return _node, nil
}

func (jlc *JobLayerCreate) createSpec() (*JobLayer, *sqlgraph.CreateSpec) {
	var (
		_node = &JobLayer{config: jlc.config}
		_spec = sqlgraph.NewCreateSpec(joblayer.Table, sqlgraph.NewFieldSpec(joblayer.FieldID, field.TypeInt))
	)
	if value, ok := jlc.mutation.YibfNo(); ok {
		_spec.SetField(joblayer.FieldYibfNo, field.TypeInt, value)
		_node.YibfNo = value
	}
	if value, ok := jlc.mutation.Name(); ok {
		_spec.SetField(joblayer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := jlc.mutation.Metre(); ok {
		_spec.SetField(joblayer.FieldMetre, field.TypeString, value)
		_node.Metre = value
	}
	if value, ok := jlc.mutation.MoldDate(); ok {
		_spec.SetField(joblayer.FieldMoldDate, field.TypeTime, value)
		_node.MoldDate = value
	}
	if value, ok := jlc.mutation.ConcreteDate(); ok {
		_spec.SetField(joblayer.FieldConcreteDate, field.TypeTime, value)
		_node.ConcreteDate = value
	}
	if value, ok := jlc.mutation.Samples(); ok {
		_spec.SetField(joblayer.FieldSamples, field.TypeInt, value)
		_node.Samples = value
	}
	if value, ok := jlc.mutation.ConcreteClass(); ok {
		_spec.SetField(joblayer.FieldConcreteClass, field.TypeString, value)
		_node.ConcreteClass = value
	}
	if value, ok := jlc.mutation.WeekResult(); ok {
		_spec.SetField(joblayer.FieldWeekResult, field.TypeString, value)
		_node.WeekResult = value
	}
	if value, ok := jlc.mutation.MonthResult(); ok {
		_spec.SetField(joblayer.FieldMonthResult, field.TypeString, value)
		_node.MonthResult = value
	}
	if value, ok := jlc.mutation.CreatedAt(); ok {
		_spec.SetField(joblayer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jlc.mutation.UpdatedAt(); ok {
		_spec.SetField(joblayer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := jlc.mutation.LayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   joblayer.LayerTable,
			Columns: []string{joblayer.LayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrelations.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobLayerCreateBulk is the builder for creating many JobLayer entities in bulk.
type JobLayerCreateBulk struct {
	config
	err      error
	builders []*JobLayerCreate
}

// Save creates the JobLayer entities in the database.
func (jlcb *JobLayerCreateBulk) Save(ctx context.Context) ([]*JobLayer, error) {
	if jlcb.err != nil {
		return nil, jlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jlcb.builders))
	nodes := make([]*JobLayer, len(jlcb.builders))
	mutators := make([]Mutator, len(jlcb.builders))
	for i := range jlcb.builders {
		func(i int, root context.Context) {
			builder := jlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobLayerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jlcb *JobLayerCreateBulk) SaveX(ctx context.Context) []*JobLayer {
	v, err := jlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jlcb *JobLayerCreateBulk) Exec(ctx context.Context) error {
	_, err := jlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jlcb *JobLayerCreateBulk) ExecX(ctx context.Context) {
	if err := jlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
