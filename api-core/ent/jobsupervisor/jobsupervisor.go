// Code generated by ent, DO NOT EDIT.

package jobsupervisor

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the jobsupervisor type in the database.
	Label = "job_supervisor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldTcNo holds the string denoting the tcno field in the database.
	FieldTcNo = "tc_no"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldCareer holds the string denoting the career field in the database.
	FieldCareer = "career"
	// FieldRegisterNo holds the string denoting the registerno field in the database.
	FieldRegisterNo = "register_no"
	// FieldSocialSecurityNo holds the string denoting the socialsecurityno field in the database.
	FieldSocialSecurityNo = "social_security_no"
	// FieldSchoolGraduation holds the string denoting the schoolgraduation field in the database.
	FieldSchoolGraduation = "school_graduation"
	// FieldYDSID holds the string denoting the ydsid field in the database.
	FieldYDSID = "ydsid"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeSupervisors holds the string denoting the supervisors edge name in mutations.
	EdgeSupervisors = "supervisors"
	// Table holds the table name of the jobsupervisor in the database.
	Table = "job_supervisors"
	// SupervisorsTable is the table that holds the supervisors relation/edge.
	SupervisorsTable = "job_relations"
	// SupervisorsInverseTable is the table name for the JobRelations entity.
	// It exists in this package in order to avoid circular dependency with the "jobrelations" package.
	SupervisorsInverseTable = "job_relations"
	// SupervisorsColumn is the table column denoting the supervisors relation/edge.
	SupervisorsColumn = "supervisor_id"
)

// Columns holds all SQL columns for jobsupervisor fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAddress,
	FieldPhone,
	FieldEmail,
	FieldTcNo,
	FieldPosition,
	FieldCareer,
	FieldRegisterNo,
	FieldSocialSecurityNo,
	FieldSchoolGraduation,
	FieldYDSID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "CreatedAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "UpdatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "UpdatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the JobSupervisor queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the Name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAddress orders the results by the Address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByPhone orders the results by the Phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByEmail orders the results by the Email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByTcNo orders the results by the TcNo field.
func ByTcNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTcNo, opts...).ToFunc()
}

// ByPosition orders the results by the Position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByCareer orders the results by the Career field.
func ByCareer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCareer, opts...).ToFunc()
}

// ByRegisterNo orders the results by the RegisterNo field.
func ByRegisterNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegisterNo, opts...).ToFunc()
}

// BySocialSecurityNo orders the results by the SocialSecurityNo field.
func BySocialSecurityNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSocialSecurityNo, opts...).ToFunc()
}

// BySchoolGraduation orders the results by the SchoolGraduation field.
func BySchoolGraduation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSchoolGraduation, opts...).ToFunc()
}

// ByYDSID orders the results by the YDSID field.
func ByYDSID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYDSID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySupervisorsCount orders the results by supervisors count.
func BySupervisorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSupervisorsStep(), opts...)
	}
}

// BySupervisors orders the results by supervisors terms.
func BySupervisors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSupervisorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSupervisorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SupervisorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SupervisorsTable, SupervisorsColumn),
	)
}
