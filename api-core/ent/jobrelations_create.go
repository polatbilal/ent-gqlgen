// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/companydetail"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/companyengineer"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobauthor"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobcontractor"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/joblayer"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobowner"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobpayments"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobprogress"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobrelations"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobsupervisor"
)

// JobRelationsCreate is the builder for creating a JobRelations entity.
type JobRelationsCreate struct {
	config
	mutation *JobRelationsMutation
	hooks    []Hook
}

// SetYibfNo sets the "yibfNo" field.
func (jrc *JobRelationsCreate) SetYibfNo(i int) *JobRelationsCreate {
	jrc.mutation.SetYibfNo(i)
	return jrc
}

// SetCreatedAt sets the "CreatedAt" field.
func (jrc *JobRelationsCreate) SetCreatedAt(t time.Time) *JobRelationsCreate {
	jrc.mutation.SetCreatedAt(t)
	return jrc
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (jrc *JobRelationsCreate) SetNillableCreatedAt(t *time.Time) *JobRelationsCreate {
	if t != nil {
		jrc.SetCreatedAt(*t)
	}
	return jrc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (jrc *JobRelationsCreate) SetUpdatedAt(t time.Time) *JobRelationsCreate {
	jrc.mutation.SetUpdatedAt(t)
	return jrc
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (jrc *JobRelationsCreate) SetNillableUpdatedAt(t *time.Time) *JobRelationsCreate {
	if t != nil {
		jrc.SetUpdatedAt(*t)
	}
	return jrc
}

// SetJobID sets the "job" edge to the JobDetail entity by ID.
func (jrc *JobRelationsCreate) SetJobID(id int) *JobRelationsCreate {
	jrc.mutation.SetJobID(id)
	return jrc
}

// SetNillableJobID sets the "job" edge to the JobDetail entity by ID if the given value is not nil.
func (jrc *JobRelationsCreate) SetNillableJobID(id *int) *JobRelationsCreate {
	if id != nil {
		jrc = jrc.SetJobID(*id)
	}
	return jrc
}

// SetJob sets the "job" edge to the JobDetail entity.
func (jrc *JobRelationsCreate) SetJob(j *JobDetail) *JobRelationsCreate {
	return jrc.SetJobID(j.ID)
}

// SetOwnerID sets the "owner" edge to the JobOwner entity by ID.
func (jrc *JobRelationsCreate) SetOwnerID(id int) *JobRelationsCreate {
	jrc.mutation.SetOwnerID(id)
	return jrc
}

// SetNillableOwnerID sets the "owner" edge to the JobOwner entity by ID if the given value is not nil.
func (jrc *JobRelationsCreate) SetNillableOwnerID(id *int) *JobRelationsCreate {
	if id != nil {
		jrc = jrc.SetOwnerID(*id)
	}
	return jrc
}

// SetOwner sets the "owner" edge to the JobOwner entity.
func (jrc *JobRelationsCreate) SetOwner(j *JobOwner) *JobRelationsCreate {
	return jrc.SetOwnerID(j.ID)
}

// SetAuthorID sets the "author" edge to the JobAuthor entity by ID.
func (jrc *JobRelationsCreate) SetAuthorID(id int) *JobRelationsCreate {
	jrc.mutation.SetAuthorID(id)
	return jrc
}

// SetNillableAuthorID sets the "author" edge to the JobAuthor entity by ID if the given value is not nil.
func (jrc *JobRelationsCreate) SetNillableAuthorID(id *int) *JobRelationsCreate {
	if id != nil {
		jrc = jrc.SetAuthorID(*id)
	}
	return jrc
}

// SetAuthor sets the "author" edge to the JobAuthor entity.
func (jrc *JobRelationsCreate) SetAuthor(j *JobAuthor) *JobRelationsCreate {
	return jrc.SetAuthorID(j.ID)
}

// SetCompanyID sets the "company" edge to the CompanyDetail entity by ID.
func (jrc *JobRelationsCreate) SetCompanyID(id int) *JobRelationsCreate {
	jrc.mutation.SetCompanyID(id)
	return jrc
}

// SetNillableCompanyID sets the "company" edge to the CompanyDetail entity by ID if the given value is not nil.
func (jrc *JobRelationsCreate) SetNillableCompanyID(id *int) *JobRelationsCreate {
	if id != nil {
		jrc = jrc.SetCompanyID(*id)
	}
	return jrc
}

// SetCompany sets the "company" edge to the CompanyDetail entity.
func (jrc *JobRelationsCreate) SetCompany(c *CompanyDetail) *JobRelationsCreate {
	return jrc.SetCompanyID(c.ID)
}

// SetProgressID sets the "progress" edge to the JobProgress entity by ID.
func (jrc *JobRelationsCreate) SetProgressID(id int) *JobRelationsCreate {
	jrc.mutation.SetProgressID(id)
	return jrc
}

// SetNillableProgressID sets the "progress" edge to the JobProgress entity by ID if the given value is not nil.
func (jrc *JobRelationsCreate) SetNillableProgressID(id *int) *JobRelationsCreate {
	if id != nil {
		jrc = jrc.SetProgressID(*id)
	}
	return jrc
}

// SetProgress sets the "progress" edge to the JobProgress entity.
func (jrc *JobRelationsCreate) SetProgress(j *JobProgress) *JobRelationsCreate {
	return jrc.SetProgressID(j.ID)
}

// SetContractorID sets the "contractor" edge to the JobContractor entity by ID.
func (jrc *JobRelationsCreate) SetContractorID(id int) *JobRelationsCreate {
	jrc.mutation.SetContractorID(id)
	return jrc
}

// SetNillableContractorID sets the "contractor" edge to the JobContractor entity by ID if the given value is not nil.
func (jrc *JobRelationsCreate) SetNillableContractorID(id *int) *JobRelationsCreate {
	if id != nil {
		jrc = jrc.SetContractorID(*id)
	}
	return jrc
}

// SetContractor sets the "contractor" edge to the JobContractor entity.
func (jrc *JobRelationsCreate) SetContractor(j *JobContractor) *JobRelationsCreate {
	return jrc.SetContractorID(j.ID)
}

// SetSupervisorID sets the "supervisor" edge to the JobSupervisor entity by ID.
func (jrc *JobRelationsCreate) SetSupervisorID(id int) *JobRelationsCreate {
	jrc.mutation.SetSupervisorID(id)
	return jrc
}

// SetNillableSupervisorID sets the "supervisor" edge to the JobSupervisor entity by ID if the given value is not nil.
func (jrc *JobRelationsCreate) SetNillableSupervisorID(id *int) *JobRelationsCreate {
	if id != nil {
		jrc = jrc.SetSupervisorID(*id)
	}
	return jrc
}

// SetSupervisor sets the "supervisor" edge to the JobSupervisor entity.
func (jrc *JobRelationsCreate) SetSupervisor(j *JobSupervisor) *JobRelationsCreate {
	return jrc.SetSupervisorID(j.ID)
}

// SetStaticID sets the "static" edge to the CompanyEngineer entity by ID.
func (jrc *JobRelationsCreate) SetStaticID(id int) *JobRelationsCreate {
	jrc.mutation.SetStaticID(id)
	return jrc
}

// SetNillableStaticID sets the "static" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jrc *JobRelationsCreate) SetNillableStaticID(id *int) *JobRelationsCreate {
	if id != nil {
		jrc = jrc.SetStaticID(*id)
	}
	return jrc
}

// SetStatic sets the "static" edge to the CompanyEngineer entity.
func (jrc *JobRelationsCreate) SetStatic(c *CompanyEngineer) *JobRelationsCreate {
	return jrc.SetStaticID(c.ID)
}

// SetMechanicID sets the "mechanic" edge to the CompanyEngineer entity by ID.
func (jrc *JobRelationsCreate) SetMechanicID(id int) *JobRelationsCreate {
	jrc.mutation.SetMechanicID(id)
	return jrc
}

// SetNillableMechanicID sets the "mechanic" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jrc *JobRelationsCreate) SetNillableMechanicID(id *int) *JobRelationsCreate {
	if id != nil {
		jrc = jrc.SetMechanicID(*id)
	}
	return jrc
}

// SetMechanic sets the "mechanic" edge to the CompanyEngineer entity.
func (jrc *JobRelationsCreate) SetMechanic(c *CompanyEngineer) *JobRelationsCreate {
	return jrc.SetMechanicID(c.ID)
}

// SetElectricID sets the "electric" edge to the CompanyEngineer entity by ID.
func (jrc *JobRelationsCreate) SetElectricID(id int) *JobRelationsCreate {
	jrc.mutation.SetElectricID(id)
	return jrc
}

// SetNillableElectricID sets the "electric" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jrc *JobRelationsCreate) SetNillableElectricID(id *int) *JobRelationsCreate {
	if id != nil {
		jrc = jrc.SetElectricID(*id)
	}
	return jrc
}

// SetElectric sets the "electric" edge to the CompanyEngineer entity.
func (jrc *JobRelationsCreate) SetElectric(c *CompanyEngineer) *JobRelationsCreate {
	return jrc.SetElectricID(c.ID)
}

// SetInspectorID sets the "inspector" edge to the CompanyEngineer entity by ID.
func (jrc *JobRelationsCreate) SetInspectorID(id int) *JobRelationsCreate {
	jrc.mutation.SetInspectorID(id)
	return jrc
}

// SetNillableInspectorID sets the "inspector" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jrc *JobRelationsCreate) SetNillableInspectorID(id *int) *JobRelationsCreate {
	if id != nil {
		jrc = jrc.SetInspectorID(*id)
	}
	return jrc
}

// SetInspector sets the "inspector" edge to the CompanyEngineer entity.
func (jrc *JobRelationsCreate) SetInspector(c *CompanyEngineer) *JobRelationsCreate {
	return jrc.SetInspectorID(c.ID)
}

// SetArchitectID sets the "architect" edge to the CompanyEngineer entity by ID.
func (jrc *JobRelationsCreate) SetArchitectID(id int) *JobRelationsCreate {
	jrc.mutation.SetArchitectID(id)
	return jrc
}

// SetNillableArchitectID sets the "architect" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jrc *JobRelationsCreate) SetNillableArchitectID(id *int) *JobRelationsCreate {
	if id != nil {
		jrc = jrc.SetArchitectID(*id)
	}
	return jrc
}

// SetArchitect sets the "architect" edge to the CompanyEngineer entity.
func (jrc *JobRelationsCreate) SetArchitect(c *CompanyEngineer) *JobRelationsCreate {
	return jrc.SetArchitectID(c.ID)
}

// SetControllerID sets the "controller" edge to the CompanyEngineer entity by ID.
func (jrc *JobRelationsCreate) SetControllerID(id int) *JobRelationsCreate {
	jrc.mutation.SetControllerID(id)
	return jrc
}

// SetNillableControllerID sets the "controller" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jrc *JobRelationsCreate) SetNillableControllerID(id *int) *JobRelationsCreate {
	if id != nil {
		jrc = jrc.SetControllerID(*id)
	}
	return jrc
}

// SetController sets the "controller" edge to the CompanyEngineer entity.
func (jrc *JobRelationsCreate) SetController(c *CompanyEngineer) *JobRelationsCreate {
	return jrc.SetControllerID(c.ID)
}

// SetMechaniccontrollerID sets the "mechaniccontroller" edge to the CompanyEngineer entity by ID.
func (jrc *JobRelationsCreate) SetMechaniccontrollerID(id int) *JobRelationsCreate {
	jrc.mutation.SetMechaniccontrollerID(id)
	return jrc
}

// SetNillableMechaniccontrollerID sets the "mechaniccontroller" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jrc *JobRelationsCreate) SetNillableMechaniccontrollerID(id *int) *JobRelationsCreate {
	if id != nil {
		jrc = jrc.SetMechaniccontrollerID(*id)
	}
	return jrc
}

// SetMechaniccontroller sets the "mechaniccontroller" edge to the CompanyEngineer entity.
func (jrc *JobRelationsCreate) SetMechaniccontroller(c *CompanyEngineer) *JobRelationsCreate {
	return jrc.SetMechaniccontrollerID(c.ID)
}

// SetElectriccontrollerID sets the "electriccontroller" edge to the CompanyEngineer entity by ID.
func (jrc *JobRelationsCreate) SetElectriccontrollerID(id int) *JobRelationsCreate {
	jrc.mutation.SetElectriccontrollerID(id)
	return jrc
}

// SetNillableElectriccontrollerID sets the "electriccontroller" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jrc *JobRelationsCreate) SetNillableElectriccontrollerID(id *int) *JobRelationsCreate {
	if id != nil {
		jrc = jrc.SetElectriccontrollerID(*id)
	}
	return jrc
}

// SetElectriccontroller sets the "electriccontroller" edge to the CompanyEngineer entity.
func (jrc *JobRelationsCreate) SetElectriccontroller(c *CompanyEngineer) *JobRelationsCreate {
	return jrc.SetElectriccontrollerID(c.ID)
}

// AddLayerIDs adds the "layers" edge to the JobLayer entity by IDs.
func (jrc *JobRelationsCreate) AddLayerIDs(ids ...int) *JobRelationsCreate {
	jrc.mutation.AddLayerIDs(ids...)
	return jrc
}

// AddLayers adds the "layers" edges to the JobLayer entity.
func (jrc *JobRelationsCreate) AddLayers(j ...*JobLayer) *JobRelationsCreate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jrc.AddLayerIDs(ids...)
}

// AddPaymentIDs adds the "payments" edge to the JobPayments entity by IDs.
func (jrc *JobRelationsCreate) AddPaymentIDs(ids ...int) *JobRelationsCreate {
	jrc.mutation.AddPaymentIDs(ids...)
	return jrc
}

// AddPayments adds the "payments" edges to the JobPayments entity.
func (jrc *JobRelationsCreate) AddPayments(j ...*JobPayments) *JobRelationsCreate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jrc.AddPaymentIDs(ids...)
}

// Mutation returns the JobRelationsMutation object of the builder.
func (jrc *JobRelationsCreate) Mutation() *JobRelationsMutation {
	return jrc.mutation
}

// Save creates the JobRelations in the database.
func (jrc *JobRelationsCreate) Save(ctx context.Context) (*JobRelations, error) {
	jrc.defaults()
	return withHooks(ctx, jrc.sqlSave, jrc.mutation, jrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jrc *JobRelationsCreate) SaveX(ctx context.Context) *JobRelations {
	v, err := jrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jrc *JobRelationsCreate) Exec(ctx context.Context) error {
	_, err := jrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jrc *JobRelationsCreate) ExecX(ctx context.Context) {
	if err := jrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jrc *JobRelationsCreate) defaults() {
	if _, ok := jrc.mutation.CreatedAt(); !ok {
		v := jobrelations.DefaultCreatedAt()
		jrc.mutation.SetCreatedAt(v)
	}
	if _, ok := jrc.mutation.UpdatedAt(); !ok {
		v := jobrelations.DefaultUpdatedAt()
		jrc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jrc *JobRelationsCreate) check() error {
	if _, ok := jrc.mutation.YibfNo(); !ok {
		return &ValidationError{Name: "yibfNo", err: errors.New(`ent: missing required field "JobRelations.yibfNo"`)}
	}
	if _, ok := jrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "CreatedAt", err: errors.New(`ent: missing required field "JobRelations.CreatedAt"`)}
	}
	if _, ok := jrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "UpdatedAt", err: errors.New(`ent: missing required field "JobRelations.UpdatedAt"`)}
	}
	return nil
}

func (jrc *JobRelationsCreate) sqlSave(ctx context.Context) (*JobRelations, error) {
	if err := jrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	jrc.mutation.id = &_node.ID
	jrc.mutation.done = true
	return _node, nil
}

func (jrc *JobRelationsCreate) createSpec() (*JobRelations, *sqlgraph.CreateSpec) {
	var (
		_node = &JobRelations{config: jrc.config}
		_spec = sqlgraph.NewCreateSpec(jobrelations.Table, sqlgraph.NewFieldSpec(jobrelations.FieldID, field.TypeInt))
	)
	if value, ok := jrc.mutation.YibfNo(); ok {
		_spec.SetField(jobrelations.FieldYibfNo, field.TypeInt, value)
		_node.YibfNo = value
	}
	if value, ok := jrc.mutation.CreatedAt(); ok {
		_spec.SetField(jobrelations.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jrc.mutation.UpdatedAt(); ok {
		_spec.SetField(jobrelations.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := jrc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   jobrelations.JobTable,
			Columns: []string{jobrelations.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jrc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.OwnerTable,
			Columns: []string{jobrelations.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobowner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.owner_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jrc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.AuthorTable,
			Columns: []string{jobrelations.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobauthor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.author_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jrc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.CompanyTable,
			Columns: []string{jobrelations.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jrc.mutation.ProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ProgressTable,
			Columns: []string{jobrelations.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.progress_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jrc.mutation.ContractorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ContractorTable,
			Columns: []string{jobrelations.ContractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobcontractor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.contractor_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jrc.mutation.SupervisorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.SupervisorTable,
			Columns: []string{jobrelations.SupervisorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobsupervisor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.supervisor_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jrc.mutation.StaticIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.StaticTable,
			Columns: []string{jobrelations.StaticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.static_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jrc.mutation.MechanicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.MechanicTable,
			Columns: []string{jobrelations.MechanicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.mechanic_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jrc.mutation.ElectricIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ElectricTable,
			Columns: []string{jobrelations.ElectricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.electric_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jrc.mutation.InspectorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.InspectorTable,
			Columns: []string{jobrelations.InspectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.inspector_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jrc.mutation.ArchitectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ArchitectTable,
			Columns: []string{jobrelations.ArchitectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.architect_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jrc.mutation.ControllerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ControllerTable,
			Columns: []string{jobrelations.ControllerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.controller_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jrc.mutation.MechaniccontrollerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.MechaniccontrollerTable,
			Columns: []string{jobrelations.MechaniccontrollerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.mechaniccontroller_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jrc.mutation.ElectriccontrollerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ElectriccontrollerTable,
			Columns: []string{jobrelations.ElectriccontrollerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.electriccontroller_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jrc.mutation.LayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobrelations.LayersTable,
			Columns: []string{jobrelations.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jrc.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobrelations.PaymentsTable,
			Columns: []string{jobrelations.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobpayments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobRelationsCreateBulk is the builder for creating many JobRelations entities in bulk.
type JobRelationsCreateBulk struct {
	config
	err      error
	builders []*JobRelationsCreate
}

// Save creates the JobRelations entities in the database.
func (jrcb *JobRelationsCreateBulk) Save(ctx context.Context) ([]*JobRelations, error) {
	if jrcb.err != nil {
		return nil, jrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jrcb.builders))
	nodes := make([]*JobRelations, len(jrcb.builders))
	mutators := make([]Mutator, len(jrcb.builders))
	for i := range jrcb.builders {
		func(i int, root context.Context) {
			builder := jrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobRelationsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jrcb *JobRelationsCreateBulk) SaveX(ctx context.Context) []*JobRelations {
	v, err := jrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jrcb *JobRelationsCreateBulk) Exec(ctx context.Context) error {
	_, err := jrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jrcb *JobRelationsCreateBulk) ExecX(ctx context.Context) {
	if err := jrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
