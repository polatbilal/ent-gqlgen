// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/companydetail"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/companyengineer"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobauthor"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobcontractor"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/joblayer"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobowner"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobpayments"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobprogress"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobrelations"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobsupervisor"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/predicate"
)

// JobRelationsQuery is the builder for querying JobRelations entities.
type JobRelationsQuery struct {
	config
	ctx                    *QueryContext
	order                  []jobrelations.OrderOption
	inters                 []Interceptor
	predicates             []predicate.JobRelations
	withJob                *JobDetailQuery
	withOwner              *JobOwnerQuery
	withAuthor             *JobAuthorQuery
	withCompany            *CompanyDetailQuery
	withProgress           *JobProgressQuery
	withContractor         *JobContractorQuery
	withSupervisor         *JobSupervisorQuery
	withStatic             *CompanyEngineerQuery
	withMechanic           *CompanyEngineerQuery
	withElectric           *CompanyEngineerQuery
	withInspector          *CompanyEngineerQuery
	withArchitect          *CompanyEngineerQuery
	withController         *CompanyEngineerQuery
	withMechaniccontroller *CompanyEngineerQuery
	withElectriccontroller *CompanyEngineerQuery
	withLayers             *JobLayerQuery
	withPayments           *JobPaymentsQuery
	withFKs                bool
	modifiers              []func(*sql.Selector)
	loadTotal              []func(context.Context, []*JobRelations) error
	withNamedLayers        map[string]*JobLayerQuery
	withNamedPayments      map[string]*JobPaymentsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the JobRelationsQuery builder.
func (jrq *JobRelationsQuery) Where(ps ...predicate.JobRelations) *JobRelationsQuery {
	jrq.predicates = append(jrq.predicates, ps...)
	return jrq
}

// Limit the number of records to be returned by this query.
func (jrq *JobRelationsQuery) Limit(limit int) *JobRelationsQuery {
	jrq.ctx.Limit = &limit
	return jrq
}

// Offset to start from.
func (jrq *JobRelationsQuery) Offset(offset int) *JobRelationsQuery {
	jrq.ctx.Offset = &offset
	return jrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (jrq *JobRelationsQuery) Unique(unique bool) *JobRelationsQuery {
	jrq.ctx.Unique = &unique
	return jrq
}

// Order specifies how the records should be ordered.
func (jrq *JobRelationsQuery) Order(o ...jobrelations.OrderOption) *JobRelationsQuery {
	jrq.order = append(jrq.order, o...)
	return jrq
}

// QueryJob chains the current query on the "job" edge.
func (jrq *JobRelationsQuery) QueryJob() *JobDetailQuery {
	query := (&JobDetailClient{config: jrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobrelations.Table, jobrelations.FieldID, selector),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, jobrelations.JobTable, jobrelations.JobColumn),
		)
		fromU = sqlgraph.SetNeighbors(jrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwner chains the current query on the "owner" edge.
func (jrq *JobRelationsQuery) QueryOwner() *JobOwnerQuery {
	query := (&JobOwnerClient{config: jrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobrelations.Table, jobrelations.FieldID, selector),
			sqlgraph.To(jobowner.Table, jobowner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobrelations.OwnerTable, jobrelations.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(jrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAuthor chains the current query on the "author" edge.
func (jrq *JobRelationsQuery) QueryAuthor() *JobAuthorQuery {
	query := (&JobAuthorClient{config: jrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobrelations.Table, jobrelations.FieldID, selector),
			sqlgraph.To(jobauthor.Table, jobauthor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobrelations.AuthorTable, jobrelations.AuthorColumn),
		)
		fromU = sqlgraph.SetNeighbors(jrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCompany chains the current query on the "company" edge.
func (jrq *JobRelationsQuery) QueryCompany() *CompanyDetailQuery {
	query := (&CompanyDetailClient{config: jrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobrelations.Table, jobrelations.FieldID, selector),
			sqlgraph.To(companydetail.Table, companydetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobrelations.CompanyTable, jobrelations.CompanyColumn),
		)
		fromU = sqlgraph.SetNeighbors(jrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProgress chains the current query on the "progress" edge.
func (jrq *JobRelationsQuery) QueryProgress() *JobProgressQuery {
	query := (&JobProgressClient{config: jrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobrelations.Table, jobrelations.FieldID, selector),
			sqlgraph.To(jobprogress.Table, jobprogress.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobrelations.ProgressTable, jobrelations.ProgressColumn),
		)
		fromU = sqlgraph.SetNeighbors(jrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContractor chains the current query on the "contractor" edge.
func (jrq *JobRelationsQuery) QueryContractor() *JobContractorQuery {
	query := (&JobContractorClient{config: jrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobrelations.Table, jobrelations.FieldID, selector),
			sqlgraph.To(jobcontractor.Table, jobcontractor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobrelations.ContractorTable, jobrelations.ContractorColumn),
		)
		fromU = sqlgraph.SetNeighbors(jrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySupervisor chains the current query on the "supervisor" edge.
func (jrq *JobRelationsQuery) QuerySupervisor() *JobSupervisorQuery {
	query := (&JobSupervisorClient{config: jrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobrelations.Table, jobrelations.FieldID, selector),
			sqlgraph.To(jobsupervisor.Table, jobsupervisor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobrelations.SupervisorTable, jobrelations.SupervisorColumn),
		)
		fromU = sqlgraph.SetNeighbors(jrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStatic chains the current query on the "static" edge.
func (jrq *JobRelationsQuery) QueryStatic() *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: jrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobrelations.Table, jobrelations.FieldID, selector),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobrelations.StaticTable, jobrelations.StaticColumn),
		)
		fromU = sqlgraph.SetNeighbors(jrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMechanic chains the current query on the "mechanic" edge.
func (jrq *JobRelationsQuery) QueryMechanic() *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: jrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobrelations.Table, jobrelations.FieldID, selector),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobrelations.MechanicTable, jobrelations.MechanicColumn),
		)
		fromU = sqlgraph.SetNeighbors(jrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryElectric chains the current query on the "electric" edge.
func (jrq *JobRelationsQuery) QueryElectric() *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: jrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobrelations.Table, jobrelations.FieldID, selector),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobrelations.ElectricTable, jobrelations.ElectricColumn),
		)
		fromU = sqlgraph.SetNeighbors(jrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInspector chains the current query on the "inspector" edge.
func (jrq *JobRelationsQuery) QueryInspector() *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: jrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobrelations.Table, jobrelations.FieldID, selector),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobrelations.InspectorTable, jobrelations.InspectorColumn),
		)
		fromU = sqlgraph.SetNeighbors(jrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryArchitect chains the current query on the "architect" edge.
func (jrq *JobRelationsQuery) QueryArchitect() *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: jrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobrelations.Table, jobrelations.FieldID, selector),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobrelations.ArchitectTable, jobrelations.ArchitectColumn),
		)
		fromU = sqlgraph.SetNeighbors(jrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryController chains the current query on the "controller" edge.
func (jrq *JobRelationsQuery) QueryController() *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: jrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobrelations.Table, jobrelations.FieldID, selector),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobrelations.ControllerTable, jobrelations.ControllerColumn),
		)
		fromU = sqlgraph.SetNeighbors(jrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMechaniccontroller chains the current query on the "mechaniccontroller" edge.
func (jrq *JobRelationsQuery) QueryMechaniccontroller() *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: jrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobrelations.Table, jobrelations.FieldID, selector),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobrelations.MechaniccontrollerTable, jobrelations.MechaniccontrollerColumn),
		)
		fromU = sqlgraph.SetNeighbors(jrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryElectriccontroller chains the current query on the "electriccontroller" edge.
func (jrq *JobRelationsQuery) QueryElectriccontroller() *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: jrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobrelations.Table, jobrelations.FieldID, selector),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobrelations.ElectriccontrollerTable, jobrelations.ElectriccontrollerColumn),
		)
		fromU = sqlgraph.SetNeighbors(jrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLayers chains the current query on the "layers" edge.
func (jrq *JobRelationsQuery) QueryLayers() *JobLayerQuery {
	query := (&JobLayerClient{config: jrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobrelations.Table, jobrelations.FieldID, selector),
			sqlgraph.To(joblayer.Table, joblayer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobrelations.LayersTable, jobrelations.LayersColumn),
		)
		fromU = sqlgraph.SetNeighbors(jrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPayments chains the current query on the "payments" edge.
func (jrq *JobRelationsQuery) QueryPayments() *JobPaymentsQuery {
	query := (&JobPaymentsClient{config: jrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobrelations.Table, jobrelations.FieldID, selector),
			sqlgraph.To(jobpayments.Table, jobpayments.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobrelations.PaymentsTable, jobrelations.PaymentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(jrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first JobRelations entity from the query.
// Returns a *NotFoundError when no JobRelations was found.
func (jrq *JobRelationsQuery) First(ctx context.Context) (*JobRelations, error) {
	nodes, err := jrq.Limit(1).All(setContextOp(ctx, jrq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{jobrelations.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jrq *JobRelationsQuery) FirstX(ctx context.Context) *JobRelations {
	node, err := jrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first JobRelations ID from the query.
// Returns a *NotFoundError when no JobRelations ID was found.
func (jrq *JobRelationsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jrq.Limit(1).IDs(setContextOp(ctx, jrq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{jobrelations.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (jrq *JobRelationsQuery) FirstIDX(ctx context.Context) int {
	id, err := jrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single JobRelations entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one JobRelations entity is found.
// Returns a *NotFoundError when no JobRelations entities are found.
func (jrq *JobRelationsQuery) Only(ctx context.Context) (*JobRelations, error) {
	nodes, err := jrq.Limit(2).All(setContextOp(ctx, jrq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{jobrelations.Label}
	default:
		return nil, &NotSingularError{jobrelations.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jrq *JobRelationsQuery) OnlyX(ctx context.Context) *JobRelations {
	node, err := jrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only JobRelations ID in the query.
// Returns a *NotSingularError when more than one JobRelations ID is found.
// Returns a *NotFoundError when no entities are found.
func (jrq *JobRelationsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jrq.Limit(2).IDs(setContextOp(ctx, jrq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{jobrelations.Label}
	default:
		err = &NotSingularError{jobrelations.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (jrq *JobRelationsQuery) OnlyIDX(ctx context.Context) int {
	id, err := jrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of JobRelationsSlice.
func (jrq *JobRelationsQuery) All(ctx context.Context) ([]*JobRelations, error) {
	ctx = setContextOp(ctx, jrq.ctx, ent.OpQueryAll)
	if err := jrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*JobRelations, *JobRelationsQuery]()
	return withInterceptors[[]*JobRelations](ctx, jrq, qr, jrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (jrq *JobRelationsQuery) AllX(ctx context.Context) []*JobRelations {
	nodes, err := jrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of JobRelations IDs.
func (jrq *JobRelationsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if jrq.ctx.Unique == nil && jrq.path != nil {
		jrq.Unique(true)
	}
	ctx = setContextOp(ctx, jrq.ctx, ent.OpQueryIDs)
	if err = jrq.Select(jobrelations.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jrq *JobRelationsQuery) IDsX(ctx context.Context) []int {
	ids, err := jrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jrq *JobRelationsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, jrq.ctx, ent.OpQueryCount)
	if err := jrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, jrq, querierCount[*JobRelationsQuery](), jrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (jrq *JobRelationsQuery) CountX(ctx context.Context) int {
	count, err := jrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jrq *JobRelationsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, jrq.ctx, ent.OpQueryExist)
	switch _, err := jrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (jrq *JobRelationsQuery) ExistX(ctx context.Context) bool {
	exist, err := jrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the JobRelationsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jrq *JobRelationsQuery) Clone() *JobRelationsQuery {
	if jrq == nil {
		return nil
	}
	return &JobRelationsQuery{
		config:                 jrq.config,
		ctx:                    jrq.ctx.Clone(),
		order:                  append([]jobrelations.OrderOption{}, jrq.order...),
		inters:                 append([]Interceptor{}, jrq.inters...),
		predicates:             append([]predicate.JobRelations{}, jrq.predicates...),
		withJob:                jrq.withJob.Clone(),
		withOwner:              jrq.withOwner.Clone(),
		withAuthor:             jrq.withAuthor.Clone(),
		withCompany:            jrq.withCompany.Clone(),
		withProgress:           jrq.withProgress.Clone(),
		withContractor:         jrq.withContractor.Clone(),
		withSupervisor:         jrq.withSupervisor.Clone(),
		withStatic:             jrq.withStatic.Clone(),
		withMechanic:           jrq.withMechanic.Clone(),
		withElectric:           jrq.withElectric.Clone(),
		withInspector:          jrq.withInspector.Clone(),
		withArchitect:          jrq.withArchitect.Clone(),
		withController:         jrq.withController.Clone(),
		withMechaniccontroller: jrq.withMechaniccontroller.Clone(),
		withElectriccontroller: jrq.withElectriccontroller.Clone(),
		withLayers:             jrq.withLayers.Clone(),
		withPayments:           jrq.withPayments.Clone(),
		// clone intermediate query.
		sql:  jrq.sql.Clone(),
		path: jrq.path,
	}
}

// WithJob tells the query-builder to eager-load the nodes that are connected to
// the "job" edge. The optional arguments are used to configure the query builder of the edge.
func (jrq *JobRelationsQuery) WithJob(opts ...func(*JobDetailQuery)) *JobRelationsQuery {
	query := (&JobDetailClient{config: jrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jrq.withJob = query
	return jrq
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (jrq *JobRelationsQuery) WithOwner(opts ...func(*JobOwnerQuery)) *JobRelationsQuery {
	query := (&JobOwnerClient{config: jrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jrq.withOwner = query
	return jrq
}

// WithAuthor tells the query-builder to eager-load the nodes that are connected to
// the "author" edge. The optional arguments are used to configure the query builder of the edge.
func (jrq *JobRelationsQuery) WithAuthor(opts ...func(*JobAuthorQuery)) *JobRelationsQuery {
	query := (&JobAuthorClient{config: jrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jrq.withAuthor = query
	return jrq
}

// WithCompany tells the query-builder to eager-load the nodes that are connected to
// the "company" edge. The optional arguments are used to configure the query builder of the edge.
func (jrq *JobRelationsQuery) WithCompany(opts ...func(*CompanyDetailQuery)) *JobRelationsQuery {
	query := (&CompanyDetailClient{config: jrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jrq.withCompany = query
	return jrq
}

// WithProgress tells the query-builder to eager-load the nodes that are connected to
// the "progress" edge. The optional arguments are used to configure the query builder of the edge.
func (jrq *JobRelationsQuery) WithProgress(opts ...func(*JobProgressQuery)) *JobRelationsQuery {
	query := (&JobProgressClient{config: jrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jrq.withProgress = query
	return jrq
}

// WithContractor tells the query-builder to eager-load the nodes that are connected to
// the "contractor" edge. The optional arguments are used to configure the query builder of the edge.
func (jrq *JobRelationsQuery) WithContractor(opts ...func(*JobContractorQuery)) *JobRelationsQuery {
	query := (&JobContractorClient{config: jrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jrq.withContractor = query
	return jrq
}

// WithSupervisor tells the query-builder to eager-load the nodes that are connected to
// the "supervisor" edge. The optional arguments are used to configure the query builder of the edge.
func (jrq *JobRelationsQuery) WithSupervisor(opts ...func(*JobSupervisorQuery)) *JobRelationsQuery {
	query := (&JobSupervisorClient{config: jrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jrq.withSupervisor = query
	return jrq
}

// WithStatic tells the query-builder to eager-load the nodes that are connected to
// the "static" edge. The optional arguments are used to configure the query builder of the edge.
func (jrq *JobRelationsQuery) WithStatic(opts ...func(*CompanyEngineerQuery)) *JobRelationsQuery {
	query := (&CompanyEngineerClient{config: jrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jrq.withStatic = query
	return jrq
}

// WithMechanic tells the query-builder to eager-load the nodes that are connected to
// the "mechanic" edge. The optional arguments are used to configure the query builder of the edge.
func (jrq *JobRelationsQuery) WithMechanic(opts ...func(*CompanyEngineerQuery)) *JobRelationsQuery {
	query := (&CompanyEngineerClient{config: jrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jrq.withMechanic = query
	return jrq
}

// WithElectric tells the query-builder to eager-load the nodes that are connected to
// the "electric" edge. The optional arguments are used to configure the query builder of the edge.
func (jrq *JobRelationsQuery) WithElectric(opts ...func(*CompanyEngineerQuery)) *JobRelationsQuery {
	query := (&CompanyEngineerClient{config: jrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jrq.withElectric = query
	return jrq
}

// WithInspector tells the query-builder to eager-load the nodes that are connected to
// the "inspector" edge. The optional arguments are used to configure the query builder of the edge.
func (jrq *JobRelationsQuery) WithInspector(opts ...func(*CompanyEngineerQuery)) *JobRelationsQuery {
	query := (&CompanyEngineerClient{config: jrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jrq.withInspector = query
	return jrq
}

// WithArchitect tells the query-builder to eager-load the nodes that are connected to
// the "architect" edge. The optional arguments are used to configure the query builder of the edge.
func (jrq *JobRelationsQuery) WithArchitect(opts ...func(*CompanyEngineerQuery)) *JobRelationsQuery {
	query := (&CompanyEngineerClient{config: jrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jrq.withArchitect = query
	return jrq
}

// WithController tells the query-builder to eager-load the nodes that are connected to
// the "controller" edge. The optional arguments are used to configure the query builder of the edge.
func (jrq *JobRelationsQuery) WithController(opts ...func(*CompanyEngineerQuery)) *JobRelationsQuery {
	query := (&CompanyEngineerClient{config: jrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jrq.withController = query
	return jrq
}

// WithMechaniccontroller tells the query-builder to eager-load the nodes that are connected to
// the "mechaniccontroller" edge. The optional arguments are used to configure the query builder of the edge.
func (jrq *JobRelationsQuery) WithMechaniccontroller(opts ...func(*CompanyEngineerQuery)) *JobRelationsQuery {
	query := (&CompanyEngineerClient{config: jrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jrq.withMechaniccontroller = query
	return jrq
}

// WithElectriccontroller tells the query-builder to eager-load the nodes that are connected to
// the "electriccontroller" edge. The optional arguments are used to configure the query builder of the edge.
func (jrq *JobRelationsQuery) WithElectriccontroller(opts ...func(*CompanyEngineerQuery)) *JobRelationsQuery {
	query := (&CompanyEngineerClient{config: jrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jrq.withElectriccontroller = query
	return jrq
}

// WithLayers tells the query-builder to eager-load the nodes that are connected to
// the "layers" edge. The optional arguments are used to configure the query builder of the edge.
func (jrq *JobRelationsQuery) WithLayers(opts ...func(*JobLayerQuery)) *JobRelationsQuery {
	query := (&JobLayerClient{config: jrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jrq.withLayers = query
	return jrq
}

// WithPayments tells the query-builder to eager-load the nodes that are connected to
// the "payments" edge. The optional arguments are used to configure the query builder of the edge.
func (jrq *JobRelationsQuery) WithPayments(opts ...func(*JobPaymentsQuery)) *JobRelationsQuery {
	query := (&JobPaymentsClient{config: jrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jrq.withPayments = query
	return jrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		YibfNo int `json:"yibfNo,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.JobRelations.Query().
//		GroupBy(jobrelations.FieldYibfNo).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (jrq *JobRelationsQuery) GroupBy(field string, fields ...string) *JobRelationsGroupBy {
	jrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &JobRelationsGroupBy{build: jrq}
	grbuild.flds = &jrq.ctx.Fields
	grbuild.label = jobrelations.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		YibfNo int `json:"yibfNo,omitempty"`
//	}
//
//	client.JobRelations.Query().
//		Select(jobrelations.FieldYibfNo).
//		Scan(ctx, &v)
func (jrq *JobRelationsQuery) Select(fields ...string) *JobRelationsSelect {
	jrq.ctx.Fields = append(jrq.ctx.Fields, fields...)
	sbuild := &JobRelationsSelect{JobRelationsQuery: jrq}
	sbuild.label = jobrelations.Label
	sbuild.flds, sbuild.scan = &jrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a JobRelationsSelect configured with the given aggregations.
func (jrq *JobRelationsQuery) Aggregate(fns ...AggregateFunc) *JobRelationsSelect {
	return jrq.Select().Aggregate(fns...)
}

func (jrq *JobRelationsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range jrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, jrq); err != nil {
				return err
			}
		}
	}
	for _, f := range jrq.ctx.Fields {
		if !jobrelations.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if jrq.path != nil {
		prev, err := jrq.path(ctx)
		if err != nil {
			return err
		}
		jrq.sql = prev
	}
	return nil
}

func (jrq *JobRelationsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*JobRelations, error) {
	var (
		nodes       = []*JobRelations{}
		withFKs     = jrq.withFKs
		_spec       = jrq.querySpec()
		loadedTypes = [17]bool{
			jrq.withJob != nil,
			jrq.withOwner != nil,
			jrq.withAuthor != nil,
			jrq.withCompany != nil,
			jrq.withProgress != nil,
			jrq.withContractor != nil,
			jrq.withSupervisor != nil,
			jrq.withStatic != nil,
			jrq.withMechanic != nil,
			jrq.withElectric != nil,
			jrq.withInspector != nil,
			jrq.withArchitect != nil,
			jrq.withController != nil,
			jrq.withMechaniccontroller != nil,
			jrq.withElectriccontroller != nil,
			jrq.withLayers != nil,
			jrq.withPayments != nil,
		}
	)
	if jrq.withJob != nil || jrq.withOwner != nil || jrq.withAuthor != nil || jrq.withCompany != nil || jrq.withProgress != nil || jrq.withContractor != nil || jrq.withSupervisor != nil || jrq.withStatic != nil || jrq.withMechanic != nil || jrq.withElectric != nil || jrq.withInspector != nil || jrq.withArchitect != nil || jrq.withController != nil || jrq.withMechaniccontroller != nil || jrq.withElectriccontroller != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, jobrelations.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*JobRelations).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &JobRelations{config: jrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(jrq.modifiers) > 0 {
		_spec.Modifiers = jrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, jrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := jrq.withJob; query != nil {
		if err := jrq.loadJob(ctx, query, nodes, nil,
			func(n *JobRelations, e *JobDetail) { n.Edges.Job = e }); err != nil {
			return nil, err
		}
	}
	if query := jrq.withOwner; query != nil {
		if err := jrq.loadOwner(ctx, query, nodes, nil,
			func(n *JobRelations, e *JobOwner) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := jrq.withAuthor; query != nil {
		if err := jrq.loadAuthor(ctx, query, nodes, nil,
			func(n *JobRelations, e *JobAuthor) { n.Edges.Author = e }); err != nil {
			return nil, err
		}
	}
	if query := jrq.withCompany; query != nil {
		if err := jrq.loadCompany(ctx, query, nodes, nil,
			func(n *JobRelations, e *CompanyDetail) { n.Edges.Company = e }); err != nil {
			return nil, err
		}
	}
	if query := jrq.withProgress; query != nil {
		if err := jrq.loadProgress(ctx, query, nodes, nil,
			func(n *JobRelations, e *JobProgress) { n.Edges.Progress = e }); err != nil {
			return nil, err
		}
	}
	if query := jrq.withContractor; query != nil {
		if err := jrq.loadContractor(ctx, query, nodes, nil,
			func(n *JobRelations, e *JobContractor) { n.Edges.Contractor = e }); err != nil {
			return nil, err
		}
	}
	if query := jrq.withSupervisor; query != nil {
		if err := jrq.loadSupervisor(ctx, query, nodes, nil,
			func(n *JobRelations, e *JobSupervisor) { n.Edges.Supervisor = e }); err != nil {
			return nil, err
		}
	}
	if query := jrq.withStatic; query != nil {
		if err := jrq.loadStatic(ctx, query, nodes, nil,
			func(n *JobRelations, e *CompanyEngineer) { n.Edges.Static = e }); err != nil {
			return nil, err
		}
	}
	if query := jrq.withMechanic; query != nil {
		if err := jrq.loadMechanic(ctx, query, nodes, nil,
			func(n *JobRelations, e *CompanyEngineer) { n.Edges.Mechanic = e }); err != nil {
			return nil, err
		}
	}
	if query := jrq.withElectric; query != nil {
		if err := jrq.loadElectric(ctx, query, nodes, nil,
			func(n *JobRelations, e *CompanyEngineer) { n.Edges.Electric = e }); err != nil {
			return nil, err
		}
	}
	if query := jrq.withInspector; query != nil {
		if err := jrq.loadInspector(ctx, query, nodes, nil,
			func(n *JobRelations, e *CompanyEngineer) { n.Edges.Inspector = e }); err != nil {
			return nil, err
		}
	}
	if query := jrq.withArchitect; query != nil {
		if err := jrq.loadArchitect(ctx, query, nodes, nil,
			func(n *JobRelations, e *CompanyEngineer) { n.Edges.Architect = e }); err != nil {
			return nil, err
		}
	}
	if query := jrq.withController; query != nil {
		if err := jrq.loadController(ctx, query, nodes, nil,
			func(n *JobRelations, e *CompanyEngineer) { n.Edges.Controller = e }); err != nil {
			return nil, err
		}
	}
	if query := jrq.withMechaniccontroller; query != nil {
		if err := jrq.loadMechaniccontroller(ctx, query, nodes, nil,
			func(n *JobRelations, e *CompanyEngineer) { n.Edges.Mechaniccontroller = e }); err != nil {
			return nil, err
		}
	}
	if query := jrq.withElectriccontroller; query != nil {
		if err := jrq.loadElectriccontroller(ctx, query, nodes, nil,
			func(n *JobRelations, e *CompanyEngineer) { n.Edges.Electriccontroller = e }); err != nil {
			return nil, err
		}
	}
	if query := jrq.withLayers; query != nil {
		if err := jrq.loadLayers(ctx, query, nodes,
			func(n *JobRelations) { n.Edges.Layers = []*JobLayer{} },
			func(n *JobRelations, e *JobLayer) { n.Edges.Layers = append(n.Edges.Layers, e) }); err != nil {
			return nil, err
		}
	}
	if query := jrq.withPayments; query != nil {
		if err := jrq.loadPayments(ctx, query, nodes,
			func(n *JobRelations) { n.Edges.Payments = []*JobPayments{} },
			func(n *JobRelations, e *JobPayments) { n.Edges.Payments = append(n.Edges.Payments, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range jrq.withNamedLayers {
		if err := jrq.loadLayers(ctx, query, nodes,
			func(n *JobRelations) { n.appendNamedLayers(name) },
			func(n *JobRelations, e *JobLayer) { n.appendNamedLayers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range jrq.withNamedPayments {
		if err := jrq.loadPayments(ctx, query, nodes,
			func(n *JobRelations) { n.appendNamedPayments(name) },
			func(n *JobRelations, e *JobPayments) { n.appendNamedPayments(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range jrq.loadTotal {
		if err := jrq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (jrq *JobRelationsQuery) loadJob(ctx context.Context, query *JobDetailQuery, nodes []*JobRelations, init func(*JobRelations), assign func(*JobRelations, *JobDetail)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobRelations)
	for i := range nodes {
		if nodes[i].job_id == nil {
			continue
		}
		fk := *nodes[i].job_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(jobdetail.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "job_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jrq *JobRelationsQuery) loadOwner(ctx context.Context, query *JobOwnerQuery, nodes []*JobRelations, init func(*JobRelations), assign func(*JobRelations, *JobOwner)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobRelations)
	for i := range nodes {
		if nodes[i].owner_id == nil {
			continue
		}
		fk := *nodes[i].owner_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(jobowner.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jrq *JobRelationsQuery) loadAuthor(ctx context.Context, query *JobAuthorQuery, nodes []*JobRelations, init func(*JobRelations), assign func(*JobRelations, *JobAuthor)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobRelations)
	for i := range nodes {
		if nodes[i].author_id == nil {
			continue
		}
		fk := *nodes[i].author_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(jobauthor.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "author_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jrq *JobRelationsQuery) loadCompany(ctx context.Context, query *CompanyDetailQuery, nodes []*JobRelations, init func(*JobRelations), assign func(*JobRelations, *CompanyDetail)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobRelations)
	for i := range nodes {
		if nodes[i].company_id == nil {
			continue
		}
		fk := *nodes[i].company_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companydetail.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "company_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jrq *JobRelationsQuery) loadProgress(ctx context.Context, query *JobProgressQuery, nodes []*JobRelations, init func(*JobRelations), assign func(*JobRelations, *JobProgress)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobRelations)
	for i := range nodes {
		if nodes[i].progress_id == nil {
			continue
		}
		fk := *nodes[i].progress_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(jobprogress.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "progress_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jrq *JobRelationsQuery) loadContractor(ctx context.Context, query *JobContractorQuery, nodes []*JobRelations, init func(*JobRelations), assign func(*JobRelations, *JobContractor)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobRelations)
	for i := range nodes {
		if nodes[i].contractor_id == nil {
			continue
		}
		fk := *nodes[i].contractor_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(jobcontractor.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "contractor_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jrq *JobRelationsQuery) loadSupervisor(ctx context.Context, query *JobSupervisorQuery, nodes []*JobRelations, init func(*JobRelations), assign func(*JobRelations, *JobSupervisor)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobRelations)
	for i := range nodes {
		if nodes[i].supervisor_id == nil {
			continue
		}
		fk := *nodes[i].supervisor_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(jobsupervisor.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "supervisor_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jrq *JobRelationsQuery) loadStatic(ctx context.Context, query *CompanyEngineerQuery, nodes []*JobRelations, init func(*JobRelations), assign func(*JobRelations, *CompanyEngineer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobRelations)
	for i := range nodes {
		if nodes[i].static_id == nil {
			continue
		}
		fk := *nodes[i].static_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companyengineer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "static_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jrq *JobRelationsQuery) loadMechanic(ctx context.Context, query *CompanyEngineerQuery, nodes []*JobRelations, init func(*JobRelations), assign func(*JobRelations, *CompanyEngineer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobRelations)
	for i := range nodes {
		if nodes[i].mechanic_id == nil {
			continue
		}
		fk := *nodes[i].mechanic_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companyengineer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "mechanic_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jrq *JobRelationsQuery) loadElectric(ctx context.Context, query *CompanyEngineerQuery, nodes []*JobRelations, init func(*JobRelations), assign func(*JobRelations, *CompanyEngineer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobRelations)
	for i := range nodes {
		if nodes[i].electric_id == nil {
			continue
		}
		fk := *nodes[i].electric_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companyengineer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "electric_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jrq *JobRelationsQuery) loadInspector(ctx context.Context, query *CompanyEngineerQuery, nodes []*JobRelations, init func(*JobRelations), assign func(*JobRelations, *CompanyEngineer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobRelations)
	for i := range nodes {
		if nodes[i].inspector_id == nil {
			continue
		}
		fk := *nodes[i].inspector_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companyengineer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "inspector_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jrq *JobRelationsQuery) loadArchitect(ctx context.Context, query *CompanyEngineerQuery, nodes []*JobRelations, init func(*JobRelations), assign func(*JobRelations, *CompanyEngineer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobRelations)
	for i := range nodes {
		if nodes[i].architect_id == nil {
			continue
		}
		fk := *nodes[i].architect_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companyengineer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "architect_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jrq *JobRelationsQuery) loadController(ctx context.Context, query *CompanyEngineerQuery, nodes []*JobRelations, init func(*JobRelations), assign func(*JobRelations, *CompanyEngineer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobRelations)
	for i := range nodes {
		if nodes[i].controller_id == nil {
			continue
		}
		fk := *nodes[i].controller_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companyengineer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "controller_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jrq *JobRelationsQuery) loadMechaniccontroller(ctx context.Context, query *CompanyEngineerQuery, nodes []*JobRelations, init func(*JobRelations), assign func(*JobRelations, *CompanyEngineer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobRelations)
	for i := range nodes {
		if nodes[i].mechaniccontroller_id == nil {
			continue
		}
		fk := *nodes[i].mechaniccontroller_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companyengineer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "mechaniccontroller_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jrq *JobRelationsQuery) loadElectriccontroller(ctx context.Context, query *CompanyEngineerQuery, nodes []*JobRelations, init func(*JobRelations), assign func(*JobRelations, *CompanyEngineer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobRelations)
	for i := range nodes {
		if nodes[i].electriccontroller_id == nil {
			continue
		}
		fk := *nodes[i].electriccontroller_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companyengineer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "electriccontroller_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jrq *JobRelationsQuery) loadLayers(ctx context.Context, query *JobLayerQuery, nodes []*JobRelations, init func(*JobRelations), assign func(*JobRelations, *JobLayer)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*JobRelations)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobLayer(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(jobrelations.LayersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.relations_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "relations_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "relations_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (jrq *JobRelationsQuery) loadPayments(ctx context.Context, query *JobPaymentsQuery, nodes []*JobRelations, init func(*JobRelations), assign func(*JobRelations, *JobPayments)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*JobRelations)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobPayments(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(jobrelations.PaymentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.relations_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "relations_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "relations_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (jrq *JobRelationsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := jrq.querySpec()
	if len(jrq.modifiers) > 0 {
		_spec.Modifiers = jrq.modifiers
	}
	_spec.Node.Columns = jrq.ctx.Fields
	if len(jrq.ctx.Fields) > 0 {
		_spec.Unique = jrq.ctx.Unique != nil && *jrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, jrq.driver, _spec)
}

func (jrq *JobRelationsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(jobrelations.Table, jobrelations.Columns, sqlgraph.NewFieldSpec(jobrelations.FieldID, field.TypeInt))
	_spec.From = jrq.sql
	if unique := jrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if jrq.path != nil {
		_spec.Unique = true
	}
	if fields := jrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobrelations.FieldID)
		for i := range fields {
			if fields[i] != jobrelations.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := jrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := jrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := jrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := jrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (jrq *JobRelationsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(jrq.driver.Dialect())
	t1 := builder.Table(jobrelations.Table)
	columns := jrq.ctx.Fields
	if len(columns) == 0 {
		columns = jobrelations.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if jrq.sql != nil {
		selector = jrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if jrq.ctx.Unique != nil && *jrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range jrq.predicates {
		p(selector)
	}
	for _, p := range jrq.order {
		p(selector)
	}
	if offset := jrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedLayers tells the query-builder to eager-load the nodes that are connected to the "layers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (jrq *JobRelationsQuery) WithNamedLayers(name string, opts ...func(*JobLayerQuery)) *JobRelationsQuery {
	query := (&JobLayerClient{config: jrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if jrq.withNamedLayers == nil {
		jrq.withNamedLayers = make(map[string]*JobLayerQuery)
	}
	jrq.withNamedLayers[name] = query
	return jrq
}

// WithNamedPayments tells the query-builder to eager-load the nodes that are connected to the "payments"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (jrq *JobRelationsQuery) WithNamedPayments(name string, opts ...func(*JobPaymentsQuery)) *JobRelationsQuery {
	query := (&JobPaymentsClient{config: jrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if jrq.withNamedPayments == nil {
		jrq.withNamedPayments = make(map[string]*JobPaymentsQuery)
	}
	jrq.withNamedPayments[name] = query
	return jrq
}

// JobRelationsGroupBy is the group-by builder for JobRelations entities.
type JobRelationsGroupBy struct {
	selector
	build *JobRelationsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jrgb *JobRelationsGroupBy) Aggregate(fns ...AggregateFunc) *JobRelationsGroupBy {
	jrgb.fns = append(jrgb.fns, fns...)
	return jrgb
}

// Scan applies the selector query and scans the result into the given value.
func (jrgb *JobRelationsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jrgb.build.ctx, ent.OpQueryGroupBy)
	if err := jrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobRelationsQuery, *JobRelationsGroupBy](ctx, jrgb.build, jrgb, jrgb.build.inters, v)
}

func (jrgb *JobRelationsGroupBy) sqlScan(ctx context.Context, root *JobRelationsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(jrgb.fns))
	for _, fn := range jrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*jrgb.flds)+len(jrgb.fns))
		for _, f := range *jrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*jrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// JobRelationsSelect is the builder for selecting fields of JobRelations entities.
type JobRelationsSelect struct {
	*JobRelationsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (jrs *JobRelationsSelect) Aggregate(fns ...AggregateFunc) *JobRelationsSelect {
	jrs.fns = append(jrs.fns, fns...)
	return jrs
}

// Scan applies the selector query and scans the result into the given value.
func (jrs *JobRelationsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jrs.ctx, ent.OpQuerySelect)
	if err := jrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobRelationsQuery, *JobRelationsSelect](ctx, jrs.JobRelationsQuery, jrs, jrs.inters, v)
}

func (jrs *JobRelationsSelect) sqlScan(ctx context.Context, root *JobRelationsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(jrs.fns))
	for _, fn := range jrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*jrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
