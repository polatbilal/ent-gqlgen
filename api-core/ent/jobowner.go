// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobowner"
)

// JobOwner is the model entity for the JobOwner schema.
type JobOwner struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Address holds the value of the "Address" field.
	Address string `json:"Address,omitempty"`
	// TcNo holds the value of the "TcNo" field.
	TcNo string `json:"TcNo,omitempty"`
	// TaxAdmin holds the value of the "TaxAdmin" field.
	TaxAdmin string `json:"TaxAdmin,omitempty"`
	// TaxNo holds the value of the "TaxNo" field.
	TaxNo string `json:"TaxNo,omitempty"`
	// Phone holds the value of the "Phone" field.
	Phone string `json:"Phone,omitempty"`
	// Email holds the value of the "Email" field.
	Email string `json:"Email,omitempty"`
	// YDSID holds the value of the "YDSID" field.
	YDSID int `json:"YDSID,omitempty"`
	// Shareholder holds the value of the "Shareholder" field.
	Shareholder bool `json:"Shareholder,omitempty"`
	// Note holds the value of the "Note" field.
	Note string `json:"Note,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobOwnerQuery when eager-loading is set.
	Edges        JobOwnerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// JobOwnerEdges holds the relations/edges for other nodes in the graph.
type JobOwnerEdges struct {
	// Owners holds the value of the owners edge.
	Owners []*JobRelations `json:"owners,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedOwners map[string][]*JobRelations
}

// OwnersOrErr returns the Owners value or an error if the edge
// was not loaded in eager-loading.
func (e JobOwnerEdges) OwnersOrErr() ([]*JobRelations, error) {
	if e.loadedTypes[0] {
		return e.Owners, nil
	}
	return nil, &NotLoadedError{edge: "owners"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobOwner) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobowner.FieldShareholder:
			values[i] = new(sql.NullBool)
		case jobowner.FieldID, jobowner.FieldYDSID:
			values[i] = new(sql.NullInt64)
		case jobowner.FieldName, jobowner.FieldAddress, jobowner.FieldTcNo, jobowner.FieldTaxAdmin, jobowner.FieldTaxNo, jobowner.FieldPhone, jobowner.FieldEmail, jobowner.FieldNote:
			values[i] = new(sql.NullString)
		case jobowner.FieldCreatedAt, jobowner.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobOwner fields.
func (jo *JobOwner) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobowner.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			jo.ID = int(value.Int64)
		case jobowner.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				jo.Name = value.String
			}
		case jobowner.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Address", values[i])
			} else if value.Valid {
				jo.Address = value.String
			}
		case jobowner.FieldTcNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TcNo", values[i])
			} else if value.Valid {
				jo.TcNo = value.String
			}
		case jobowner.FieldTaxAdmin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TaxAdmin", values[i])
			} else if value.Valid {
				jo.TaxAdmin = value.String
			}
		case jobowner.FieldTaxNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TaxNo", values[i])
			} else if value.Valid {
				jo.TaxNo = value.String
			}
		case jobowner.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Phone", values[i])
			} else if value.Valid {
				jo.Phone = value.String
			}
		case jobowner.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Email", values[i])
			} else if value.Valid {
				jo.Email = value.String
			}
		case jobowner.FieldYDSID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field YDSID", values[i])
			} else if value.Valid {
				jo.YDSID = int(value.Int64)
			}
		case jobowner.FieldShareholder:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Shareholder", values[i])
			} else if value.Valid {
				jo.Shareholder = value.Bool
			}
		case jobowner.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Note", values[i])
			} else if value.Valid {
				jo.Note = value.String
			}
		case jobowner.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				jo.CreatedAt = value.Time
			}
		case jobowner.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				jo.UpdatedAt = value.Time
			}
		default:
			jo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobOwner.
// This includes values selected through modifiers, order, etc.
func (jo *JobOwner) Value(name string) (ent.Value, error) {
	return jo.selectValues.Get(name)
}

// QueryOwners queries the "owners" edge of the JobOwner entity.
func (jo *JobOwner) QueryOwners() *JobRelationsQuery {
	return NewJobOwnerClient(jo.config).QueryOwners(jo)
}

// Update returns a builder for updating this JobOwner.
// Note that you need to call JobOwner.Unwrap() before calling this method if this JobOwner
// was returned from a transaction, and the transaction was committed or rolled back.
func (jo *JobOwner) Update() *JobOwnerUpdateOne {
	return NewJobOwnerClient(jo.config).UpdateOne(jo)
}

// Unwrap unwraps the JobOwner entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jo *JobOwner) Unwrap() *JobOwner {
	_tx, ok := jo.config.driver.(*txDriver)
	if !ok {
		panic("ent: JobOwner is not a transactional entity")
	}
	jo.config.driver = _tx.drv
	return jo
}

// String implements the fmt.Stringer.
func (jo *JobOwner) String() string {
	var builder strings.Builder
	builder.WriteString("JobOwner(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jo.ID))
	builder.WriteString("Name=")
	builder.WriteString(jo.Name)
	builder.WriteString(", ")
	builder.WriteString("Address=")
	builder.WriteString(jo.Address)
	builder.WriteString(", ")
	builder.WriteString("TcNo=")
	builder.WriteString(jo.TcNo)
	builder.WriteString(", ")
	builder.WriteString("TaxAdmin=")
	builder.WriteString(jo.TaxAdmin)
	builder.WriteString(", ")
	builder.WriteString("TaxNo=")
	builder.WriteString(jo.TaxNo)
	builder.WriteString(", ")
	builder.WriteString("Phone=")
	builder.WriteString(jo.Phone)
	builder.WriteString(", ")
	builder.WriteString("Email=")
	builder.WriteString(jo.Email)
	builder.WriteString(", ")
	builder.WriteString("YDSID=")
	builder.WriteString(fmt.Sprintf("%v", jo.YDSID))
	builder.WriteString(", ")
	builder.WriteString("Shareholder=")
	builder.WriteString(fmt.Sprintf("%v", jo.Shareholder))
	builder.WriteString(", ")
	builder.WriteString("Note=")
	builder.WriteString(jo.Note)
	builder.WriteString(", ")
	builder.WriteString("CreatedAt=")
	builder.WriteString(jo.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(jo.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedOwners returns the Owners named value or an error if the edge was not
// loaded in eager-loading with this name.
func (jo *JobOwner) NamedOwners(name string) ([]*JobRelations, error) {
	if jo.Edges.namedOwners == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := jo.Edges.namedOwners[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (jo *JobOwner) appendNamedOwners(name string, edges ...*JobRelations) {
	if jo.Edges.namedOwners == nil {
		jo.Edges.namedOwners = make(map[string][]*JobRelations)
	}
	if len(edges) == 0 {
		jo.Edges.namedOwners[name] = []*JobRelations{}
	} else {
		jo.Edges.namedOwners[name] = append(jo.Edges.namedOwners[name], edges...)
	}
}

// JobOwners is a parsable slice of JobOwner.
type JobOwners []*JobOwner
