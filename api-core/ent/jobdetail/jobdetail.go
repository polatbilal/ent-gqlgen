// Code generated by ent, DO NOT EDIT.

package jobdetail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the jobdetail type in the database.
	Label = "job_detail"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldYibfNo holds the string denoting the yibfno field in the database.
	FieldYibfNo = "yibf_no"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldAdministration holds the string denoting the administration field in the database.
	FieldAdministration = "administration"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldIsland holds the string denoting the island field in the database.
	FieldIsland = "island"
	// FieldParcel holds the string denoting the parcel field in the database.
	FieldParcel = "parcel"
	// FieldSheet holds the string denoting the sheet field in the database.
	FieldSheet = "sheet"
	// FieldContractDate holds the string denoting the contractdate field in the database.
	FieldContractDate = "contract_date"
	// FieldStartDate holds the string denoting the startdate field in the database.
	FieldStartDate = "start_date"
	// FieldLicenseDate holds the string denoting the licensedate field in the database.
	FieldLicenseDate = "license_date"
	// FieldLicenseNo holds the string denoting the licenseno field in the database.
	FieldLicenseNo = "license_no"
	// FieldDistributionDate holds the string denoting the distributiondate field in the database.
	FieldDistributionDate = "distribution_date"
	// FieldCompletionDate holds the string denoting the completiondate field in the database.
	FieldCompletionDate = "completion_date"
	// FieldLandArea holds the string denoting the landarea field in the database.
	FieldLandArea = "land_area"
	// FieldTotalArea holds the string denoting the totalarea field in the database.
	FieldTotalArea = "total_area"
	// FieldConstructionArea holds the string denoting the constructionarea field in the database.
	FieldConstructionArea = "construction_area"
	// FieldLeftArea holds the string denoting the leftarea field in the database.
	FieldLeftArea = "left_area"
	// FieldYDSAddress holds the string denoting the ydsaddress field in the database.
	FieldYDSAddress = "yds_address"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldBuildingClass holds the string denoting the buildingclass field in the database.
	FieldBuildingClass = "building_class"
	// FieldBuildingType holds the string denoting the buildingtype field in the database.
	FieldBuildingType = "building_type"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldUnitPrice holds the string denoting the unitprice field in the database.
	FieldUnitPrice = "unit_price"
	// FieldFloorCount holds the string denoting the floorcount field in the database.
	FieldFloorCount = "floor_count"
	// FieldBKSReferenceNo holds the string denoting the bksreferenceno field in the database.
	FieldBKSReferenceNo = "bks_reference_no"
	// FieldCoordinates holds the string denoting the coordinates field in the database.
	FieldCoordinates = "coordinates"
	// FieldFolderNo holds the string denoting the folderno field in the database.
	FieldFolderNo = "folder_no"
	// FieldUploadedFile holds the string denoting the uploadedfile field in the database.
	FieldUploadedFile = "uploaded_file"
	// FieldIndustryArea holds the string denoting the industryarea field in the database.
	FieldIndustryArea = "industry_area"
	// FieldClusterStructure holds the string denoting the clusterstructure field in the database.
	FieldClusterStructure = "cluster_structure"
	// FieldIsLicenseExpired holds the string denoting the islicenseexpired field in the database.
	FieldIsLicenseExpired = "is_license_expired"
	// FieldIsCompleted holds the string denoting the iscompleted field in the database.
	FieldIsCompleted = "is_completed"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeRelations holds the string denoting the relations edge name in mutations.
	EdgeRelations = "relations"
	// Table holds the table name of the jobdetail in the database.
	Table = "job_details"
	// RelationsTable is the table that holds the relations relation/edge.
	RelationsTable = "job_relations"
	// RelationsInverseTable is the table name for the JobRelations entity.
	// It exists in this package in order to avoid circular dependency with the "jobrelations" package.
	RelationsInverseTable = "job_relations"
	// RelationsColumn is the table column denoting the relations relation/edge.
	RelationsColumn = "job_id"
)

// Columns holds all SQL columns for jobdetail fields.
var Columns = []string{
	FieldID,
	FieldYibfNo,
	FieldTitle,
	FieldAdministration,
	FieldState,
	FieldIsland,
	FieldParcel,
	FieldSheet,
	FieldContractDate,
	FieldStartDate,
	FieldLicenseDate,
	FieldLicenseNo,
	FieldDistributionDate,
	FieldCompletionDate,
	FieldLandArea,
	FieldTotalArea,
	FieldConstructionArea,
	FieldLeftArea,
	FieldYDSAddress,
	FieldAddress,
	FieldBuildingClass,
	FieldBuildingType,
	FieldLevel,
	FieldUnitPrice,
	FieldFloorCount,
	FieldBKSReferenceNo,
	FieldCoordinates,
	FieldFolderNo,
	FieldUploadedFile,
	FieldIndustryArea,
	FieldClusterStructure,
	FieldIsLicenseExpired,
	FieldIsCompleted,
	FieldNote,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUploadedFile holds the default value on creation for the "UploadedFile" field.
	DefaultUploadedFile bool
	// DefaultIndustryArea holds the default value on creation for the "IndustryArea" field.
	DefaultIndustryArea bool
	// DefaultClusterStructure holds the default value on creation for the "ClusterStructure" field.
	DefaultClusterStructure bool
	// DefaultIsLicenseExpired holds the default value on creation for the "IsLicenseExpired" field.
	DefaultIsLicenseExpired bool
	// DefaultIsCompleted holds the default value on creation for the "IsCompleted" field.
	DefaultIsCompleted bool
	// DefaultCreatedAt holds the default value on creation for the "CreatedAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "UpdatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "UpdatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the JobDetail queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByYibfNo orders the results by the YibfNo field.
func ByYibfNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYibfNo, opts...).ToFunc()
}

// ByTitle orders the results by the Title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByAdministration orders the results by the Administration field.
func ByAdministration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdministration, opts...).ToFunc()
}

// ByState orders the results by the State field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByIsland orders the results by the Island field.
func ByIsland(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsland, opts...).ToFunc()
}

// ByParcel orders the results by the Parcel field.
func ByParcel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParcel, opts...).ToFunc()
}

// BySheet orders the results by the Sheet field.
func BySheet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSheet, opts...).ToFunc()
}

// ByContractDate orders the results by the ContractDate field.
func ByContractDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractDate, opts...).ToFunc()
}

// ByStartDate orders the results by the StartDate field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByLicenseDate orders the results by the LicenseDate field.
func ByLicenseDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicenseDate, opts...).ToFunc()
}

// ByLicenseNo orders the results by the LicenseNo field.
func ByLicenseNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicenseNo, opts...).ToFunc()
}

// ByDistributionDate orders the results by the DistributionDate field.
func ByDistributionDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDistributionDate, opts...).ToFunc()
}

// ByCompletionDate orders the results by the CompletionDate field.
func ByCompletionDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletionDate, opts...).ToFunc()
}

// ByLandArea orders the results by the LandArea field.
func ByLandArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLandArea, opts...).ToFunc()
}

// ByTotalArea orders the results by the TotalArea field.
func ByTotalArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalArea, opts...).ToFunc()
}

// ByConstructionArea orders the results by the ConstructionArea field.
func ByConstructionArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConstructionArea, opts...).ToFunc()
}

// ByLeftArea orders the results by the LeftArea field.
func ByLeftArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLeftArea, opts...).ToFunc()
}

// ByYDSAddress orders the results by the YDSAddress field.
func ByYDSAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYDSAddress, opts...).ToFunc()
}

// ByAddress orders the results by the Address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByBuildingClass orders the results by the BuildingClass field.
func ByBuildingClass(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuildingClass, opts...).ToFunc()
}

// ByBuildingType orders the results by the BuildingType field.
func ByBuildingType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuildingType, opts...).ToFunc()
}

// ByLevel orders the results by the Level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByUnitPrice orders the results by the UnitPrice field.
func ByUnitPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitPrice, opts...).ToFunc()
}

// ByFloorCount orders the results by the FloorCount field.
func ByFloorCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFloorCount, opts...).ToFunc()
}

// ByBKSReferenceNo orders the results by the BKSReferenceNo field.
func ByBKSReferenceNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBKSReferenceNo, opts...).ToFunc()
}

// ByCoordinates orders the results by the Coordinates field.
func ByCoordinates(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoordinates, opts...).ToFunc()
}

// ByFolderNo orders the results by the FolderNo field.
func ByFolderNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFolderNo, opts...).ToFunc()
}

// ByUploadedFile orders the results by the UploadedFile field.
func ByUploadedFile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploadedFile, opts...).ToFunc()
}

// ByIndustryArea orders the results by the IndustryArea field.
func ByIndustryArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndustryArea, opts...).ToFunc()
}

// ByClusterStructure orders the results by the ClusterStructure field.
func ByClusterStructure(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClusterStructure, opts...).ToFunc()
}

// ByIsLicenseExpired orders the results by the IsLicenseExpired field.
func ByIsLicenseExpired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsLicenseExpired, opts...).ToFunc()
}

// ByIsCompleted orders the results by the IsCompleted field.
func ByIsCompleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCompleted, opts...).ToFunc()
}

// ByNote orders the results by the Note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRelationsField orders the results by relations field.
func ByRelationsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRelationsStep(), sql.OrderByField(field, opts...))
	}
}
func newRelationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RelationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, RelationsTable, RelationsColumn),
	)
}
