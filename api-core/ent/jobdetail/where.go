// Code generated by ent, DO NOT EDIT.

package jobdetail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldID, id))
}

// YibfNo applies equality check predicate on the "YibfNo" field. It's identical to YibfNoEQ.
func YibfNo(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldYibfNo, v))
}

// Title applies equality check predicate on the "Title" field. It's identical to TitleEQ.
func Title(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldTitle, v))
}

// Administration applies equality check predicate on the "Administration" field. It's identical to AdministrationEQ.
func Administration(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldAdministration, v))
}

// State applies equality check predicate on the "State" field. It's identical to StateEQ.
func State(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldState, v))
}

// Island applies equality check predicate on the "Island" field. It's identical to IslandEQ.
func Island(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldIsland, v))
}

// Parcel applies equality check predicate on the "Parcel" field. It's identical to ParcelEQ.
func Parcel(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldParcel, v))
}

// Sheet applies equality check predicate on the "Sheet" field. It's identical to SheetEQ.
func Sheet(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldSheet, v))
}

// ContractDate applies equality check predicate on the "ContractDate" field. It's identical to ContractDateEQ.
func ContractDate(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldContractDate, v))
}

// StartDate applies equality check predicate on the "StartDate" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldStartDate, v))
}

// LicenseDate applies equality check predicate on the "LicenseDate" field. It's identical to LicenseDateEQ.
func LicenseDate(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldLicenseDate, v))
}

// LicenseNo applies equality check predicate on the "LicenseNo" field. It's identical to LicenseNoEQ.
func LicenseNo(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldLicenseNo, v))
}

// DistributionDate applies equality check predicate on the "DistributionDate" field. It's identical to DistributionDateEQ.
func DistributionDate(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldDistributionDate, v))
}

// CompletionDate applies equality check predicate on the "CompletionDate" field. It's identical to CompletionDateEQ.
func CompletionDate(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldCompletionDate, v))
}

// LandArea applies equality check predicate on the "LandArea" field. It's identical to LandAreaEQ.
func LandArea(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldLandArea, v))
}

// TotalArea applies equality check predicate on the "TotalArea" field. It's identical to TotalAreaEQ.
func TotalArea(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldTotalArea, v))
}

// ConstructionArea applies equality check predicate on the "ConstructionArea" field. It's identical to ConstructionAreaEQ.
func ConstructionArea(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldConstructionArea, v))
}

// LeftArea applies equality check predicate on the "LeftArea" field. It's identical to LeftAreaEQ.
func LeftArea(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldLeftArea, v))
}

// YDSAddress applies equality check predicate on the "YDSAddress" field. It's identical to YDSAddressEQ.
func YDSAddress(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldYDSAddress, v))
}

// Address applies equality check predicate on the "Address" field. It's identical to AddressEQ.
func Address(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldAddress, v))
}

// BuildingClass applies equality check predicate on the "BuildingClass" field. It's identical to BuildingClassEQ.
func BuildingClass(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldBuildingClass, v))
}

// BuildingType applies equality check predicate on the "BuildingType" field. It's identical to BuildingTypeEQ.
func BuildingType(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldBuildingType, v))
}

// Level applies equality check predicate on the "Level" field. It's identical to LevelEQ.
func Level(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldLevel, v))
}

// UnitPrice applies equality check predicate on the "UnitPrice" field. It's identical to UnitPriceEQ.
func UnitPrice(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldUnitPrice, v))
}

// FloorCount applies equality check predicate on the "FloorCount" field. It's identical to FloorCountEQ.
func FloorCount(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldFloorCount, v))
}

// BKSReferenceNo applies equality check predicate on the "BKSReferenceNo" field. It's identical to BKSReferenceNoEQ.
func BKSReferenceNo(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldBKSReferenceNo, v))
}

// Coordinates applies equality check predicate on the "Coordinates" field. It's identical to CoordinatesEQ.
func Coordinates(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldCoordinates, v))
}

// FolderNo applies equality check predicate on the "FolderNo" field. It's identical to FolderNoEQ.
func FolderNo(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldFolderNo, v))
}

// UploadedFile applies equality check predicate on the "UploadedFile" field. It's identical to UploadedFileEQ.
func UploadedFile(v bool) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldUploadedFile, v))
}

// IndustryArea applies equality check predicate on the "IndustryArea" field. It's identical to IndustryAreaEQ.
func IndustryArea(v bool) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldIndustryArea, v))
}

// ClusterStructure applies equality check predicate on the "ClusterStructure" field. It's identical to ClusterStructureEQ.
func ClusterStructure(v bool) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldClusterStructure, v))
}

// IsLicenseExpired applies equality check predicate on the "IsLicenseExpired" field. It's identical to IsLicenseExpiredEQ.
func IsLicenseExpired(v bool) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldIsLicenseExpired, v))
}

// IsCompleted applies equality check predicate on the "IsCompleted" field. It's identical to IsCompletedEQ.
func IsCompleted(v bool) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldIsCompleted, v))
}

// Note applies equality check predicate on the "Note" field. It's identical to NoteEQ.
func Note(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldNote, v))
}

// CreatedAt applies equality check predicate on the "CreatedAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// YibfNoEQ applies the EQ predicate on the "YibfNo" field.
func YibfNoEQ(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldYibfNo, v))
}

// YibfNoNEQ applies the NEQ predicate on the "YibfNo" field.
func YibfNoNEQ(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldYibfNo, v))
}

// YibfNoIn applies the In predicate on the "YibfNo" field.
func YibfNoIn(vs ...int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldYibfNo, vs...))
}

// YibfNoNotIn applies the NotIn predicate on the "YibfNo" field.
func YibfNoNotIn(vs ...int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldYibfNo, vs...))
}

// YibfNoGT applies the GT predicate on the "YibfNo" field.
func YibfNoGT(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldYibfNo, v))
}

// YibfNoGTE applies the GTE predicate on the "YibfNo" field.
func YibfNoGTE(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldYibfNo, v))
}

// YibfNoLT applies the LT predicate on the "YibfNo" field.
func YibfNoLT(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldYibfNo, v))
}

// YibfNoLTE applies the LTE predicate on the "YibfNo" field.
func YibfNoLTE(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldYibfNo, v))
}

// TitleEQ applies the EQ predicate on the "Title" field.
func TitleEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "Title" field.
func TitleNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "Title" field.
func TitleIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "Title" field.
func TitleNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "Title" field.
func TitleGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "Title" field.
func TitleGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "Title" field.
func TitleLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "Title" field.
func TitleLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "Title" field.
func TitleContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "Title" field.
func TitleHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "Title" field.
func TitleHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleIsNil applies the IsNil predicate on the "Title" field.
func TitleIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "Title" field.
func TitleNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldTitle))
}

// TitleEqualFold applies the EqualFold predicate on the "Title" field.
func TitleEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "Title" field.
func TitleContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldTitle, v))
}

// AdministrationEQ applies the EQ predicate on the "Administration" field.
func AdministrationEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldAdministration, v))
}

// AdministrationNEQ applies the NEQ predicate on the "Administration" field.
func AdministrationNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldAdministration, v))
}

// AdministrationIn applies the In predicate on the "Administration" field.
func AdministrationIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldAdministration, vs...))
}

// AdministrationNotIn applies the NotIn predicate on the "Administration" field.
func AdministrationNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldAdministration, vs...))
}

// AdministrationGT applies the GT predicate on the "Administration" field.
func AdministrationGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldAdministration, v))
}

// AdministrationGTE applies the GTE predicate on the "Administration" field.
func AdministrationGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldAdministration, v))
}

// AdministrationLT applies the LT predicate on the "Administration" field.
func AdministrationLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldAdministration, v))
}

// AdministrationLTE applies the LTE predicate on the "Administration" field.
func AdministrationLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldAdministration, v))
}

// AdministrationContains applies the Contains predicate on the "Administration" field.
func AdministrationContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldAdministration, v))
}

// AdministrationHasPrefix applies the HasPrefix predicate on the "Administration" field.
func AdministrationHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldAdministration, v))
}

// AdministrationHasSuffix applies the HasSuffix predicate on the "Administration" field.
func AdministrationHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldAdministration, v))
}

// AdministrationIsNil applies the IsNil predicate on the "Administration" field.
func AdministrationIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldAdministration))
}

// AdministrationNotNil applies the NotNil predicate on the "Administration" field.
func AdministrationNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldAdministration))
}

// AdministrationEqualFold applies the EqualFold predicate on the "Administration" field.
func AdministrationEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldAdministration, v))
}

// AdministrationContainsFold applies the ContainsFold predicate on the "Administration" field.
func AdministrationContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldAdministration, v))
}

// StateEQ applies the EQ predicate on the "State" field.
func StateEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "State" field.
func StateNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "State" field.
func StateIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "State" field.
func StateNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "State" field.
func StateGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "State" field.
func StateGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "State" field.
func StateLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "State" field.
func StateLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "State" field.
func StateContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "State" field.
func StateHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "State" field.
func StateHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldState, v))
}

// StateIsNil applies the IsNil predicate on the "State" field.
func StateIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldState))
}

// StateNotNil applies the NotNil predicate on the "State" field.
func StateNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldState))
}

// StateEqualFold applies the EqualFold predicate on the "State" field.
func StateEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "State" field.
func StateContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldState, v))
}

// IslandEQ applies the EQ predicate on the "Island" field.
func IslandEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldIsland, v))
}

// IslandNEQ applies the NEQ predicate on the "Island" field.
func IslandNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldIsland, v))
}

// IslandIn applies the In predicate on the "Island" field.
func IslandIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldIsland, vs...))
}

// IslandNotIn applies the NotIn predicate on the "Island" field.
func IslandNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldIsland, vs...))
}

// IslandGT applies the GT predicate on the "Island" field.
func IslandGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldIsland, v))
}

// IslandGTE applies the GTE predicate on the "Island" field.
func IslandGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldIsland, v))
}

// IslandLT applies the LT predicate on the "Island" field.
func IslandLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldIsland, v))
}

// IslandLTE applies the LTE predicate on the "Island" field.
func IslandLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldIsland, v))
}

// IslandContains applies the Contains predicate on the "Island" field.
func IslandContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldIsland, v))
}

// IslandHasPrefix applies the HasPrefix predicate on the "Island" field.
func IslandHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldIsland, v))
}

// IslandHasSuffix applies the HasSuffix predicate on the "Island" field.
func IslandHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldIsland, v))
}

// IslandIsNil applies the IsNil predicate on the "Island" field.
func IslandIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldIsland))
}

// IslandNotNil applies the NotNil predicate on the "Island" field.
func IslandNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldIsland))
}

// IslandEqualFold applies the EqualFold predicate on the "Island" field.
func IslandEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldIsland, v))
}

// IslandContainsFold applies the ContainsFold predicate on the "Island" field.
func IslandContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldIsland, v))
}

// ParcelEQ applies the EQ predicate on the "Parcel" field.
func ParcelEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldParcel, v))
}

// ParcelNEQ applies the NEQ predicate on the "Parcel" field.
func ParcelNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldParcel, v))
}

// ParcelIn applies the In predicate on the "Parcel" field.
func ParcelIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldParcel, vs...))
}

// ParcelNotIn applies the NotIn predicate on the "Parcel" field.
func ParcelNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldParcel, vs...))
}

// ParcelGT applies the GT predicate on the "Parcel" field.
func ParcelGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldParcel, v))
}

// ParcelGTE applies the GTE predicate on the "Parcel" field.
func ParcelGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldParcel, v))
}

// ParcelLT applies the LT predicate on the "Parcel" field.
func ParcelLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldParcel, v))
}

// ParcelLTE applies the LTE predicate on the "Parcel" field.
func ParcelLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldParcel, v))
}

// ParcelContains applies the Contains predicate on the "Parcel" field.
func ParcelContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldParcel, v))
}

// ParcelHasPrefix applies the HasPrefix predicate on the "Parcel" field.
func ParcelHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldParcel, v))
}

// ParcelHasSuffix applies the HasSuffix predicate on the "Parcel" field.
func ParcelHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldParcel, v))
}

// ParcelIsNil applies the IsNil predicate on the "Parcel" field.
func ParcelIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldParcel))
}

// ParcelNotNil applies the NotNil predicate on the "Parcel" field.
func ParcelNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldParcel))
}

// ParcelEqualFold applies the EqualFold predicate on the "Parcel" field.
func ParcelEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldParcel, v))
}

// ParcelContainsFold applies the ContainsFold predicate on the "Parcel" field.
func ParcelContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldParcel, v))
}

// SheetEQ applies the EQ predicate on the "Sheet" field.
func SheetEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldSheet, v))
}

// SheetNEQ applies the NEQ predicate on the "Sheet" field.
func SheetNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldSheet, v))
}

// SheetIn applies the In predicate on the "Sheet" field.
func SheetIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldSheet, vs...))
}

// SheetNotIn applies the NotIn predicate on the "Sheet" field.
func SheetNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldSheet, vs...))
}

// SheetGT applies the GT predicate on the "Sheet" field.
func SheetGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldSheet, v))
}

// SheetGTE applies the GTE predicate on the "Sheet" field.
func SheetGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldSheet, v))
}

// SheetLT applies the LT predicate on the "Sheet" field.
func SheetLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldSheet, v))
}

// SheetLTE applies the LTE predicate on the "Sheet" field.
func SheetLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldSheet, v))
}

// SheetContains applies the Contains predicate on the "Sheet" field.
func SheetContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldSheet, v))
}

// SheetHasPrefix applies the HasPrefix predicate on the "Sheet" field.
func SheetHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldSheet, v))
}

// SheetHasSuffix applies the HasSuffix predicate on the "Sheet" field.
func SheetHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldSheet, v))
}

// SheetIsNil applies the IsNil predicate on the "Sheet" field.
func SheetIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldSheet))
}

// SheetNotNil applies the NotNil predicate on the "Sheet" field.
func SheetNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldSheet))
}

// SheetEqualFold applies the EqualFold predicate on the "Sheet" field.
func SheetEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldSheet, v))
}

// SheetContainsFold applies the ContainsFold predicate on the "Sheet" field.
func SheetContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldSheet, v))
}

// ContractDateEQ applies the EQ predicate on the "ContractDate" field.
func ContractDateEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldContractDate, v))
}

// ContractDateNEQ applies the NEQ predicate on the "ContractDate" field.
func ContractDateNEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldContractDate, v))
}

// ContractDateIn applies the In predicate on the "ContractDate" field.
func ContractDateIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldContractDate, vs...))
}

// ContractDateNotIn applies the NotIn predicate on the "ContractDate" field.
func ContractDateNotIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldContractDate, vs...))
}

// ContractDateGT applies the GT predicate on the "ContractDate" field.
func ContractDateGT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldContractDate, v))
}

// ContractDateGTE applies the GTE predicate on the "ContractDate" field.
func ContractDateGTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldContractDate, v))
}

// ContractDateLT applies the LT predicate on the "ContractDate" field.
func ContractDateLT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldContractDate, v))
}

// ContractDateLTE applies the LTE predicate on the "ContractDate" field.
func ContractDateLTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldContractDate, v))
}

// ContractDateIsNil applies the IsNil predicate on the "ContractDate" field.
func ContractDateIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldContractDate))
}

// ContractDateNotNil applies the NotNil predicate on the "ContractDate" field.
func ContractDateNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldContractDate))
}

// StartDateEQ applies the EQ predicate on the "StartDate" field.
func StartDateEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "StartDate" field.
func StartDateNEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "StartDate" field.
func StartDateIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "StartDate" field.
func StartDateNotIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "StartDate" field.
func StartDateGT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "StartDate" field.
func StartDateGTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "StartDate" field.
func StartDateLT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "StartDate" field.
func StartDateLTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldStartDate, v))
}

// StartDateIsNil applies the IsNil predicate on the "StartDate" field.
func StartDateIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldStartDate))
}

// StartDateNotNil applies the NotNil predicate on the "StartDate" field.
func StartDateNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldStartDate))
}

// LicenseDateEQ applies the EQ predicate on the "LicenseDate" field.
func LicenseDateEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldLicenseDate, v))
}

// LicenseDateNEQ applies the NEQ predicate on the "LicenseDate" field.
func LicenseDateNEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldLicenseDate, v))
}

// LicenseDateIn applies the In predicate on the "LicenseDate" field.
func LicenseDateIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldLicenseDate, vs...))
}

// LicenseDateNotIn applies the NotIn predicate on the "LicenseDate" field.
func LicenseDateNotIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldLicenseDate, vs...))
}

// LicenseDateGT applies the GT predicate on the "LicenseDate" field.
func LicenseDateGT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldLicenseDate, v))
}

// LicenseDateGTE applies the GTE predicate on the "LicenseDate" field.
func LicenseDateGTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldLicenseDate, v))
}

// LicenseDateLT applies the LT predicate on the "LicenseDate" field.
func LicenseDateLT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldLicenseDate, v))
}

// LicenseDateLTE applies the LTE predicate on the "LicenseDate" field.
func LicenseDateLTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldLicenseDate, v))
}

// LicenseDateIsNil applies the IsNil predicate on the "LicenseDate" field.
func LicenseDateIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldLicenseDate))
}

// LicenseDateNotNil applies the NotNil predicate on the "LicenseDate" field.
func LicenseDateNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldLicenseDate))
}

// LicenseNoEQ applies the EQ predicate on the "LicenseNo" field.
func LicenseNoEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldLicenseNo, v))
}

// LicenseNoNEQ applies the NEQ predicate on the "LicenseNo" field.
func LicenseNoNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldLicenseNo, v))
}

// LicenseNoIn applies the In predicate on the "LicenseNo" field.
func LicenseNoIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldLicenseNo, vs...))
}

// LicenseNoNotIn applies the NotIn predicate on the "LicenseNo" field.
func LicenseNoNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldLicenseNo, vs...))
}

// LicenseNoGT applies the GT predicate on the "LicenseNo" field.
func LicenseNoGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldLicenseNo, v))
}

// LicenseNoGTE applies the GTE predicate on the "LicenseNo" field.
func LicenseNoGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldLicenseNo, v))
}

// LicenseNoLT applies the LT predicate on the "LicenseNo" field.
func LicenseNoLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldLicenseNo, v))
}

// LicenseNoLTE applies the LTE predicate on the "LicenseNo" field.
func LicenseNoLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldLicenseNo, v))
}

// LicenseNoContains applies the Contains predicate on the "LicenseNo" field.
func LicenseNoContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldLicenseNo, v))
}

// LicenseNoHasPrefix applies the HasPrefix predicate on the "LicenseNo" field.
func LicenseNoHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldLicenseNo, v))
}

// LicenseNoHasSuffix applies the HasSuffix predicate on the "LicenseNo" field.
func LicenseNoHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldLicenseNo, v))
}

// LicenseNoIsNil applies the IsNil predicate on the "LicenseNo" field.
func LicenseNoIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldLicenseNo))
}

// LicenseNoNotNil applies the NotNil predicate on the "LicenseNo" field.
func LicenseNoNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldLicenseNo))
}

// LicenseNoEqualFold applies the EqualFold predicate on the "LicenseNo" field.
func LicenseNoEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldLicenseNo, v))
}

// LicenseNoContainsFold applies the ContainsFold predicate on the "LicenseNo" field.
func LicenseNoContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldLicenseNo, v))
}

// DistributionDateEQ applies the EQ predicate on the "DistributionDate" field.
func DistributionDateEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldDistributionDate, v))
}

// DistributionDateNEQ applies the NEQ predicate on the "DistributionDate" field.
func DistributionDateNEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldDistributionDate, v))
}

// DistributionDateIn applies the In predicate on the "DistributionDate" field.
func DistributionDateIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldDistributionDate, vs...))
}

// DistributionDateNotIn applies the NotIn predicate on the "DistributionDate" field.
func DistributionDateNotIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldDistributionDate, vs...))
}

// DistributionDateGT applies the GT predicate on the "DistributionDate" field.
func DistributionDateGT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldDistributionDate, v))
}

// DistributionDateGTE applies the GTE predicate on the "DistributionDate" field.
func DistributionDateGTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldDistributionDate, v))
}

// DistributionDateLT applies the LT predicate on the "DistributionDate" field.
func DistributionDateLT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldDistributionDate, v))
}

// DistributionDateLTE applies the LTE predicate on the "DistributionDate" field.
func DistributionDateLTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldDistributionDate, v))
}

// DistributionDateIsNil applies the IsNil predicate on the "DistributionDate" field.
func DistributionDateIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldDistributionDate))
}

// DistributionDateNotNil applies the NotNil predicate on the "DistributionDate" field.
func DistributionDateNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldDistributionDate))
}

// CompletionDateEQ applies the EQ predicate on the "CompletionDate" field.
func CompletionDateEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldCompletionDate, v))
}

// CompletionDateNEQ applies the NEQ predicate on the "CompletionDate" field.
func CompletionDateNEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldCompletionDate, v))
}

// CompletionDateIn applies the In predicate on the "CompletionDate" field.
func CompletionDateIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldCompletionDate, vs...))
}

// CompletionDateNotIn applies the NotIn predicate on the "CompletionDate" field.
func CompletionDateNotIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldCompletionDate, vs...))
}

// CompletionDateGT applies the GT predicate on the "CompletionDate" field.
func CompletionDateGT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldCompletionDate, v))
}

// CompletionDateGTE applies the GTE predicate on the "CompletionDate" field.
func CompletionDateGTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldCompletionDate, v))
}

// CompletionDateLT applies the LT predicate on the "CompletionDate" field.
func CompletionDateLT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldCompletionDate, v))
}

// CompletionDateLTE applies the LTE predicate on the "CompletionDate" field.
func CompletionDateLTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldCompletionDate, v))
}

// CompletionDateIsNil applies the IsNil predicate on the "CompletionDate" field.
func CompletionDateIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldCompletionDate))
}

// CompletionDateNotNil applies the NotNil predicate on the "CompletionDate" field.
func CompletionDateNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldCompletionDate))
}

// LandAreaEQ applies the EQ predicate on the "LandArea" field.
func LandAreaEQ(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldLandArea, v))
}

// LandAreaNEQ applies the NEQ predicate on the "LandArea" field.
func LandAreaNEQ(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldLandArea, v))
}

// LandAreaIn applies the In predicate on the "LandArea" field.
func LandAreaIn(vs ...float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldLandArea, vs...))
}

// LandAreaNotIn applies the NotIn predicate on the "LandArea" field.
func LandAreaNotIn(vs ...float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldLandArea, vs...))
}

// LandAreaGT applies the GT predicate on the "LandArea" field.
func LandAreaGT(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldLandArea, v))
}

// LandAreaGTE applies the GTE predicate on the "LandArea" field.
func LandAreaGTE(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldLandArea, v))
}

// LandAreaLT applies the LT predicate on the "LandArea" field.
func LandAreaLT(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldLandArea, v))
}

// LandAreaLTE applies the LTE predicate on the "LandArea" field.
func LandAreaLTE(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldLandArea, v))
}

// LandAreaIsNil applies the IsNil predicate on the "LandArea" field.
func LandAreaIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldLandArea))
}

// LandAreaNotNil applies the NotNil predicate on the "LandArea" field.
func LandAreaNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldLandArea))
}

// TotalAreaEQ applies the EQ predicate on the "TotalArea" field.
func TotalAreaEQ(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldTotalArea, v))
}

// TotalAreaNEQ applies the NEQ predicate on the "TotalArea" field.
func TotalAreaNEQ(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldTotalArea, v))
}

// TotalAreaIn applies the In predicate on the "TotalArea" field.
func TotalAreaIn(vs ...float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldTotalArea, vs...))
}

// TotalAreaNotIn applies the NotIn predicate on the "TotalArea" field.
func TotalAreaNotIn(vs ...float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldTotalArea, vs...))
}

// TotalAreaGT applies the GT predicate on the "TotalArea" field.
func TotalAreaGT(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldTotalArea, v))
}

// TotalAreaGTE applies the GTE predicate on the "TotalArea" field.
func TotalAreaGTE(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldTotalArea, v))
}

// TotalAreaLT applies the LT predicate on the "TotalArea" field.
func TotalAreaLT(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldTotalArea, v))
}

// TotalAreaLTE applies the LTE predicate on the "TotalArea" field.
func TotalAreaLTE(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldTotalArea, v))
}

// TotalAreaIsNil applies the IsNil predicate on the "TotalArea" field.
func TotalAreaIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldTotalArea))
}

// TotalAreaNotNil applies the NotNil predicate on the "TotalArea" field.
func TotalAreaNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldTotalArea))
}

// ConstructionAreaEQ applies the EQ predicate on the "ConstructionArea" field.
func ConstructionAreaEQ(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldConstructionArea, v))
}

// ConstructionAreaNEQ applies the NEQ predicate on the "ConstructionArea" field.
func ConstructionAreaNEQ(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldConstructionArea, v))
}

// ConstructionAreaIn applies the In predicate on the "ConstructionArea" field.
func ConstructionAreaIn(vs ...float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldConstructionArea, vs...))
}

// ConstructionAreaNotIn applies the NotIn predicate on the "ConstructionArea" field.
func ConstructionAreaNotIn(vs ...float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldConstructionArea, vs...))
}

// ConstructionAreaGT applies the GT predicate on the "ConstructionArea" field.
func ConstructionAreaGT(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldConstructionArea, v))
}

// ConstructionAreaGTE applies the GTE predicate on the "ConstructionArea" field.
func ConstructionAreaGTE(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldConstructionArea, v))
}

// ConstructionAreaLT applies the LT predicate on the "ConstructionArea" field.
func ConstructionAreaLT(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldConstructionArea, v))
}

// ConstructionAreaLTE applies the LTE predicate on the "ConstructionArea" field.
func ConstructionAreaLTE(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldConstructionArea, v))
}

// ConstructionAreaIsNil applies the IsNil predicate on the "ConstructionArea" field.
func ConstructionAreaIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldConstructionArea))
}

// ConstructionAreaNotNil applies the NotNil predicate on the "ConstructionArea" field.
func ConstructionAreaNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldConstructionArea))
}

// LeftAreaEQ applies the EQ predicate on the "LeftArea" field.
func LeftAreaEQ(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldLeftArea, v))
}

// LeftAreaNEQ applies the NEQ predicate on the "LeftArea" field.
func LeftAreaNEQ(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldLeftArea, v))
}

// LeftAreaIn applies the In predicate on the "LeftArea" field.
func LeftAreaIn(vs ...float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldLeftArea, vs...))
}

// LeftAreaNotIn applies the NotIn predicate on the "LeftArea" field.
func LeftAreaNotIn(vs ...float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldLeftArea, vs...))
}

// LeftAreaGT applies the GT predicate on the "LeftArea" field.
func LeftAreaGT(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldLeftArea, v))
}

// LeftAreaGTE applies the GTE predicate on the "LeftArea" field.
func LeftAreaGTE(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldLeftArea, v))
}

// LeftAreaLT applies the LT predicate on the "LeftArea" field.
func LeftAreaLT(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldLeftArea, v))
}

// LeftAreaLTE applies the LTE predicate on the "LeftArea" field.
func LeftAreaLTE(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldLeftArea, v))
}

// LeftAreaIsNil applies the IsNil predicate on the "LeftArea" field.
func LeftAreaIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldLeftArea))
}

// LeftAreaNotNil applies the NotNil predicate on the "LeftArea" field.
func LeftAreaNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldLeftArea))
}

// YDSAddressEQ applies the EQ predicate on the "YDSAddress" field.
func YDSAddressEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldYDSAddress, v))
}

// YDSAddressNEQ applies the NEQ predicate on the "YDSAddress" field.
func YDSAddressNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldYDSAddress, v))
}

// YDSAddressIn applies the In predicate on the "YDSAddress" field.
func YDSAddressIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldYDSAddress, vs...))
}

// YDSAddressNotIn applies the NotIn predicate on the "YDSAddress" field.
func YDSAddressNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldYDSAddress, vs...))
}

// YDSAddressGT applies the GT predicate on the "YDSAddress" field.
func YDSAddressGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldYDSAddress, v))
}

// YDSAddressGTE applies the GTE predicate on the "YDSAddress" field.
func YDSAddressGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldYDSAddress, v))
}

// YDSAddressLT applies the LT predicate on the "YDSAddress" field.
func YDSAddressLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldYDSAddress, v))
}

// YDSAddressLTE applies the LTE predicate on the "YDSAddress" field.
func YDSAddressLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldYDSAddress, v))
}

// YDSAddressContains applies the Contains predicate on the "YDSAddress" field.
func YDSAddressContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldYDSAddress, v))
}

// YDSAddressHasPrefix applies the HasPrefix predicate on the "YDSAddress" field.
func YDSAddressHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldYDSAddress, v))
}

// YDSAddressHasSuffix applies the HasSuffix predicate on the "YDSAddress" field.
func YDSAddressHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldYDSAddress, v))
}

// YDSAddressIsNil applies the IsNil predicate on the "YDSAddress" field.
func YDSAddressIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldYDSAddress))
}

// YDSAddressNotNil applies the NotNil predicate on the "YDSAddress" field.
func YDSAddressNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldYDSAddress))
}

// YDSAddressEqualFold applies the EqualFold predicate on the "YDSAddress" field.
func YDSAddressEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldYDSAddress, v))
}

// YDSAddressContainsFold applies the ContainsFold predicate on the "YDSAddress" field.
func YDSAddressContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldYDSAddress, v))
}

// AddressEQ applies the EQ predicate on the "Address" field.
func AddressEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "Address" field.
func AddressNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "Address" field.
func AddressIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "Address" field.
func AddressNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "Address" field.
func AddressGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "Address" field.
func AddressGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "Address" field.
func AddressLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "Address" field.
func AddressLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "Address" field.
func AddressContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "Address" field.
func AddressHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "Address" field.
func AddressHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "Address" field.
func AddressIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "Address" field.
func AddressNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "Address" field.
func AddressEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "Address" field.
func AddressContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldAddress, v))
}

// BuildingClassEQ applies the EQ predicate on the "BuildingClass" field.
func BuildingClassEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldBuildingClass, v))
}

// BuildingClassNEQ applies the NEQ predicate on the "BuildingClass" field.
func BuildingClassNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldBuildingClass, v))
}

// BuildingClassIn applies the In predicate on the "BuildingClass" field.
func BuildingClassIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldBuildingClass, vs...))
}

// BuildingClassNotIn applies the NotIn predicate on the "BuildingClass" field.
func BuildingClassNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldBuildingClass, vs...))
}

// BuildingClassGT applies the GT predicate on the "BuildingClass" field.
func BuildingClassGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldBuildingClass, v))
}

// BuildingClassGTE applies the GTE predicate on the "BuildingClass" field.
func BuildingClassGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldBuildingClass, v))
}

// BuildingClassLT applies the LT predicate on the "BuildingClass" field.
func BuildingClassLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldBuildingClass, v))
}

// BuildingClassLTE applies the LTE predicate on the "BuildingClass" field.
func BuildingClassLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldBuildingClass, v))
}

// BuildingClassContains applies the Contains predicate on the "BuildingClass" field.
func BuildingClassContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldBuildingClass, v))
}

// BuildingClassHasPrefix applies the HasPrefix predicate on the "BuildingClass" field.
func BuildingClassHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldBuildingClass, v))
}

// BuildingClassHasSuffix applies the HasSuffix predicate on the "BuildingClass" field.
func BuildingClassHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldBuildingClass, v))
}

// BuildingClassIsNil applies the IsNil predicate on the "BuildingClass" field.
func BuildingClassIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldBuildingClass))
}

// BuildingClassNotNil applies the NotNil predicate on the "BuildingClass" field.
func BuildingClassNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldBuildingClass))
}

// BuildingClassEqualFold applies the EqualFold predicate on the "BuildingClass" field.
func BuildingClassEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldBuildingClass, v))
}

// BuildingClassContainsFold applies the ContainsFold predicate on the "BuildingClass" field.
func BuildingClassContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldBuildingClass, v))
}

// BuildingTypeEQ applies the EQ predicate on the "BuildingType" field.
func BuildingTypeEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldBuildingType, v))
}

// BuildingTypeNEQ applies the NEQ predicate on the "BuildingType" field.
func BuildingTypeNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldBuildingType, v))
}

// BuildingTypeIn applies the In predicate on the "BuildingType" field.
func BuildingTypeIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldBuildingType, vs...))
}

// BuildingTypeNotIn applies the NotIn predicate on the "BuildingType" field.
func BuildingTypeNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldBuildingType, vs...))
}

// BuildingTypeGT applies the GT predicate on the "BuildingType" field.
func BuildingTypeGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldBuildingType, v))
}

// BuildingTypeGTE applies the GTE predicate on the "BuildingType" field.
func BuildingTypeGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldBuildingType, v))
}

// BuildingTypeLT applies the LT predicate on the "BuildingType" field.
func BuildingTypeLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldBuildingType, v))
}

// BuildingTypeLTE applies the LTE predicate on the "BuildingType" field.
func BuildingTypeLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldBuildingType, v))
}

// BuildingTypeContains applies the Contains predicate on the "BuildingType" field.
func BuildingTypeContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldBuildingType, v))
}

// BuildingTypeHasPrefix applies the HasPrefix predicate on the "BuildingType" field.
func BuildingTypeHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldBuildingType, v))
}

// BuildingTypeHasSuffix applies the HasSuffix predicate on the "BuildingType" field.
func BuildingTypeHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldBuildingType, v))
}

// BuildingTypeIsNil applies the IsNil predicate on the "BuildingType" field.
func BuildingTypeIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldBuildingType))
}

// BuildingTypeNotNil applies the NotNil predicate on the "BuildingType" field.
func BuildingTypeNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldBuildingType))
}

// BuildingTypeEqualFold applies the EqualFold predicate on the "BuildingType" field.
func BuildingTypeEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldBuildingType, v))
}

// BuildingTypeContainsFold applies the ContainsFold predicate on the "BuildingType" field.
func BuildingTypeContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldBuildingType, v))
}

// LevelEQ applies the EQ predicate on the "Level" field.
func LevelEQ(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "Level" field.
func LevelNEQ(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "Level" field.
func LevelIn(vs ...float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "Level" field.
func LevelNotIn(vs ...float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "Level" field.
func LevelGT(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "Level" field.
func LevelGTE(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "Level" field.
func LevelLT(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "Level" field.
func LevelLTE(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldLevel, v))
}

// LevelIsNil applies the IsNil predicate on the "Level" field.
func LevelIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldLevel))
}

// LevelNotNil applies the NotNil predicate on the "Level" field.
func LevelNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldLevel))
}

// UnitPriceEQ applies the EQ predicate on the "UnitPrice" field.
func UnitPriceEQ(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldUnitPrice, v))
}

// UnitPriceNEQ applies the NEQ predicate on the "UnitPrice" field.
func UnitPriceNEQ(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldUnitPrice, v))
}

// UnitPriceIn applies the In predicate on the "UnitPrice" field.
func UnitPriceIn(vs ...float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldUnitPrice, vs...))
}

// UnitPriceNotIn applies the NotIn predicate on the "UnitPrice" field.
func UnitPriceNotIn(vs ...float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldUnitPrice, vs...))
}

// UnitPriceGT applies the GT predicate on the "UnitPrice" field.
func UnitPriceGT(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldUnitPrice, v))
}

// UnitPriceGTE applies the GTE predicate on the "UnitPrice" field.
func UnitPriceGTE(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldUnitPrice, v))
}

// UnitPriceLT applies the LT predicate on the "UnitPrice" field.
func UnitPriceLT(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldUnitPrice, v))
}

// UnitPriceLTE applies the LTE predicate on the "UnitPrice" field.
func UnitPriceLTE(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldUnitPrice, v))
}

// UnitPriceIsNil applies the IsNil predicate on the "UnitPrice" field.
func UnitPriceIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldUnitPrice))
}

// UnitPriceNotNil applies the NotNil predicate on the "UnitPrice" field.
func UnitPriceNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldUnitPrice))
}

// FloorCountEQ applies the EQ predicate on the "FloorCount" field.
func FloorCountEQ(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldFloorCount, v))
}

// FloorCountNEQ applies the NEQ predicate on the "FloorCount" field.
func FloorCountNEQ(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldFloorCount, v))
}

// FloorCountIn applies the In predicate on the "FloorCount" field.
func FloorCountIn(vs ...int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldFloorCount, vs...))
}

// FloorCountNotIn applies the NotIn predicate on the "FloorCount" field.
func FloorCountNotIn(vs ...int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldFloorCount, vs...))
}

// FloorCountGT applies the GT predicate on the "FloorCount" field.
func FloorCountGT(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldFloorCount, v))
}

// FloorCountGTE applies the GTE predicate on the "FloorCount" field.
func FloorCountGTE(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldFloorCount, v))
}

// FloorCountLT applies the LT predicate on the "FloorCount" field.
func FloorCountLT(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldFloorCount, v))
}

// FloorCountLTE applies the LTE predicate on the "FloorCount" field.
func FloorCountLTE(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldFloorCount, v))
}

// FloorCountIsNil applies the IsNil predicate on the "FloorCount" field.
func FloorCountIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldFloorCount))
}

// FloorCountNotNil applies the NotNil predicate on the "FloorCount" field.
func FloorCountNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldFloorCount))
}

// BKSReferenceNoEQ applies the EQ predicate on the "BKSReferenceNo" field.
func BKSReferenceNoEQ(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldBKSReferenceNo, v))
}

// BKSReferenceNoNEQ applies the NEQ predicate on the "BKSReferenceNo" field.
func BKSReferenceNoNEQ(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldBKSReferenceNo, v))
}

// BKSReferenceNoIn applies the In predicate on the "BKSReferenceNo" field.
func BKSReferenceNoIn(vs ...int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldBKSReferenceNo, vs...))
}

// BKSReferenceNoNotIn applies the NotIn predicate on the "BKSReferenceNo" field.
func BKSReferenceNoNotIn(vs ...int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldBKSReferenceNo, vs...))
}

// BKSReferenceNoGT applies the GT predicate on the "BKSReferenceNo" field.
func BKSReferenceNoGT(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldBKSReferenceNo, v))
}

// BKSReferenceNoGTE applies the GTE predicate on the "BKSReferenceNo" field.
func BKSReferenceNoGTE(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldBKSReferenceNo, v))
}

// BKSReferenceNoLT applies the LT predicate on the "BKSReferenceNo" field.
func BKSReferenceNoLT(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldBKSReferenceNo, v))
}

// BKSReferenceNoLTE applies the LTE predicate on the "BKSReferenceNo" field.
func BKSReferenceNoLTE(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldBKSReferenceNo, v))
}

// BKSReferenceNoIsNil applies the IsNil predicate on the "BKSReferenceNo" field.
func BKSReferenceNoIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldBKSReferenceNo))
}

// BKSReferenceNoNotNil applies the NotNil predicate on the "BKSReferenceNo" field.
func BKSReferenceNoNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldBKSReferenceNo))
}

// CoordinatesEQ applies the EQ predicate on the "Coordinates" field.
func CoordinatesEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldCoordinates, v))
}

// CoordinatesNEQ applies the NEQ predicate on the "Coordinates" field.
func CoordinatesNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldCoordinates, v))
}

// CoordinatesIn applies the In predicate on the "Coordinates" field.
func CoordinatesIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldCoordinates, vs...))
}

// CoordinatesNotIn applies the NotIn predicate on the "Coordinates" field.
func CoordinatesNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldCoordinates, vs...))
}

// CoordinatesGT applies the GT predicate on the "Coordinates" field.
func CoordinatesGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldCoordinates, v))
}

// CoordinatesGTE applies the GTE predicate on the "Coordinates" field.
func CoordinatesGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldCoordinates, v))
}

// CoordinatesLT applies the LT predicate on the "Coordinates" field.
func CoordinatesLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldCoordinates, v))
}

// CoordinatesLTE applies the LTE predicate on the "Coordinates" field.
func CoordinatesLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldCoordinates, v))
}

// CoordinatesContains applies the Contains predicate on the "Coordinates" field.
func CoordinatesContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldCoordinates, v))
}

// CoordinatesHasPrefix applies the HasPrefix predicate on the "Coordinates" field.
func CoordinatesHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldCoordinates, v))
}

// CoordinatesHasSuffix applies the HasSuffix predicate on the "Coordinates" field.
func CoordinatesHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldCoordinates, v))
}

// CoordinatesIsNil applies the IsNil predicate on the "Coordinates" field.
func CoordinatesIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldCoordinates))
}

// CoordinatesNotNil applies the NotNil predicate on the "Coordinates" field.
func CoordinatesNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldCoordinates))
}

// CoordinatesEqualFold applies the EqualFold predicate on the "Coordinates" field.
func CoordinatesEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldCoordinates, v))
}

// CoordinatesContainsFold applies the ContainsFold predicate on the "Coordinates" field.
func CoordinatesContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldCoordinates, v))
}

// FolderNoEQ applies the EQ predicate on the "FolderNo" field.
func FolderNoEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldFolderNo, v))
}

// FolderNoNEQ applies the NEQ predicate on the "FolderNo" field.
func FolderNoNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldFolderNo, v))
}

// FolderNoIn applies the In predicate on the "FolderNo" field.
func FolderNoIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldFolderNo, vs...))
}

// FolderNoNotIn applies the NotIn predicate on the "FolderNo" field.
func FolderNoNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldFolderNo, vs...))
}

// FolderNoGT applies the GT predicate on the "FolderNo" field.
func FolderNoGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldFolderNo, v))
}

// FolderNoGTE applies the GTE predicate on the "FolderNo" field.
func FolderNoGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldFolderNo, v))
}

// FolderNoLT applies the LT predicate on the "FolderNo" field.
func FolderNoLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldFolderNo, v))
}

// FolderNoLTE applies the LTE predicate on the "FolderNo" field.
func FolderNoLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldFolderNo, v))
}

// FolderNoContains applies the Contains predicate on the "FolderNo" field.
func FolderNoContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldFolderNo, v))
}

// FolderNoHasPrefix applies the HasPrefix predicate on the "FolderNo" field.
func FolderNoHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldFolderNo, v))
}

// FolderNoHasSuffix applies the HasSuffix predicate on the "FolderNo" field.
func FolderNoHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldFolderNo, v))
}

// FolderNoIsNil applies the IsNil predicate on the "FolderNo" field.
func FolderNoIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldFolderNo))
}

// FolderNoNotNil applies the NotNil predicate on the "FolderNo" field.
func FolderNoNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldFolderNo))
}

// FolderNoEqualFold applies the EqualFold predicate on the "FolderNo" field.
func FolderNoEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldFolderNo, v))
}

// FolderNoContainsFold applies the ContainsFold predicate on the "FolderNo" field.
func FolderNoContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldFolderNo, v))
}

// UploadedFileEQ applies the EQ predicate on the "UploadedFile" field.
func UploadedFileEQ(v bool) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldUploadedFile, v))
}

// UploadedFileNEQ applies the NEQ predicate on the "UploadedFile" field.
func UploadedFileNEQ(v bool) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldUploadedFile, v))
}

// UploadedFileIsNil applies the IsNil predicate on the "UploadedFile" field.
func UploadedFileIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldUploadedFile))
}

// UploadedFileNotNil applies the NotNil predicate on the "UploadedFile" field.
func UploadedFileNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldUploadedFile))
}

// IndustryAreaEQ applies the EQ predicate on the "IndustryArea" field.
func IndustryAreaEQ(v bool) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldIndustryArea, v))
}

// IndustryAreaNEQ applies the NEQ predicate on the "IndustryArea" field.
func IndustryAreaNEQ(v bool) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldIndustryArea, v))
}

// IndustryAreaIsNil applies the IsNil predicate on the "IndustryArea" field.
func IndustryAreaIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldIndustryArea))
}

// IndustryAreaNotNil applies the NotNil predicate on the "IndustryArea" field.
func IndustryAreaNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldIndustryArea))
}

// ClusterStructureEQ applies the EQ predicate on the "ClusterStructure" field.
func ClusterStructureEQ(v bool) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldClusterStructure, v))
}

// ClusterStructureNEQ applies the NEQ predicate on the "ClusterStructure" field.
func ClusterStructureNEQ(v bool) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldClusterStructure, v))
}

// ClusterStructureIsNil applies the IsNil predicate on the "ClusterStructure" field.
func ClusterStructureIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldClusterStructure))
}

// ClusterStructureNotNil applies the NotNil predicate on the "ClusterStructure" field.
func ClusterStructureNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldClusterStructure))
}

// IsLicenseExpiredEQ applies the EQ predicate on the "IsLicenseExpired" field.
func IsLicenseExpiredEQ(v bool) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldIsLicenseExpired, v))
}

// IsLicenseExpiredNEQ applies the NEQ predicate on the "IsLicenseExpired" field.
func IsLicenseExpiredNEQ(v bool) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldIsLicenseExpired, v))
}

// IsLicenseExpiredIsNil applies the IsNil predicate on the "IsLicenseExpired" field.
func IsLicenseExpiredIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldIsLicenseExpired))
}

// IsLicenseExpiredNotNil applies the NotNil predicate on the "IsLicenseExpired" field.
func IsLicenseExpiredNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldIsLicenseExpired))
}

// IsCompletedEQ applies the EQ predicate on the "IsCompleted" field.
func IsCompletedEQ(v bool) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldIsCompleted, v))
}

// IsCompletedNEQ applies the NEQ predicate on the "IsCompleted" field.
func IsCompletedNEQ(v bool) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldIsCompleted, v))
}

// IsCompletedIsNil applies the IsNil predicate on the "IsCompleted" field.
func IsCompletedIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldIsCompleted))
}

// IsCompletedNotNil applies the NotNil predicate on the "IsCompleted" field.
func IsCompletedNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldIsCompleted))
}

// NoteEQ applies the EQ predicate on the "Note" field.
func NoteEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldNote, v))
}

// NoteNEQ applies the NEQ predicate on the "Note" field.
func NoteNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldNote, v))
}

// NoteIn applies the In predicate on the "Note" field.
func NoteIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldNote, vs...))
}

// NoteNotIn applies the NotIn predicate on the "Note" field.
func NoteNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldNote, vs...))
}

// NoteGT applies the GT predicate on the "Note" field.
func NoteGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldNote, v))
}

// NoteGTE applies the GTE predicate on the "Note" field.
func NoteGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldNote, v))
}

// NoteLT applies the LT predicate on the "Note" field.
func NoteLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldNote, v))
}

// NoteLTE applies the LTE predicate on the "Note" field.
func NoteLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldNote, v))
}

// NoteContains applies the Contains predicate on the "Note" field.
func NoteContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldNote, v))
}

// NoteHasPrefix applies the HasPrefix predicate on the "Note" field.
func NoteHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldNote, v))
}

// NoteHasSuffix applies the HasSuffix predicate on the "Note" field.
func NoteHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldNote, v))
}

// NoteIsNil applies the IsNil predicate on the "Note" field.
func NoteIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldNote))
}

// NoteNotNil applies the NotNil predicate on the "Note" field.
func NoteNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldNote))
}

// NoteEqualFold applies the EqualFold predicate on the "Note" field.
func NoteEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldNote, v))
}

// NoteContainsFold applies the ContainsFold predicate on the "Note" field.
func NoteContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldNote, v))
}

// CreatedAtEQ applies the EQ predicate on the "CreatedAt" field.
func CreatedAtEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "CreatedAt" field.
func CreatedAtNEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "CreatedAt" field.
func CreatedAtIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "CreatedAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "CreatedAt" field.
func CreatedAtGT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "CreatedAt" field.
func CreatedAtGTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "CreatedAt" field.
func CreatedAtLT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "CreatedAt" field.
func CreatedAtLTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasRelations applies the HasEdge predicate on the "relations" edge.
func HasRelations() predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, RelationsTable, RelationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRelationsWith applies the HasEdge predicate on the "relations" edge with a given conditions (other predicates).
func HasRelationsWith(preds ...predicate.JobRelations) predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := newRelationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JobDetail) predicate.JobDetail {
	return predicate.JobDetail(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JobDetail) predicate.JobDetail {
	return predicate.JobDetail(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JobDetail) predicate.JobDetail {
	return predicate.JobDetail(sql.NotPredicates(p))
}
