// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobprogress"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/predicate"
)

// JobProgressDelete is the builder for deleting a JobProgress entity.
type JobProgressDelete struct {
	config
	hooks    []Hook
	mutation *JobProgressMutation
}

// Where appends a list predicates to the JobProgressDelete builder.
func (jpd *JobProgressDelete) Where(ps ...predicate.JobProgress) *JobProgressDelete {
	jpd.mutation.Where(ps...)
	return jpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (jpd *JobProgressDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, jpd.sqlExec, jpd.mutation, jpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (jpd *JobProgressDelete) ExecX(ctx context.Context) int {
	n, err := jpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (jpd *JobProgressDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(jobprogress.Table, sqlgraph.NewFieldSpec(jobprogress.FieldID, field.TypeInt))
	if ps := jpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, jpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	jpd.mutation.done = true
	return affected, err
}

// JobProgressDeleteOne is the builder for deleting a single JobProgress entity.
type JobProgressDeleteOne struct {
	jpd *JobProgressDelete
}

// Where appends a list predicates to the JobProgressDelete builder.
func (jpdo *JobProgressDeleteOne) Where(ps ...predicate.JobProgress) *JobProgressDeleteOne {
	jpdo.jpd.mutation.Where(ps...)
	return jpdo
}

// Exec executes the deletion query.
func (jpdo *JobProgressDeleteOne) Exec(ctx context.Context) error {
	n, err := jpdo.jpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{jobprogress.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (jpdo *JobProgressDeleteOne) ExecX(ctx context.Context) {
	if err := jpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
