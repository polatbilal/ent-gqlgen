// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/companydetail"
)

// CompanyDetail is the model entity for the CompanyDetail schema.
type CompanyDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CompanyCode holds the value of the "CompanyCode" field.
	CompanyCode int `json:"CompanyCode,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Address holds the value of the "Address" field.
	Address string `json:"Address,omitempty"`
	// Phone holds the value of the "Phone" field.
	Phone string `json:"Phone,omitempty"`
	// Fax holds the value of the "Fax" field.
	Fax string `json:"Fax,omitempty"`
	// MobilePhone holds the value of the "MobilePhone" field.
	MobilePhone string `json:"MobilePhone,omitempty"`
	// Email holds the value of the "Email" field.
	Email string `json:"Email,omitempty"`
	// Website holds the value of the "Website" field.
	Website string `json:"Website,omitempty"`
	// TaxAdmin holds the value of the "TaxAdmin" field.
	TaxAdmin string `json:"TaxAdmin,omitempty"`
	// TaxNo holds the value of the "TaxNo" field.
	TaxNo int `json:"TaxNo,omitempty"`
	// ChamberInfo holds the value of the "ChamberInfo" field.
	ChamberInfo string `json:"ChamberInfo,omitempty"`
	// ChamberRegisterNo holds the value of the "ChamberRegisterNo" field.
	ChamberRegisterNo string `json:"ChamberRegisterNo,omitempty"`
	// VisaDate holds the value of the "VisaDate" field.
	VisaDate time.Time `json:"VisaDate,omitempty"`
	// VisaEndDate holds the value of the "VisaEndDate" field.
	VisaEndDate time.Time `json:"VisaEndDate,omitempty"`
	// VisaFinishedFor90Days holds the value of the "VisaFinishedFor90Days" field.
	VisaFinishedFor90Days bool `json:"VisaFinishedFor90Days,omitempty"`
	// CorePersonAbsent90Days holds the value of the "CorePersonAbsent90Days" field.
	CorePersonAbsent90Days bool `json:"CorePersonAbsent90Days,omitempty"`
	// IsClosed holds the value of the "IsClosed" field.
	IsClosed bool `json:"IsClosed,omitempty"`
	// OwnerName holds the value of the "OwnerName" field.
	OwnerName string `json:"OwnerName,omitempty"`
	// OwnerTcNo holds the value of the "OwnerTcNo" field.
	OwnerTcNo int `json:"OwnerTcNo,omitempty"`
	// OwnerAddress holds the value of the "OwnerAddress" field.
	OwnerAddress string `json:"OwnerAddress,omitempty"`
	// OwnerPhone holds the value of the "OwnerPhone" field.
	OwnerPhone string `json:"OwnerPhone,omitempty"`
	// OwnerEmail holds the value of the "OwnerEmail" field.
	OwnerEmail string `json:"OwnerEmail,omitempty"`
	// OwnerRegisterNo holds the value of the "OwnerRegisterNo" field.
	OwnerRegisterNo int `json:"OwnerRegisterNo,omitempty"`
	// OwnerCareer holds the value of the "OwnerCareer" field.
	OwnerCareer string `json:"OwnerCareer,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompanyDetailQuery when eager-loading is set.
	Edges        CompanyDetailEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CompanyDetailEdges holds the relations/edges for other nodes in the graph.
type CompanyDetailEdges struct {
	// Jobs holds the value of the jobs edge.
	Jobs []*JobRelations `json:"jobs,omitempty"`
	// Users holds the value of the users edge.
	Users []*CompanyUser `json:"users,omitempty"`
	// Tokens holds the value of the tokens edge.
	Tokens []*CompanyToken `json:"tokens,omitempty"`
	// Engineers holds the value of the engineers edge.
	Engineers []*CompanyEngineer `json:"engineers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedJobs      map[string][]*JobRelations
	namedUsers     map[string][]*CompanyUser
	namedTokens    map[string][]*CompanyToken
	namedEngineers map[string][]*CompanyEngineer
}

// JobsOrErr returns the Jobs value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyDetailEdges) JobsOrErr() ([]*JobRelations, error) {
	if e.loadedTypes[0] {
		return e.Jobs, nil
	}
	return nil, &NotLoadedError{edge: "jobs"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyDetailEdges) UsersOrErr() ([]*CompanyUser, error) {
	if e.loadedTypes[1] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// TokensOrErr returns the Tokens value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyDetailEdges) TokensOrErr() ([]*CompanyToken, error) {
	if e.loadedTypes[2] {
		return e.Tokens, nil
	}
	return nil, &NotLoadedError{edge: "tokens"}
}

// EngineersOrErr returns the Engineers value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyDetailEdges) EngineersOrErr() ([]*CompanyEngineer, error) {
	if e.loadedTypes[3] {
		return e.Engineers, nil
	}
	return nil, &NotLoadedError{edge: "engineers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CompanyDetail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case companydetail.FieldVisaFinishedFor90Days, companydetail.FieldCorePersonAbsent90Days, companydetail.FieldIsClosed:
			values[i] = new(sql.NullBool)
		case companydetail.FieldID, companydetail.FieldCompanyCode, companydetail.FieldTaxNo, companydetail.FieldOwnerTcNo, companydetail.FieldOwnerRegisterNo:
			values[i] = new(sql.NullInt64)
		case companydetail.FieldName, companydetail.FieldAddress, companydetail.FieldPhone, companydetail.FieldFax, companydetail.FieldMobilePhone, companydetail.FieldEmail, companydetail.FieldWebsite, companydetail.FieldTaxAdmin, companydetail.FieldChamberInfo, companydetail.FieldChamberRegisterNo, companydetail.FieldOwnerName, companydetail.FieldOwnerAddress, companydetail.FieldOwnerPhone, companydetail.FieldOwnerEmail, companydetail.FieldOwnerCareer:
			values[i] = new(sql.NullString)
		case companydetail.FieldVisaDate, companydetail.FieldVisaEndDate, companydetail.FieldCreatedAt, companydetail.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CompanyDetail fields.
func (cd *CompanyDetail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case companydetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cd.ID = int(value.Int64)
		case companydetail.FieldCompanyCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CompanyCode", values[i])
			} else if value.Valid {
				cd.CompanyCode = int(value.Int64)
			}
		case companydetail.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				cd.Name = value.String
			}
		case companydetail.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Address", values[i])
			} else if value.Valid {
				cd.Address = value.String
			}
		case companydetail.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Phone", values[i])
			} else if value.Valid {
				cd.Phone = value.String
			}
		case companydetail.FieldFax:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Fax", values[i])
			} else if value.Valid {
				cd.Fax = value.String
			}
		case companydetail.FieldMobilePhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field MobilePhone", values[i])
			} else if value.Valid {
				cd.MobilePhone = value.String
			}
		case companydetail.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Email", values[i])
			} else if value.Valid {
				cd.Email = value.String
			}
		case companydetail.FieldWebsite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Website", values[i])
			} else if value.Valid {
				cd.Website = value.String
			}
		case companydetail.FieldTaxAdmin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TaxAdmin", values[i])
			} else if value.Valid {
				cd.TaxAdmin = value.String
			}
		case companydetail.FieldTaxNo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field TaxNo", values[i])
			} else if value.Valid {
				cd.TaxNo = int(value.Int64)
			}
		case companydetail.FieldChamberInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ChamberInfo", values[i])
			} else if value.Valid {
				cd.ChamberInfo = value.String
			}
		case companydetail.FieldChamberRegisterNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ChamberRegisterNo", values[i])
			} else if value.Valid {
				cd.ChamberRegisterNo = value.String
			}
		case companydetail.FieldVisaDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field VisaDate", values[i])
			} else if value.Valid {
				cd.VisaDate = value.Time
			}
		case companydetail.FieldVisaEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field VisaEndDate", values[i])
			} else if value.Valid {
				cd.VisaEndDate = value.Time
			}
		case companydetail.FieldVisaFinishedFor90Days:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field VisaFinishedFor90Days", values[i])
			} else if value.Valid {
				cd.VisaFinishedFor90Days = value.Bool
			}
		case companydetail.FieldCorePersonAbsent90Days:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field CorePersonAbsent90Days", values[i])
			} else if value.Valid {
				cd.CorePersonAbsent90Days = value.Bool
			}
		case companydetail.FieldIsClosed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field IsClosed", values[i])
			} else if value.Valid {
				cd.IsClosed = value.Bool
			}
		case companydetail.FieldOwnerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OwnerName", values[i])
			} else if value.Valid {
				cd.OwnerName = value.String
			}
		case companydetail.FieldOwnerTcNo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field OwnerTcNo", values[i])
			} else if value.Valid {
				cd.OwnerTcNo = int(value.Int64)
			}
		case companydetail.FieldOwnerAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OwnerAddress", values[i])
			} else if value.Valid {
				cd.OwnerAddress = value.String
			}
		case companydetail.FieldOwnerPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OwnerPhone", values[i])
			} else if value.Valid {
				cd.OwnerPhone = value.String
			}
		case companydetail.FieldOwnerEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OwnerEmail", values[i])
			} else if value.Valid {
				cd.OwnerEmail = value.String
			}
		case companydetail.FieldOwnerRegisterNo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field OwnerRegisterNo", values[i])
			} else if value.Valid {
				cd.OwnerRegisterNo = int(value.Int64)
			}
		case companydetail.FieldOwnerCareer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OwnerCareer", values[i])
			} else if value.Valid {
				cd.OwnerCareer = value.String
			}
		case companydetail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				cd.CreatedAt = value.Time
			}
		case companydetail.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				cd.UpdatedAt = value.Time
			}
		default:
			cd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CompanyDetail.
// This includes values selected through modifiers, order, etc.
func (cd *CompanyDetail) Value(name string) (ent.Value, error) {
	return cd.selectValues.Get(name)
}

// QueryJobs queries the "jobs" edge of the CompanyDetail entity.
func (cd *CompanyDetail) QueryJobs() *JobRelationsQuery {
	return NewCompanyDetailClient(cd.config).QueryJobs(cd)
}

// QueryUsers queries the "users" edge of the CompanyDetail entity.
func (cd *CompanyDetail) QueryUsers() *CompanyUserQuery {
	return NewCompanyDetailClient(cd.config).QueryUsers(cd)
}

// QueryTokens queries the "tokens" edge of the CompanyDetail entity.
func (cd *CompanyDetail) QueryTokens() *CompanyTokenQuery {
	return NewCompanyDetailClient(cd.config).QueryTokens(cd)
}

// QueryEngineers queries the "engineers" edge of the CompanyDetail entity.
func (cd *CompanyDetail) QueryEngineers() *CompanyEngineerQuery {
	return NewCompanyDetailClient(cd.config).QueryEngineers(cd)
}

// Update returns a builder for updating this CompanyDetail.
// Note that you need to call CompanyDetail.Unwrap() before calling this method if this CompanyDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (cd *CompanyDetail) Update() *CompanyDetailUpdateOne {
	return NewCompanyDetailClient(cd.config).UpdateOne(cd)
}

// Unwrap unwraps the CompanyDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cd *CompanyDetail) Unwrap() *CompanyDetail {
	_tx, ok := cd.config.driver.(*txDriver)
	if !ok {
		panic("ent: CompanyDetail is not a transactional entity")
	}
	cd.config.driver = _tx.drv
	return cd
}

// String implements the fmt.Stringer.
func (cd *CompanyDetail) String() string {
	var builder strings.Builder
	builder.WriteString("CompanyDetail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cd.ID))
	builder.WriteString("CompanyCode=")
	builder.WriteString(fmt.Sprintf("%v", cd.CompanyCode))
	builder.WriteString(", ")
	builder.WriteString("Name=")
	builder.WriteString(cd.Name)
	builder.WriteString(", ")
	builder.WriteString("Address=")
	builder.WriteString(cd.Address)
	builder.WriteString(", ")
	builder.WriteString("Phone=")
	builder.WriteString(cd.Phone)
	builder.WriteString(", ")
	builder.WriteString("Fax=")
	builder.WriteString(cd.Fax)
	builder.WriteString(", ")
	builder.WriteString("MobilePhone=")
	builder.WriteString(cd.MobilePhone)
	builder.WriteString(", ")
	builder.WriteString("Email=")
	builder.WriteString(cd.Email)
	builder.WriteString(", ")
	builder.WriteString("Website=")
	builder.WriteString(cd.Website)
	builder.WriteString(", ")
	builder.WriteString("TaxAdmin=")
	builder.WriteString(cd.TaxAdmin)
	builder.WriteString(", ")
	builder.WriteString("TaxNo=")
	builder.WriteString(fmt.Sprintf("%v", cd.TaxNo))
	builder.WriteString(", ")
	builder.WriteString("ChamberInfo=")
	builder.WriteString(cd.ChamberInfo)
	builder.WriteString(", ")
	builder.WriteString("ChamberRegisterNo=")
	builder.WriteString(cd.ChamberRegisterNo)
	builder.WriteString(", ")
	builder.WriteString("VisaDate=")
	builder.WriteString(cd.VisaDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("VisaEndDate=")
	builder.WriteString(cd.VisaEndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("VisaFinishedFor90Days=")
	builder.WriteString(fmt.Sprintf("%v", cd.VisaFinishedFor90Days))
	builder.WriteString(", ")
	builder.WriteString("CorePersonAbsent90Days=")
	builder.WriteString(fmt.Sprintf("%v", cd.CorePersonAbsent90Days))
	builder.WriteString(", ")
	builder.WriteString("IsClosed=")
	builder.WriteString(fmt.Sprintf("%v", cd.IsClosed))
	builder.WriteString(", ")
	builder.WriteString("OwnerName=")
	builder.WriteString(cd.OwnerName)
	builder.WriteString(", ")
	builder.WriteString("OwnerTcNo=")
	builder.WriteString(fmt.Sprintf("%v", cd.OwnerTcNo))
	builder.WriteString(", ")
	builder.WriteString("OwnerAddress=")
	builder.WriteString(cd.OwnerAddress)
	builder.WriteString(", ")
	builder.WriteString("OwnerPhone=")
	builder.WriteString(cd.OwnerPhone)
	builder.WriteString(", ")
	builder.WriteString("OwnerEmail=")
	builder.WriteString(cd.OwnerEmail)
	builder.WriteString(", ")
	builder.WriteString("OwnerRegisterNo=")
	builder.WriteString(fmt.Sprintf("%v", cd.OwnerRegisterNo))
	builder.WriteString(", ")
	builder.WriteString("OwnerCareer=")
	builder.WriteString(cd.OwnerCareer)
	builder.WriteString(", ")
	builder.WriteString("CreatedAt=")
	builder.WriteString(cd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(cd.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedJobs returns the Jobs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cd *CompanyDetail) NamedJobs(name string) ([]*JobRelations, error) {
	if cd.Edges.namedJobs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cd.Edges.namedJobs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cd *CompanyDetail) appendNamedJobs(name string, edges ...*JobRelations) {
	if cd.Edges.namedJobs == nil {
		cd.Edges.namedJobs = make(map[string][]*JobRelations)
	}
	if len(edges) == 0 {
		cd.Edges.namedJobs[name] = []*JobRelations{}
	} else {
		cd.Edges.namedJobs[name] = append(cd.Edges.namedJobs[name], edges...)
	}
}

// NamedUsers returns the Users named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cd *CompanyDetail) NamedUsers(name string) ([]*CompanyUser, error) {
	if cd.Edges.namedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cd.Edges.namedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cd *CompanyDetail) appendNamedUsers(name string, edges ...*CompanyUser) {
	if cd.Edges.namedUsers == nil {
		cd.Edges.namedUsers = make(map[string][]*CompanyUser)
	}
	if len(edges) == 0 {
		cd.Edges.namedUsers[name] = []*CompanyUser{}
	} else {
		cd.Edges.namedUsers[name] = append(cd.Edges.namedUsers[name], edges...)
	}
}

// NamedTokens returns the Tokens named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cd *CompanyDetail) NamedTokens(name string) ([]*CompanyToken, error) {
	if cd.Edges.namedTokens == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cd.Edges.namedTokens[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cd *CompanyDetail) appendNamedTokens(name string, edges ...*CompanyToken) {
	if cd.Edges.namedTokens == nil {
		cd.Edges.namedTokens = make(map[string][]*CompanyToken)
	}
	if len(edges) == 0 {
		cd.Edges.namedTokens[name] = []*CompanyToken{}
	} else {
		cd.Edges.namedTokens[name] = append(cd.Edges.namedTokens[name], edges...)
	}
}

// NamedEngineers returns the Engineers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cd *CompanyDetail) NamedEngineers(name string) ([]*CompanyEngineer, error) {
	if cd.Edges.namedEngineers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cd.Edges.namedEngineers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cd *CompanyDetail) appendNamedEngineers(name string, edges ...*CompanyEngineer) {
	if cd.Edges.namedEngineers == nil {
		cd.Edges.namedEngineers = make(map[string][]*CompanyEngineer)
	}
	if len(edges) == 0 {
		cd.Edges.namedEngineers[name] = []*CompanyEngineer{}
	} else {
		cd.Edges.namedEngineers[name] = append(cd.Edges.namedEngineers[name], edges...)
	}
}

// CompanyDetails is a parsable slice of CompanyDetail.
type CompanyDetails []*CompanyDetail
