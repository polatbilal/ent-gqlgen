// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/predicate"
)

// JobDetailDelete is the builder for deleting a JobDetail entity.
type JobDetailDelete struct {
	config
	hooks    []Hook
	mutation *JobDetailMutation
}

// Where appends a list predicates to the JobDetailDelete builder.
func (jdd *JobDetailDelete) Where(ps ...predicate.JobDetail) *JobDetailDelete {
	jdd.mutation.Where(ps...)
	return jdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (jdd *JobDetailDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, jdd.sqlExec, jdd.mutation, jdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (jdd *JobDetailDelete) ExecX(ctx context.Context) int {
	n, err := jdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (jdd *JobDetailDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(jobdetail.Table, sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt))
	if ps := jdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, jdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	jdd.mutation.done = true
	return affected, err
}

// JobDetailDeleteOne is the builder for deleting a single JobDetail entity.
type JobDetailDeleteOne struct {
	jdd *JobDetailDelete
}

// Where appends a list predicates to the JobDetailDelete builder.
func (jddo *JobDetailDeleteOne) Where(ps ...predicate.JobDetail) *JobDetailDeleteOne {
	jddo.jdd.mutation.Where(ps...)
	return jddo
}

// Exec executes the deletion query.
func (jddo *JobDetailDeleteOne) Exec(ctx context.Context) error {
	n, err := jddo.jdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{jobdetail.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (jddo *JobDetailDeleteOne) ExecX(ctx context.Context) {
	if err := jddo.Exec(ctx); err != nil {
		panic(err)
	}
}
