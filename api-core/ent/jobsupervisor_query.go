// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobrelations"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobsupervisor"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/predicate"
)

// JobSupervisorQuery is the builder for querying JobSupervisor entities.
type JobSupervisorQuery struct {
	config
	ctx                  *QueryContext
	order                []jobsupervisor.OrderOption
	inters               []Interceptor
	predicates           []predicate.JobSupervisor
	withSupervisors      *JobRelationsQuery
	modifiers            []func(*sql.Selector)
	loadTotal            []func(context.Context, []*JobSupervisor) error
	withNamedSupervisors map[string]*JobRelationsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the JobSupervisorQuery builder.
func (jsq *JobSupervisorQuery) Where(ps ...predicate.JobSupervisor) *JobSupervisorQuery {
	jsq.predicates = append(jsq.predicates, ps...)
	return jsq
}

// Limit the number of records to be returned by this query.
func (jsq *JobSupervisorQuery) Limit(limit int) *JobSupervisorQuery {
	jsq.ctx.Limit = &limit
	return jsq
}

// Offset to start from.
func (jsq *JobSupervisorQuery) Offset(offset int) *JobSupervisorQuery {
	jsq.ctx.Offset = &offset
	return jsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (jsq *JobSupervisorQuery) Unique(unique bool) *JobSupervisorQuery {
	jsq.ctx.Unique = &unique
	return jsq
}

// Order specifies how the records should be ordered.
func (jsq *JobSupervisorQuery) Order(o ...jobsupervisor.OrderOption) *JobSupervisorQuery {
	jsq.order = append(jsq.order, o...)
	return jsq
}

// QuerySupervisors chains the current query on the "supervisors" edge.
func (jsq *JobSupervisorQuery) QuerySupervisors() *JobRelationsQuery {
	query := (&JobRelationsClient{config: jsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobsupervisor.Table, jobsupervisor.FieldID, selector),
			sqlgraph.To(jobrelations.Table, jobrelations.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobsupervisor.SupervisorsTable, jobsupervisor.SupervisorsColumn),
		)
		fromU = sqlgraph.SetNeighbors(jsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first JobSupervisor entity from the query.
// Returns a *NotFoundError when no JobSupervisor was found.
func (jsq *JobSupervisorQuery) First(ctx context.Context) (*JobSupervisor, error) {
	nodes, err := jsq.Limit(1).All(setContextOp(ctx, jsq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{jobsupervisor.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jsq *JobSupervisorQuery) FirstX(ctx context.Context) *JobSupervisor {
	node, err := jsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first JobSupervisor ID from the query.
// Returns a *NotFoundError when no JobSupervisor ID was found.
func (jsq *JobSupervisorQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jsq.Limit(1).IDs(setContextOp(ctx, jsq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{jobsupervisor.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (jsq *JobSupervisorQuery) FirstIDX(ctx context.Context) int {
	id, err := jsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single JobSupervisor entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one JobSupervisor entity is found.
// Returns a *NotFoundError when no JobSupervisor entities are found.
func (jsq *JobSupervisorQuery) Only(ctx context.Context) (*JobSupervisor, error) {
	nodes, err := jsq.Limit(2).All(setContextOp(ctx, jsq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{jobsupervisor.Label}
	default:
		return nil, &NotSingularError{jobsupervisor.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jsq *JobSupervisorQuery) OnlyX(ctx context.Context) *JobSupervisor {
	node, err := jsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only JobSupervisor ID in the query.
// Returns a *NotSingularError when more than one JobSupervisor ID is found.
// Returns a *NotFoundError when no entities are found.
func (jsq *JobSupervisorQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jsq.Limit(2).IDs(setContextOp(ctx, jsq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{jobsupervisor.Label}
	default:
		err = &NotSingularError{jobsupervisor.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (jsq *JobSupervisorQuery) OnlyIDX(ctx context.Context) int {
	id, err := jsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of JobSupervisors.
func (jsq *JobSupervisorQuery) All(ctx context.Context) ([]*JobSupervisor, error) {
	ctx = setContextOp(ctx, jsq.ctx, ent.OpQueryAll)
	if err := jsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*JobSupervisor, *JobSupervisorQuery]()
	return withInterceptors[[]*JobSupervisor](ctx, jsq, qr, jsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (jsq *JobSupervisorQuery) AllX(ctx context.Context) []*JobSupervisor {
	nodes, err := jsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of JobSupervisor IDs.
func (jsq *JobSupervisorQuery) IDs(ctx context.Context) (ids []int, err error) {
	if jsq.ctx.Unique == nil && jsq.path != nil {
		jsq.Unique(true)
	}
	ctx = setContextOp(ctx, jsq.ctx, ent.OpQueryIDs)
	if err = jsq.Select(jobsupervisor.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jsq *JobSupervisorQuery) IDsX(ctx context.Context) []int {
	ids, err := jsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jsq *JobSupervisorQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, jsq.ctx, ent.OpQueryCount)
	if err := jsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, jsq, querierCount[*JobSupervisorQuery](), jsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (jsq *JobSupervisorQuery) CountX(ctx context.Context) int {
	count, err := jsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jsq *JobSupervisorQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, jsq.ctx, ent.OpQueryExist)
	switch _, err := jsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (jsq *JobSupervisorQuery) ExistX(ctx context.Context) bool {
	exist, err := jsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the JobSupervisorQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jsq *JobSupervisorQuery) Clone() *JobSupervisorQuery {
	if jsq == nil {
		return nil
	}
	return &JobSupervisorQuery{
		config:          jsq.config,
		ctx:             jsq.ctx.Clone(),
		order:           append([]jobsupervisor.OrderOption{}, jsq.order...),
		inters:          append([]Interceptor{}, jsq.inters...),
		predicates:      append([]predicate.JobSupervisor{}, jsq.predicates...),
		withSupervisors: jsq.withSupervisors.Clone(),
		// clone intermediate query.
		sql:  jsq.sql.Clone(),
		path: jsq.path,
	}
}

// WithSupervisors tells the query-builder to eager-load the nodes that are connected to
// the "supervisors" edge. The optional arguments are used to configure the query builder of the edge.
func (jsq *JobSupervisorQuery) WithSupervisors(opts ...func(*JobRelationsQuery)) *JobSupervisorQuery {
	query := (&JobRelationsClient{config: jsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jsq.withSupervisors = query
	return jsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"Name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.JobSupervisor.Query().
//		GroupBy(jobsupervisor.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (jsq *JobSupervisorQuery) GroupBy(field string, fields ...string) *JobSupervisorGroupBy {
	jsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &JobSupervisorGroupBy{build: jsq}
	grbuild.flds = &jsq.ctx.Fields
	grbuild.label = jobsupervisor.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"Name,omitempty"`
//	}
//
//	client.JobSupervisor.Query().
//		Select(jobsupervisor.FieldName).
//		Scan(ctx, &v)
func (jsq *JobSupervisorQuery) Select(fields ...string) *JobSupervisorSelect {
	jsq.ctx.Fields = append(jsq.ctx.Fields, fields...)
	sbuild := &JobSupervisorSelect{JobSupervisorQuery: jsq}
	sbuild.label = jobsupervisor.Label
	sbuild.flds, sbuild.scan = &jsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a JobSupervisorSelect configured with the given aggregations.
func (jsq *JobSupervisorQuery) Aggregate(fns ...AggregateFunc) *JobSupervisorSelect {
	return jsq.Select().Aggregate(fns...)
}

func (jsq *JobSupervisorQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range jsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, jsq); err != nil {
				return err
			}
		}
	}
	for _, f := range jsq.ctx.Fields {
		if !jobsupervisor.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if jsq.path != nil {
		prev, err := jsq.path(ctx)
		if err != nil {
			return err
		}
		jsq.sql = prev
	}
	return nil
}

func (jsq *JobSupervisorQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*JobSupervisor, error) {
	var (
		nodes       = []*JobSupervisor{}
		_spec       = jsq.querySpec()
		loadedTypes = [1]bool{
			jsq.withSupervisors != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*JobSupervisor).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &JobSupervisor{config: jsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(jsq.modifiers) > 0 {
		_spec.Modifiers = jsq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, jsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := jsq.withSupervisors; query != nil {
		if err := jsq.loadSupervisors(ctx, query, nodes,
			func(n *JobSupervisor) { n.Edges.Supervisors = []*JobRelations{} },
			func(n *JobSupervisor, e *JobRelations) { n.Edges.Supervisors = append(n.Edges.Supervisors, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range jsq.withNamedSupervisors {
		if err := jsq.loadSupervisors(ctx, query, nodes,
			func(n *JobSupervisor) { n.appendNamedSupervisors(name) },
			func(n *JobSupervisor, e *JobRelations) { n.appendNamedSupervisors(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range jsq.loadTotal {
		if err := jsq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (jsq *JobSupervisorQuery) loadSupervisors(ctx context.Context, query *JobRelationsQuery, nodes []*JobSupervisor, init func(*JobSupervisor), assign func(*JobSupervisor, *JobRelations)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*JobSupervisor)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobRelations(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(jobsupervisor.SupervisorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.supervisor_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "supervisor_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "supervisor_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (jsq *JobSupervisorQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := jsq.querySpec()
	if len(jsq.modifiers) > 0 {
		_spec.Modifiers = jsq.modifiers
	}
	_spec.Node.Columns = jsq.ctx.Fields
	if len(jsq.ctx.Fields) > 0 {
		_spec.Unique = jsq.ctx.Unique != nil && *jsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, jsq.driver, _spec)
}

func (jsq *JobSupervisorQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(jobsupervisor.Table, jobsupervisor.Columns, sqlgraph.NewFieldSpec(jobsupervisor.FieldID, field.TypeInt))
	_spec.From = jsq.sql
	if unique := jsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if jsq.path != nil {
		_spec.Unique = true
	}
	if fields := jsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobsupervisor.FieldID)
		for i := range fields {
			if fields[i] != jobsupervisor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := jsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := jsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := jsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := jsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (jsq *JobSupervisorQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(jsq.driver.Dialect())
	t1 := builder.Table(jobsupervisor.Table)
	columns := jsq.ctx.Fields
	if len(columns) == 0 {
		columns = jobsupervisor.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if jsq.sql != nil {
		selector = jsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if jsq.ctx.Unique != nil && *jsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range jsq.predicates {
		p(selector)
	}
	for _, p := range jsq.order {
		p(selector)
	}
	if offset := jsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedSupervisors tells the query-builder to eager-load the nodes that are connected to the "supervisors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (jsq *JobSupervisorQuery) WithNamedSupervisors(name string, opts ...func(*JobRelationsQuery)) *JobSupervisorQuery {
	query := (&JobRelationsClient{config: jsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if jsq.withNamedSupervisors == nil {
		jsq.withNamedSupervisors = make(map[string]*JobRelationsQuery)
	}
	jsq.withNamedSupervisors[name] = query
	return jsq
}

// JobSupervisorGroupBy is the group-by builder for JobSupervisor entities.
type JobSupervisorGroupBy struct {
	selector
	build *JobSupervisorQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jsgb *JobSupervisorGroupBy) Aggregate(fns ...AggregateFunc) *JobSupervisorGroupBy {
	jsgb.fns = append(jsgb.fns, fns...)
	return jsgb
}

// Scan applies the selector query and scans the result into the given value.
func (jsgb *JobSupervisorGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jsgb.build.ctx, ent.OpQueryGroupBy)
	if err := jsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobSupervisorQuery, *JobSupervisorGroupBy](ctx, jsgb.build, jsgb, jsgb.build.inters, v)
}

func (jsgb *JobSupervisorGroupBy) sqlScan(ctx context.Context, root *JobSupervisorQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(jsgb.fns))
	for _, fn := range jsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*jsgb.flds)+len(jsgb.fns))
		for _, f := range *jsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*jsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// JobSupervisorSelect is the builder for selecting fields of JobSupervisor entities.
type JobSupervisorSelect struct {
	*JobSupervisorQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (jss *JobSupervisorSelect) Aggregate(fns ...AggregateFunc) *JobSupervisorSelect {
	jss.fns = append(jss.fns, fns...)
	return jss
}

// Scan applies the selector query and scans the result into the given value.
func (jss *JobSupervisorSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jss.ctx, ent.OpQuerySelect)
	if err := jss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobSupervisorQuery, *JobSupervisorSelect](ctx, jss.JobSupervisorQuery, jss, jss.inters, v)
}

func (jss *JobSupervisorSelect) sqlScan(ctx context.Context, root *JobSupervisorQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(jss.fns))
	for _, fn := range jss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*jss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
