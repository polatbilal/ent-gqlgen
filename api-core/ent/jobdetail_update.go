// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobrelations"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/predicate"
)

// JobDetailUpdate is the builder for updating JobDetail entities.
type JobDetailUpdate struct {
	config
	hooks    []Hook
	mutation *JobDetailMutation
}

// Where appends a list predicates to the JobDetailUpdate builder.
func (jdu *JobDetailUpdate) Where(ps ...predicate.JobDetail) *JobDetailUpdate {
	jdu.mutation.Where(ps...)
	return jdu
}

// SetYibfNo sets the "YibfNo" field.
func (jdu *JobDetailUpdate) SetYibfNo(i int) *JobDetailUpdate {
	jdu.mutation.ResetYibfNo()
	jdu.mutation.SetYibfNo(i)
	return jdu
}

// SetNillableYibfNo sets the "YibfNo" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableYibfNo(i *int) *JobDetailUpdate {
	if i != nil {
		jdu.SetYibfNo(*i)
	}
	return jdu
}

// AddYibfNo adds i to the "YibfNo" field.
func (jdu *JobDetailUpdate) AddYibfNo(i int) *JobDetailUpdate {
	jdu.mutation.AddYibfNo(i)
	return jdu
}

// SetTitle sets the "Title" field.
func (jdu *JobDetailUpdate) SetTitle(s string) *JobDetailUpdate {
	jdu.mutation.SetTitle(s)
	return jdu
}

// SetNillableTitle sets the "Title" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableTitle(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetTitle(*s)
	}
	return jdu
}

// ClearTitle clears the value of the "Title" field.
func (jdu *JobDetailUpdate) ClearTitle() *JobDetailUpdate {
	jdu.mutation.ClearTitle()
	return jdu
}

// SetAdministration sets the "Administration" field.
func (jdu *JobDetailUpdate) SetAdministration(s string) *JobDetailUpdate {
	jdu.mutation.SetAdministration(s)
	return jdu
}

// SetNillableAdministration sets the "Administration" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableAdministration(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetAdministration(*s)
	}
	return jdu
}

// ClearAdministration clears the value of the "Administration" field.
func (jdu *JobDetailUpdate) ClearAdministration() *JobDetailUpdate {
	jdu.mutation.ClearAdministration()
	return jdu
}

// SetState sets the "State" field.
func (jdu *JobDetailUpdate) SetState(s string) *JobDetailUpdate {
	jdu.mutation.SetState(s)
	return jdu
}

// SetNillableState sets the "State" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableState(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetState(*s)
	}
	return jdu
}

// ClearState clears the value of the "State" field.
func (jdu *JobDetailUpdate) ClearState() *JobDetailUpdate {
	jdu.mutation.ClearState()
	return jdu
}

// SetIsland sets the "Island" field.
func (jdu *JobDetailUpdate) SetIsland(s string) *JobDetailUpdate {
	jdu.mutation.SetIsland(s)
	return jdu
}

// SetNillableIsland sets the "Island" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableIsland(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetIsland(*s)
	}
	return jdu
}

// ClearIsland clears the value of the "Island" field.
func (jdu *JobDetailUpdate) ClearIsland() *JobDetailUpdate {
	jdu.mutation.ClearIsland()
	return jdu
}

// SetParcel sets the "Parcel" field.
func (jdu *JobDetailUpdate) SetParcel(s string) *JobDetailUpdate {
	jdu.mutation.SetParcel(s)
	return jdu
}

// SetNillableParcel sets the "Parcel" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableParcel(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetParcel(*s)
	}
	return jdu
}

// ClearParcel clears the value of the "Parcel" field.
func (jdu *JobDetailUpdate) ClearParcel() *JobDetailUpdate {
	jdu.mutation.ClearParcel()
	return jdu
}

// SetSheet sets the "Sheet" field.
func (jdu *JobDetailUpdate) SetSheet(s string) *JobDetailUpdate {
	jdu.mutation.SetSheet(s)
	return jdu
}

// SetNillableSheet sets the "Sheet" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableSheet(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetSheet(*s)
	}
	return jdu
}

// ClearSheet clears the value of the "Sheet" field.
func (jdu *JobDetailUpdate) ClearSheet() *JobDetailUpdate {
	jdu.mutation.ClearSheet()
	return jdu
}

// SetContractDate sets the "ContractDate" field.
func (jdu *JobDetailUpdate) SetContractDate(t time.Time) *JobDetailUpdate {
	jdu.mutation.SetContractDate(t)
	return jdu
}

// SetNillableContractDate sets the "ContractDate" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableContractDate(t *time.Time) *JobDetailUpdate {
	if t != nil {
		jdu.SetContractDate(*t)
	}
	return jdu
}

// ClearContractDate clears the value of the "ContractDate" field.
func (jdu *JobDetailUpdate) ClearContractDate() *JobDetailUpdate {
	jdu.mutation.ClearContractDate()
	return jdu
}

// SetStartDate sets the "StartDate" field.
func (jdu *JobDetailUpdate) SetStartDate(t time.Time) *JobDetailUpdate {
	jdu.mutation.SetStartDate(t)
	return jdu
}

// SetNillableStartDate sets the "StartDate" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableStartDate(t *time.Time) *JobDetailUpdate {
	if t != nil {
		jdu.SetStartDate(*t)
	}
	return jdu
}

// ClearStartDate clears the value of the "StartDate" field.
func (jdu *JobDetailUpdate) ClearStartDate() *JobDetailUpdate {
	jdu.mutation.ClearStartDate()
	return jdu
}

// SetLicenseDate sets the "LicenseDate" field.
func (jdu *JobDetailUpdate) SetLicenseDate(t time.Time) *JobDetailUpdate {
	jdu.mutation.SetLicenseDate(t)
	return jdu
}

// SetNillableLicenseDate sets the "LicenseDate" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableLicenseDate(t *time.Time) *JobDetailUpdate {
	if t != nil {
		jdu.SetLicenseDate(*t)
	}
	return jdu
}

// ClearLicenseDate clears the value of the "LicenseDate" field.
func (jdu *JobDetailUpdate) ClearLicenseDate() *JobDetailUpdate {
	jdu.mutation.ClearLicenseDate()
	return jdu
}

// SetLicenseNo sets the "LicenseNo" field.
func (jdu *JobDetailUpdate) SetLicenseNo(s string) *JobDetailUpdate {
	jdu.mutation.SetLicenseNo(s)
	return jdu
}

// SetNillableLicenseNo sets the "LicenseNo" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableLicenseNo(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetLicenseNo(*s)
	}
	return jdu
}

// ClearLicenseNo clears the value of the "LicenseNo" field.
func (jdu *JobDetailUpdate) ClearLicenseNo() *JobDetailUpdate {
	jdu.mutation.ClearLicenseNo()
	return jdu
}

// SetDistributionDate sets the "DistributionDate" field.
func (jdu *JobDetailUpdate) SetDistributionDate(t time.Time) *JobDetailUpdate {
	jdu.mutation.SetDistributionDate(t)
	return jdu
}

// SetNillableDistributionDate sets the "DistributionDate" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableDistributionDate(t *time.Time) *JobDetailUpdate {
	if t != nil {
		jdu.SetDistributionDate(*t)
	}
	return jdu
}

// ClearDistributionDate clears the value of the "DistributionDate" field.
func (jdu *JobDetailUpdate) ClearDistributionDate() *JobDetailUpdate {
	jdu.mutation.ClearDistributionDate()
	return jdu
}

// SetCompletionDate sets the "CompletionDate" field.
func (jdu *JobDetailUpdate) SetCompletionDate(t time.Time) *JobDetailUpdate {
	jdu.mutation.SetCompletionDate(t)
	return jdu
}

// SetNillableCompletionDate sets the "CompletionDate" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableCompletionDate(t *time.Time) *JobDetailUpdate {
	if t != nil {
		jdu.SetCompletionDate(*t)
	}
	return jdu
}

// ClearCompletionDate clears the value of the "CompletionDate" field.
func (jdu *JobDetailUpdate) ClearCompletionDate() *JobDetailUpdate {
	jdu.mutation.ClearCompletionDate()
	return jdu
}

// SetLandArea sets the "LandArea" field.
func (jdu *JobDetailUpdate) SetLandArea(f float64) *JobDetailUpdate {
	jdu.mutation.ResetLandArea()
	jdu.mutation.SetLandArea(f)
	return jdu
}

// SetNillableLandArea sets the "LandArea" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableLandArea(f *float64) *JobDetailUpdate {
	if f != nil {
		jdu.SetLandArea(*f)
	}
	return jdu
}

// AddLandArea adds f to the "LandArea" field.
func (jdu *JobDetailUpdate) AddLandArea(f float64) *JobDetailUpdate {
	jdu.mutation.AddLandArea(f)
	return jdu
}

// ClearLandArea clears the value of the "LandArea" field.
func (jdu *JobDetailUpdate) ClearLandArea() *JobDetailUpdate {
	jdu.mutation.ClearLandArea()
	return jdu
}

// SetTotalArea sets the "TotalArea" field.
func (jdu *JobDetailUpdate) SetTotalArea(f float64) *JobDetailUpdate {
	jdu.mutation.ResetTotalArea()
	jdu.mutation.SetTotalArea(f)
	return jdu
}

// SetNillableTotalArea sets the "TotalArea" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableTotalArea(f *float64) *JobDetailUpdate {
	if f != nil {
		jdu.SetTotalArea(*f)
	}
	return jdu
}

// AddTotalArea adds f to the "TotalArea" field.
func (jdu *JobDetailUpdate) AddTotalArea(f float64) *JobDetailUpdate {
	jdu.mutation.AddTotalArea(f)
	return jdu
}

// ClearTotalArea clears the value of the "TotalArea" field.
func (jdu *JobDetailUpdate) ClearTotalArea() *JobDetailUpdate {
	jdu.mutation.ClearTotalArea()
	return jdu
}

// SetConstructionArea sets the "ConstructionArea" field.
func (jdu *JobDetailUpdate) SetConstructionArea(f float64) *JobDetailUpdate {
	jdu.mutation.ResetConstructionArea()
	jdu.mutation.SetConstructionArea(f)
	return jdu
}

// SetNillableConstructionArea sets the "ConstructionArea" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableConstructionArea(f *float64) *JobDetailUpdate {
	if f != nil {
		jdu.SetConstructionArea(*f)
	}
	return jdu
}

// AddConstructionArea adds f to the "ConstructionArea" field.
func (jdu *JobDetailUpdate) AddConstructionArea(f float64) *JobDetailUpdate {
	jdu.mutation.AddConstructionArea(f)
	return jdu
}

// ClearConstructionArea clears the value of the "ConstructionArea" field.
func (jdu *JobDetailUpdate) ClearConstructionArea() *JobDetailUpdate {
	jdu.mutation.ClearConstructionArea()
	return jdu
}

// SetLeftArea sets the "LeftArea" field.
func (jdu *JobDetailUpdate) SetLeftArea(f float64) *JobDetailUpdate {
	jdu.mutation.ResetLeftArea()
	jdu.mutation.SetLeftArea(f)
	return jdu
}

// SetNillableLeftArea sets the "LeftArea" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableLeftArea(f *float64) *JobDetailUpdate {
	if f != nil {
		jdu.SetLeftArea(*f)
	}
	return jdu
}

// AddLeftArea adds f to the "LeftArea" field.
func (jdu *JobDetailUpdate) AddLeftArea(f float64) *JobDetailUpdate {
	jdu.mutation.AddLeftArea(f)
	return jdu
}

// ClearLeftArea clears the value of the "LeftArea" field.
func (jdu *JobDetailUpdate) ClearLeftArea() *JobDetailUpdate {
	jdu.mutation.ClearLeftArea()
	return jdu
}

// SetYDSAddress sets the "YDSAddress" field.
func (jdu *JobDetailUpdate) SetYDSAddress(s string) *JobDetailUpdate {
	jdu.mutation.SetYDSAddress(s)
	return jdu
}

// SetNillableYDSAddress sets the "YDSAddress" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableYDSAddress(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetYDSAddress(*s)
	}
	return jdu
}

// ClearYDSAddress clears the value of the "YDSAddress" field.
func (jdu *JobDetailUpdate) ClearYDSAddress() *JobDetailUpdate {
	jdu.mutation.ClearYDSAddress()
	return jdu
}

// SetAddress sets the "Address" field.
func (jdu *JobDetailUpdate) SetAddress(s string) *JobDetailUpdate {
	jdu.mutation.SetAddress(s)
	return jdu
}

// SetNillableAddress sets the "Address" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableAddress(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetAddress(*s)
	}
	return jdu
}

// ClearAddress clears the value of the "Address" field.
func (jdu *JobDetailUpdate) ClearAddress() *JobDetailUpdate {
	jdu.mutation.ClearAddress()
	return jdu
}

// SetBuildingClass sets the "BuildingClass" field.
func (jdu *JobDetailUpdate) SetBuildingClass(s string) *JobDetailUpdate {
	jdu.mutation.SetBuildingClass(s)
	return jdu
}

// SetNillableBuildingClass sets the "BuildingClass" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableBuildingClass(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetBuildingClass(*s)
	}
	return jdu
}

// ClearBuildingClass clears the value of the "BuildingClass" field.
func (jdu *JobDetailUpdate) ClearBuildingClass() *JobDetailUpdate {
	jdu.mutation.ClearBuildingClass()
	return jdu
}

// SetBuildingType sets the "BuildingType" field.
func (jdu *JobDetailUpdate) SetBuildingType(s string) *JobDetailUpdate {
	jdu.mutation.SetBuildingType(s)
	return jdu
}

// SetNillableBuildingType sets the "BuildingType" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableBuildingType(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetBuildingType(*s)
	}
	return jdu
}

// ClearBuildingType clears the value of the "BuildingType" field.
func (jdu *JobDetailUpdate) ClearBuildingType() *JobDetailUpdate {
	jdu.mutation.ClearBuildingType()
	return jdu
}

// SetLevel sets the "Level" field.
func (jdu *JobDetailUpdate) SetLevel(f float64) *JobDetailUpdate {
	jdu.mutation.ResetLevel()
	jdu.mutation.SetLevel(f)
	return jdu
}

// SetNillableLevel sets the "Level" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableLevel(f *float64) *JobDetailUpdate {
	if f != nil {
		jdu.SetLevel(*f)
	}
	return jdu
}

// AddLevel adds f to the "Level" field.
func (jdu *JobDetailUpdate) AddLevel(f float64) *JobDetailUpdate {
	jdu.mutation.AddLevel(f)
	return jdu
}

// ClearLevel clears the value of the "Level" field.
func (jdu *JobDetailUpdate) ClearLevel() *JobDetailUpdate {
	jdu.mutation.ClearLevel()
	return jdu
}

// SetUnitPrice sets the "UnitPrice" field.
func (jdu *JobDetailUpdate) SetUnitPrice(f float64) *JobDetailUpdate {
	jdu.mutation.ResetUnitPrice()
	jdu.mutation.SetUnitPrice(f)
	return jdu
}

// SetNillableUnitPrice sets the "UnitPrice" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableUnitPrice(f *float64) *JobDetailUpdate {
	if f != nil {
		jdu.SetUnitPrice(*f)
	}
	return jdu
}

// AddUnitPrice adds f to the "UnitPrice" field.
func (jdu *JobDetailUpdate) AddUnitPrice(f float64) *JobDetailUpdate {
	jdu.mutation.AddUnitPrice(f)
	return jdu
}

// ClearUnitPrice clears the value of the "UnitPrice" field.
func (jdu *JobDetailUpdate) ClearUnitPrice() *JobDetailUpdate {
	jdu.mutation.ClearUnitPrice()
	return jdu
}

// SetFloorCount sets the "FloorCount" field.
func (jdu *JobDetailUpdate) SetFloorCount(i int) *JobDetailUpdate {
	jdu.mutation.ResetFloorCount()
	jdu.mutation.SetFloorCount(i)
	return jdu
}

// SetNillableFloorCount sets the "FloorCount" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableFloorCount(i *int) *JobDetailUpdate {
	if i != nil {
		jdu.SetFloorCount(*i)
	}
	return jdu
}

// AddFloorCount adds i to the "FloorCount" field.
func (jdu *JobDetailUpdate) AddFloorCount(i int) *JobDetailUpdate {
	jdu.mutation.AddFloorCount(i)
	return jdu
}

// ClearFloorCount clears the value of the "FloorCount" field.
func (jdu *JobDetailUpdate) ClearFloorCount() *JobDetailUpdate {
	jdu.mutation.ClearFloorCount()
	return jdu
}

// SetBKSReferenceNo sets the "BKSReferenceNo" field.
func (jdu *JobDetailUpdate) SetBKSReferenceNo(i int) *JobDetailUpdate {
	jdu.mutation.ResetBKSReferenceNo()
	jdu.mutation.SetBKSReferenceNo(i)
	return jdu
}

// SetNillableBKSReferenceNo sets the "BKSReferenceNo" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableBKSReferenceNo(i *int) *JobDetailUpdate {
	if i != nil {
		jdu.SetBKSReferenceNo(*i)
	}
	return jdu
}

// AddBKSReferenceNo adds i to the "BKSReferenceNo" field.
func (jdu *JobDetailUpdate) AddBKSReferenceNo(i int) *JobDetailUpdate {
	jdu.mutation.AddBKSReferenceNo(i)
	return jdu
}

// ClearBKSReferenceNo clears the value of the "BKSReferenceNo" field.
func (jdu *JobDetailUpdate) ClearBKSReferenceNo() *JobDetailUpdate {
	jdu.mutation.ClearBKSReferenceNo()
	return jdu
}

// SetCoordinates sets the "Coordinates" field.
func (jdu *JobDetailUpdate) SetCoordinates(s string) *JobDetailUpdate {
	jdu.mutation.SetCoordinates(s)
	return jdu
}

// SetNillableCoordinates sets the "Coordinates" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableCoordinates(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetCoordinates(*s)
	}
	return jdu
}

// ClearCoordinates clears the value of the "Coordinates" field.
func (jdu *JobDetailUpdate) ClearCoordinates() *JobDetailUpdate {
	jdu.mutation.ClearCoordinates()
	return jdu
}

// SetFolderNo sets the "FolderNo" field.
func (jdu *JobDetailUpdate) SetFolderNo(s string) *JobDetailUpdate {
	jdu.mutation.SetFolderNo(s)
	return jdu
}

// SetNillableFolderNo sets the "FolderNo" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableFolderNo(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetFolderNo(*s)
	}
	return jdu
}

// ClearFolderNo clears the value of the "FolderNo" field.
func (jdu *JobDetailUpdate) ClearFolderNo() *JobDetailUpdate {
	jdu.mutation.ClearFolderNo()
	return jdu
}

// SetUploadedFile sets the "UploadedFile" field.
func (jdu *JobDetailUpdate) SetUploadedFile(b bool) *JobDetailUpdate {
	jdu.mutation.SetUploadedFile(b)
	return jdu
}

// SetNillableUploadedFile sets the "UploadedFile" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableUploadedFile(b *bool) *JobDetailUpdate {
	if b != nil {
		jdu.SetUploadedFile(*b)
	}
	return jdu
}

// ClearUploadedFile clears the value of the "UploadedFile" field.
func (jdu *JobDetailUpdate) ClearUploadedFile() *JobDetailUpdate {
	jdu.mutation.ClearUploadedFile()
	return jdu
}

// SetIndustryArea sets the "IndustryArea" field.
func (jdu *JobDetailUpdate) SetIndustryArea(b bool) *JobDetailUpdate {
	jdu.mutation.SetIndustryArea(b)
	return jdu
}

// SetNillableIndustryArea sets the "IndustryArea" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableIndustryArea(b *bool) *JobDetailUpdate {
	if b != nil {
		jdu.SetIndustryArea(*b)
	}
	return jdu
}

// ClearIndustryArea clears the value of the "IndustryArea" field.
func (jdu *JobDetailUpdate) ClearIndustryArea() *JobDetailUpdate {
	jdu.mutation.ClearIndustryArea()
	return jdu
}

// SetClusterStructure sets the "ClusterStructure" field.
func (jdu *JobDetailUpdate) SetClusterStructure(b bool) *JobDetailUpdate {
	jdu.mutation.SetClusterStructure(b)
	return jdu
}

// SetNillableClusterStructure sets the "ClusterStructure" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableClusterStructure(b *bool) *JobDetailUpdate {
	if b != nil {
		jdu.SetClusterStructure(*b)
	}
	return jdu
}

// ClearClusterStructure clears the value of the "ClusterStructure" field.
func (jdu *JobDetailUpdate) ClearClusterStructure() *JobDetailUpdate {
	jdu.mutation.ClearClusterStructure()
	return jdu
}

// SetIsLicenseExpired sets the "IsLicenseExpired" field.
func (jdu *JobDetailUpdate) SetIsLicenseExpired(b bool) *JobDetailUpdate {
	jdu.mutation.SetIsLicenseExpired(b)
	return jdu
}

// SetNillableIsLicenseExpired sets the "IsLicenseExpired" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableIsLicenseExpired(b *bool) *JobDetailUpdate {
	if b != nil {
		jdu.SetIsLicenseExpired(*b)
	}
	return jdu
}

// ClearIsLicenseExpired clears the value of the "IsLicenseExpired" field.
func (jdu *JobDetailUpdate) ClearIsLicenseExpired() *JobDetailUpdate {
	jdu.mutation.ClearIsLicenseExpired()
	return jdu
}

// SetIsCompleted sets the "IsCompleted" field.
func (jdu *JobDetailUpdate) SetIsCompleted(b bool) *JobDetailUpdate {
	jdu.mutation.SetIsCompleted(b)
	return jdu
}

// SetNillableIsCompleted sets the "IsCompleted" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableIsCompleted(b *bool) *JobDetailUpdate {
	if b != nil {
		jdu.SetIsCompleted(*b)
	}
	return jdu
}

// ClearIsCompleted clears the value of the "IsCompleted" field.
func (jdu *JobDetailUpdate) ClearIsCompleted() *JobDetailUpdate {
	jdu.mutation.ClearIsCompleted()
	return jdu
}

// SetNote sets the "Note" field.
func (jdu *JobDetailUpdate) SetNote(s string) *JobDetailUpdate {
	jdu.mutation.SetNote(s)
	return jdu
}

// SetNillableNote sets the "Note" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableNote(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetNote(*s)
	}
	return jdu
}

// ClearNote clears the value of the "Note" field.
func (jdu *JobDetailUpdate) ClearNote() *JobDetailUpdate {
	jdu.mutation.ClearNote()
	return jdu
}

// SetCreatedAt sets the "CreatedAt" field.
func (jdu *JobDetailUpdate) SetCreatedAt(t time.Time) *JobDetailUpdate {
	jdu.mutation.SetCreatedAt(t)
	return jdu
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableCreatedAt(t *time.Time) *JobDetailUpdate {
	if t != nil {
		jdu.SetCreatedAt(*t)
	}
	return jdu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (jdu *JobDetailUpdate) SetUpdatedAt(t time.Time) *JobDetailUpdate {
	jdu.mutation.SetUpdatedAt(t)
	return jdu
}

// SetRelationsID sets the "relations" edge to the JobRelations entity by ID.
func (jdu *JobDetailUpdate) SetRelationsID(id int) *JobDetailUpdate {
	jdu.mutation.SetRelationsID(id)
	return jdu
}

// SetNillableRelationsID sets the "relations" edge to the JobRelations entity by ID if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableRelationsID(id *int) *JobDetailUpdate {
	if id != nil {
		jdu = jdu.SetRelationsID(*id)
	}
	return jdu
}

// SetRelations sets the "relations" edge to the JobRelations entity.
func (jdu *JobDetailUpdate) SetRelations(j *JobRelations) *JobDetailUpdate {
	return jdu.SetRelationsID(j.ID)
}

// Mutation returns the JobDetailMutation object of the builder.
func (jdu *JobDetailUpdate) Mutation() *JobDetailMutation {
	return jdu.mutation
}

// ClearRelations clears the "relations" edge to the JobRelations entity.
func (jdu *JobDetailUpdate) ClearRelations() *JobDetailUpdate {
	jdu.mutation.ClearRelations()
	return jdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jdu *JobDetailUpdate) Save(ctx context.Context) (int, error) {
	jdu.defaults()
	return withHooks(ctx, jdu.sqlSave, jdu.mutation, jdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jdu *JobDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := jdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jdu *JobDetailUpdate) Exec(ctx context.Context) error {
	_, err := jdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jdu *JobDetailUpdate) ExecX(ctx context.Context) {
	if err := jdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jdu *JobDetailUpdate) defaults() {
	if _, ok := jdu.mutation.UpdatedAt(); !ok {
		v := jobdetail.UpdateDefaultUpdatedAt()
		jdu.mutation.SetUpdatedAt(v)
	}
}

func (jdu *JobDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(jobdetail.Table, jobdetail.Columns, sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt))
	if ps := jdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jdu.mutation.YibfNo(); ok {
		_spec.SetField(jobdetail.FieldYibfNo, field.TypeInt, value)
	}
	if value, ok := jdu.mutation.AddedYibfNo(); ok {
		_spec.AddField(jobdetail.FieldYibfNo, field.TypeInt, value)
	}
	if value, ok := jdu.mutation.Title(); ok {
		_spec.SetField(jobdetail.FieldTitle, field.TypeString, value)
	}
	if jdu.mutation.TitleCleared() {
		_spec.ClearField(jobdetail.FieldTitle, field.TypeString)
	}
	if value, ok := jdu.mutation.Administration(); ok {
		_spec.SetField(jobdetail.FieldAdministration, field.TypeString, value)
	}
	if jdu.mutation.AdministrationCleared() {
		_spec.ClearField(jobdetail.FieldAdministration, field.TypeString)
	}
	if value, ok := jdu.mutation.State(); ok {
		_spec.SetField(jobdetail.FieldState, field.TypeString, value)
	}
	if jdu.mutation.StateCleared() {
		_spec.ClearField(jobdetail.FieldState, field.TypeString)
	}
	if value, ok := jdu.mutation.Island(); ok {
		_spec.SetField(jobdetail.FieldIsland, field.TypeString, value)
	}
	if jdu.mutation.IslandCleared() {
		_spec.ClearField(jobdetail.FieldIsland, field.TypeString)
	}
	if value, ok := jdu.mutation.Parcel(); ok {
		_spec.SetField(jobdetail.FieldParcel, field.TypeString, value)
	}
	if jdu.mutation.ParcelCleared() {
		_spec.ClearField(jobdetail.FieldParcel, field.TypeString)
	}
	if value, ok := jdu.mutation.Sheet(); ok {
		_spec.SetField(jobdetail.FieldSheet, field.TypeString, value)
	}
	if jdu.mutation.SheetCleared() {
		_spec.ClearField(jobdetail.FieldSheet, field.TypeString)
	}
	if value, ok := jdu.mutation.ContractDate(); ok {
		_spec.SetField(jobdetail.FieldContractDate, field.TypeTime, value)
	}
	if jdu.mutation.ContractDateCleared() {
		_spec.ClearField(jobdetail.FieldContractDate, field.TypeTime)
	}
	if value, ok := jdu.mutation.StartDate(); ok {
		_spec.SetField(jobdetail.FieldStartDate, field.TypeTime, value)
	}
	if jdu.mutation.StartDateCleared() {
		_spec.ClearField(jobdetail.FieldStartDate, field.TypeTime)
	}
	if value, ok := jdu.mutation.LicenseDate(); ok {
		_spec.SetField(jobdetail.FieldLicenseDate, field.TypeTime, value)
	}
	if jdu.mutation.LicenseDateCleared() {
		_spec.ClearField(jobdetail.FieldLicenseDate, field.TypeTime)
	}
	if value, ok := jdu.mutation.LicenseNo(); ok {
		_spec.SetField(jobdetail.FieldLicenseNo, field.TypeString, value)
	}
	if jdu.mutation.LicenseNoCleared() {
		_spec.ClearField(jobdetail.FieldLicenseNo, field.TypeString)
	}
	if value, ok := jdu.mutation.DistributionDate(); ok {
		_spec.SetField(jobdetail.FieldDistributionDate, field.TypeTime, value)
	}
	if jdu.mutation.DistributionDateCleared() {
		_spec.ClearField(jobdetail.FieldDistributionDate, field.TypeTime)
	}
	if value, ok := jdu.mutation.CompletionDate(); ok {
		_spec.SetField(jobdetail.FieldCompletionDate, field.TypeTime, value)
	}
	if jdu.mutation.CompletionDateCleared() {
		_spec.ClearField(jobdetail.FieldCompletionDate, field.TypeTime)
	}
	if value, ok := jdu.mutation.LandArea(); ok {
		_spec.SetField(jobdetail.FieldLandArea, field.TypeFloat64, value)
	}
	if value, ok := jdu.mutation.AddedLandArea(); ok {
		_spec.AddField(jobdetail.FieldLandArea, field.TypeFloat64, value)
	}
	if jdu.mutation.LandAreaCleared() {
		_spec.ClearField(jobdetail.FieldLandArea, field.TypeFloat64)
	}
	if value, ok := jdu.mutation.TotalArea(); ok {
		_spec.SetField(jobdetail.FieldTotalArea, field.TypeFloat64, value)
	}
	if value, ok := jdu.mutation.AddedTotalArea(); ok {
		_spec.AddField(jobdetail.FieldTotalArea, field.TypeFloat64, value)
	}
	if jdu.mutation.TotalAreaCleared() {
		_spec.ClearField(jobdetail.FieldTotalArea, field.TypeFloat64)
	}
	if value, ok := jdu.mutation.ConstructionArea(); ok {
		_spec.SetField(jobdetail.FieldConstructionArea, field.TypeFloat64, value)
	}
	if value, ok := jdu.mutation.AddedConstructionArea(); ok {
		_spec.AddField(jobdetail.FieldConstructionArea, field.TypeFloat64, value)
	}
	if jdu.mutation.ConstructionAreaCleared() {
		_spec.ClearField(jobdetail.FieldConstructionArea, field.TypeFloat64)
	}
	if value, ok := jdu.mutation.LeftArea(); ok {
		_spec.SetField(jobdetail.FieldLeftArea, field.TypeFloat64, value)
	}
	if value, ok := jdu.mutation.AddedLeftArea(); ok {
		_spec.AddField(jobdetail.FieldLeftArea, field.TypeFloat64, value)
	}
	if jdu.mutation.LeftAreaCleared() {
		_spec.ClearField(jobdetail.FieldLeftArea, field.TypeFloat64)
	}
	if value, ok := jdu.mutation.YDSAddress(); ok {
		_spec.SetField(jobdetail.FieldYDSAddress, field.TypeString, value)
	}
	if jdu.mutation.YDSAddressCleared() {
		_spec.ClearField(jobdetail.FieldYDSAddress, field.TypeString)
	}
	if value, ok := jdu.mutation.Address(); ok {
		_spec.SetField(jobdetail.FieldAddress, field.TypeString, value)
	}
	if jdu.mutation.AddressCleared() {
		_spec.ClearField(jobdetail.FieldAddress, field.TypeString)
	}
	if value, ok := jdu.mutation.BuildingClass(); ok {
		_spec.SetField(jobdetail.FieldBuildingClass, field.TypeString, value)
	}
	if jdu.mutation.BuildingClassCleared() {
		_spec.ClearField(jobdetail.FieldBuildingClass, field.TypeString)
	}
	if value, ok := jdu.mutation.BuildingType(); ok {
		_spec.SetField(jobdetail.FieldBuildingType, field.TypeString, value)
	}
	if jdu.mutation.BuildingTypeCleared() {
		_spec.ClearField(jobdetail.FieldBuildingType, field.TypeString)
	}
	if value, ok := jdu.mutation.Level(); ok {
		_spec.SetField(jobdetail.FieldLevel, field.TypeFloat64, value)
	}
	if value, ok := jdu.mutation.AddedLevel(); ok {
		_spec.AddField(jobdetail.FieldLevel, field.TypeFloat64, value)
	}
	if jdu.mutation.LevelCleared() {
		_spec.ClearField(jobdetail.FieldLevel, field.TypeFloat64)
	}
	if value, ok := jdu.mutation.UnitPrice(); ok {
		_spec.SetField(jobdetail.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := jdu.mutation.AddedUnitPrice(); ok {
		_spec.AddField(jobdetail.FieldUnitPrice, field.TypeFloat64, value)
	}
	if jdu.mutation.UnitPriceCleared() {
		_spec.ClearField(jobdetail.FieldUnitPrice, field.TypeFloat64)
	}
	if value, ok := jdu.mutation.FloorCount(); ok {
		_spec.SetField(jobdetail.FieldFloorCount, field.TypeInt, value)
	}
	if value, ok := jdu.mutation.AddedFloorCount(); ok {
		_spec.AddField(jobdetail.FieldFloorCount, field.TypeInt, value)
	}
	if jdu.mutation.FloorCountCleared() {
		_spec.ClearField(jobdetail.FieldFloorCount, field.TypeInt)
	}
	if value, ok := jdu.mutation.BKSReferenceNo(); ok {
		_spec.SetField(jobdetail.FieldBKSReferenceNo, field.TypeInt, value)
	}
	if value, ok := jdu.mutation.AddedBKSReferenceNo(); ok {
		_spec.AddField(jobdetail.FieldBKSReferenceNo, field.TypeInt, value)
	}
	if jdu.mutation.BKSReferenceNoCleared() {
		_spec.ClearField(jobdetail.FieldBKSReferenceNo, field.TypeInt)
	}
	if value, ok := jdu.mutation.Coordinates(); ok {
		_spec.SetField(jobdetail.FieldCoordinates, field.TypeString, value)
	}
	if jdu.mutation.CoordinatesCleared() {
		_spec.ClearField(jobdetail.FieldCoordinates, field.TypeString)
	}
	if value, ok := jdu.mutation.FolderNo(); ok {
		_spec.SetField(jobdetail.FieldFolderNo, field.TypeString, value)
	}
	if jdu.mutation.FolderNoCleared() {
		_spec.ClearField(jobdetail.FieldFolderNo, field.TypeString)
	}
	if value, ok := jdu.mutation.UploadedFile(); ok {
		_spec.SetField(jobdetail.FieldUploadedFile, field.TypeBool, value)
	}
	if jdu.mutation.UploadedFileCleared() {
		_spec.ClearField(jobdetail.FieldUploadedFile, field.TypeBool)
	}
	if value, ok := jdu.mutation.IndustryArea(); ok {
		_spec.SetField(jobdetail.FieldIndustryArea, field.TypeBool, value)
	}
	if jdu.mutation.IndustryAreaCleared() {
		_spec.ClearField(jobdetail.FieldIndustryArea, field.TypeBool)
	}
	if value, ok := jdu.mutation.ClusterStructure(); ok {
		_spec.SetField(jobdetail.FieldClusterStructure, field.TypeBool, value)
	}
	if jdu.mutation.ClusterStructureCleared() {
		_spec.ClearField(jobdetail.FieldClusterStructure, field.TypeBool)
	}
	if value, ok := jdu.mutation.IsLicenseExpired(); ok {
		_spec.SetField(jobdetail.FieldIsLicenseExpired, field.TypeBool, value)
	}
	if jdu.mutation.IsLicenseExpiredCleared() {
		_spec.ClearField(jobdetail.FieldIsLicenseExpired, field.TypeBool)
	}
	if value, ok := jdu.mutation.IsCompleted(); ok {
		_spec.SetField(jobdetail.FieldIsCompleted, field.TypeBool, value)
	}
	if jdu.mutation.IsCompletedCleared() {
		_spec.ClearField(jobdetail.FieldIsCompleted, field.TypeBool)
	}
	if value, ok := jdu.mutation.Note(); ok {
		_spec.SetField(jobdetail.FieldNote, field.TypeString, value)
	}
	if jdu.mutation.NoteCleared() {
		_spec.ClearField(jobdetail.FieldNote, field.TypeString)
	}
	if value, ok := jdu.mutation.CreatedAt(); ok {
		_spec.SetField(jobdetail.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := jdu.mutation.UpdatedAt(); ok {
		_spec.SetField(jobdetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if jdu.mutation.RelationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   jobdetail.RelationsTable,
			Columns: []string{jobdetail.RelationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrelations.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jdu.mutation.RelationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   jobdetail.RelationsTable,
			Columns: []string{jobdetail.RelationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrelations.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jdu.mutation.done = true
	return n, nil
}

// JobDetailUpdateOne is the builder for updating a single JobDetail entity.
type JobDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobDetailMutation
}

// SetYibfNo sets the "YibfNo" field.
func (jduo *JobDetailUpdateOne) SetYibfNo(i int) *JobDetailUpdateOne {
	jduo.mutation.ResetYibfNo()
	jduo.mutation.SetYibfNo(i)
	return jduo
}

// SetNillableYibfNo sets the "YibfNo" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableYibfNo(i *int) *JobDetailUpdateOne {
	if i != nil {
		jduo.SetYibfNo(*i)
	}
	return jduo
}

// AddYibfNo adds i to the "YibfNo" field.
func (jduo *JobDetailUpdateOne) AddYibfNo(i int) *JobDetailUpdateOne {
	jduo.mutation.AddYibfNo(i)
	return jduo
}

// SetTitle sets the "Title" field.
func (jduo *JobDetailUpdateOne) SetTitle(s string) *JobDetailUpdateOne {
	jduo.mutation.SetTitle(s)
	return jduo
}

// SetNillableTitle sets the "Title" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableTitle(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetTitle(*s)
	}
	return jduo
}

// ClearTitle clears the value of the "Title" field.
func (jduo *JobDetailUpdateOne) ClearTitle() *JobDetailUpdateOne {
	jduo.mutation.ClearTitle()
	return jduo
}

// SetAdministration sets the "Administration" field.
func (jduo *JobDetailUpdateOne) SetAdministration(s string) *JobDetailUpdateOne {
	jduo.mutation.SetAdministration(s)
	return jduo
}

// SetNillableAdministration sets the "Administration" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableAdministration(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetAdministration(*s)
	}
	return jduo
}

// ClearAdministration clears the value of the "Administration" field.
func (jduo *JobDetailUpdateOne) ClearAdministration() *JobDetailUpdateOne {
	jduo.mutation.ClearAdministration()
	return jduo
}

// SetState sets the "State" field.
func (jduo *JobDetailUpdateOne) SetState(s string) *JobDetailUpdateOne {
	jduo.mutation.SetState(s)
	return jduo
}

// SetNillableState sets the "State" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableState(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetState(*s)
	}
	return jduo
}

// ClearState clears the value of the "State" field.
func (jduo *JobDetailUpdateOne) ClearState() *JobDetailUpdateOne {
	jduo.mutation.ClearState()
	return jduo
}

// SetIsland sets the "Island" field.
func (jduo *JobDetailUpdateOne) SetIsland(s string) *JobDetailUpdateOne {
	jduo.mutation.SetIsland(s)
	return jduo
}

// SetNillableIsland sets the "Island" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableIsland(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetIsland(*s)
	}
	return jduo
}

// ClearIsland clears the value of the "Island" field.
func (jduo *JobDetailUpdateOne) ClearIsland() *JobDetailUpdateOne {
	jduo.mutation.ClearIsland()
	return jduo
}

// SetParcel sets the "Parcel" field.
func (jduo *JobDetailUpdateOne) SetParcel(s string) *JobDetailUpdateOne {
	jduo.mutation.SetParcel(s)
	return jduo
}

// SetNillableParcel sets the "Parcel" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableParcel(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetParcel(*s)
	}
	return jduo
}

// ClearParcel clears the value of the "Parcel" field.
func (jduo *JobDetailUpdateOne) ClearParcel() *JobDetailUpdateOne {
	jduo.mutation.ClearParcel()
	return jduo
}

// SetSheet sets the "Sheet" field.
func (jduo *JobDetailUpdateOne) SetSheet(s string) *JobDetailUpdateOne {
	jduo.mutation.SetSheet(s)
	return jduo
}

// SetNillableSheet sets the "Sheet" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableSheet(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetSheet(*s)
	}
	return jduo
}

// ClearSheet clears the value of the "Sheet" field.
func (jduo *JobDetailUpdateOne) ClearSheet() *JobDetailUpdateOne {
	jduo.mutation.ClearSheet()
	return jduo
}

// SetContractDate sets the "ContractDate" field.
func (jduo *JobDetailUpdateOne) SetContractDate(t time.Time) *JobDetailUpdateOne {
	jduo.mutation.SetContractDate(t)
	return jduo
}

// SetNillableContractDate sets the "ContractDate" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableContractDate(t *time.Time) *JobDetailUpdateOne {
	if t != nil {
		jduo.SetContractDate(*t)
	}
	return jduo
}

// ClearContractDate clears the value of the "ContractDate" field.
func (jduo *JobDetailUpdateOne) ClearContractDate() *JobDetailUpdateOne {
	jduo.mutation.ClearContractDate()
	return jduo
}

// SetStartDate sets the "StartDate" field.
func (jduo *JobDetailUpdateOne) SetStartDate(t time.Time) *JobDetailUpdateOne {
	jduo.mutation.SetStartDate(t)
	return jduo
}

// SetNillableStartDate sets the "StartDate" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableStartDate(t *time.Time) *JobDetailUpdateOne {
	if t != nil {
		jduo.SetStartDate(*t)
	}
	return jduo
}

// ClearStartDate clears the value of the "StartDate" field.
func (jduo *JobDetailUpdateOne) ClearStartDate() *JobDetailUpdateOne {
	jduo.mutation.ClearStartDate()
	return jduo
}

// SetLicenseDate sets the "LicenseDate" field.
func (jduo *JobDetailUpdateOne) SetLicenseDate(t time.Time) *JobDetailUpdateOne {
	jduo.mutation.SetLicenseDate(t)
	return jduo
}

// SetNillableLicenseDate sets the "LicenseDate" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableLicenseDate(t *time.Time) *JobDetailUpdateOne {
	if t != nil {
		jduo.SetLicenseDate(*t)
	}
	return jduo
}

// ClearLicenseDate clears the value of the "LicenseDate" field.
func (jduo *JobDetailUpdateOne) ClearLicenseDate() *JobDetailUpdateOne {
	jduo.mutation.ClearLicenseDate()
	return jduo
}

// SetLicenseNo sets the "LicenseNo" field.
func (jduo *JobDetailUpdateOne) SetLicenseNo(s string) *JobDetailUpdateOne {
	jduo.mutation.SetLicenseNo(s)
	return jduo
}

// SetNillableLicenseNo sets the "LicenseNo" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableLicenseNo(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetLicenseNo(*s)
	}
	return jduo
}

// ClearLicenseNo clears the value of the "LicenseNo" field.
func (jduo *JobDetailUpdateOne) ClearLicenseNo() *JobDetailUpdateOne {
	jduo.mutation.ClearLicenseNo()
	return jduo
}

// SetDistributionDate sets the "DistributionDate" field.
func (jduo *JobDetailUpdateOne) SetDistributionDate(t time.Time) *JobDetailUpdateOne {
	jduo.mutation.SetDistributionDate(t)
	return jduo
}

// SetNillableDistributionDate sets the "DistributionDate" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableDistributionDate(t *time.Time) *JobDetailUpdateOne {
	if t != nil {
		jduo.SetDistributionDate(*t)
	}
	return jduo
}

// ClearDistributionDate clears the value of the "DistributionDate" field.
func (jduo *JobDetailUpdateOne) ClearDistributionDate() *JobDetailUpdateOne {
	jduo.mutation.ClearDistributionDate()
	return jduo
}

// SetCompletionDate sets the "CompletionDate" field.
func (jduo *JobDetailUpdateOne) SetCompletionDate(t time.Time) *JobDetailUpdateOne {
	jduo.mutation.SetCompletionDate(t)
	return jduo
}

// SetNillableCompletionDate sets the "CompletionDate" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableCompletionDate(t *time.Time) *JobDetailUpdateOne {
	if t != nil {
		jduo.SetCompletionDate(*t)
	}
	return jduo
}

// ClearCompletionDate clears the value of the "CompletionDate" field.
func (jduo *JobDetailUpdateOne) ClearCompletionDate() *JobDetailUpdateOne {
	jduo.mutation.ClearCompletionDate()
	return jduo
}

// SetLandArea sets the "LandArea" field.
func (jduo *JobDetailUpdateOne) SetLandArea(f float64) *JobDetailUpdateOne {
	jduo.mutation.ResetLandArea()
	jduo.mutation.SetLandArea(f)
	return jduo
}

// SetNillableLandArea sets the "LandArea" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableLandArea(f *float64) *JobDetailUpdateOne {
	if f != nil {
		jduo.SetLandArea(*f)
	}
	return jduo
}

// AddLandArea adds f to the "LandArea" field.
func (jduo *JobDetailUpdateOne) AddLandArea(f float64) *JobDetailUpdateOne {
	jduo.mutation.AddLandArea(f)
	return jduo
}

// ClearLandArea clears the value of the "LandArea" field.
func (jduo *JobDetailUpdateOne) ClearLandArea() *JobDetailUpdateOne {
	jduo.mutation.ClearLandArea()
	return jduo
}

// SetTotalArea sets the "TotalArea" field.
func (jduo *JobDetailUpdateOne) SetTotalArea(f float64) *JobDetailUpdateOne {
	jduo.mutation.ResetTotalArea()
	jduo.mutation.SetTotalArea(f)
	return jduo
}

// SetNillableTotalArea sets the "TotalArea" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableTotalArea(f *float64) *JobDetailUpdateOne {
	if f != nil {
		jduo.SetTotalArea(*f)
	}
	return jduo
}

// AddTotalArea adds f to the "TotalArea" field.
func (jduo *JobDetailUpdateOne) AddTotalArea(f float64) *JobDetailUpdateOne {
	jduo.mutation.AddTotalArea(f)
	return jduo
}

// ClearTotalArea clears the value of the "TotalArea" field.
func (jduo *JobDetailUpdateOne) ClearTotalArea() *JobDetailUpdateOne {
	jduo.mutation.ClearTotalArea()
	return jduo
}

// SetConstructionArea sets the "ConstructionArea" field.
func (jduo *JobDetailUpdateOne) SetConstructionArea(f float64) *JobDetailUpdateOne {
	jduo.mutation.ResetConstructionArea()
	jduo.mutation.SetConstructionArea(f)
	return jduo
}

// SetNillableConstructionArea sets the "ConstructionArea" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableConstructionArea(f *float64) *JobDetailUpdateOne {
	if f != nil {
		jduo.SetConstructionArea(*f)
	}
	return jduo
}

// AddConstructionArea adds f to the "ConstructionArea" field.
func (jduo *JobDetailUpdateOne) AddConstructionArea(f float64) *JobDetailUpdateOne {
	jduo.mutation.AddConstructionArea(f)
	return jduo
}

// ClearConstructionArea clears the value of the "ConstructionArea" field.
func (jduo *JobDetailUpdateOne) ClearConstructionArea() *JobDetailUpdateOne {
	jduo.mutation.ClearConstructionArea()
	return jduo
}

// SetLeftArea sets the "LeftArea" field.
func (jduo *JobDetailUpdateOne) SetLeftArea(f float64) *JobDetailUpdateOne {
	jduo.mutation.ResetLeftArea()
	jduo.mutation.SetLeftArea(f)
	return jduo
}

// SetNillableLeftArea sets the "LeftArea" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableLeftArea(f *float64) *JobDetailUpdateOne {
	if f != nil {
		jduo.SetLeftArea(*f)
	}
	return jduo
}

// AddLeftArea adds f to the "LeftArea" field.
func (jduo *JobDetailUpdateOne) AddLeftArea(f float64) *JobDetailUpdateOne {
	jduo.mutation.AddLeftArea(f)
	return jduo
}

// ClearLeftArea clears the value of the "LeftArea" field.
func (jduo *JobDetailUpdateOne) ClearLeftArea() *JobDetailUpdateOne {
	jduo.mutation.ClearLeftArea()
	return jduo
}

// SetYDSAddress sets the "YDSAddress" field.
func (jduo *JobDetailUpdateOne) SetYDSAddress(s string) *JobDetailUpdateOne {
	jduo.mutation.SetYDSAddress(s)
	return jduo
}

// SetNillableYDSAddress sets the "YDSAddress" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableYDSAddress(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetYDSAddress(*s)
	}
	return jduo
}

// ClearYDSAddress clears the value of the "YDSAddress" field.
func (jduo *JobDetailUpdateOne) ClearYDSAddress() *JobDetailUpdateOne {
	jduo.mutation.ClearYDSAddress()
	return jduo
}

// SetAddress sets the "Address" field.
func (jduo *JobDetailUpdateOne) SetAddress(s string) *JobDetailUpdateOne {
	jduo.mutation.SetAddress(s)
	return jduo
}

// SetNillableAddress sets the "Address" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableAddress(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetAddress(*s)
	}
	return jduo
}

// ClearAddress clears the value of the "Address" field.
func (jduo *JobDetailUpdateOne) ClearAddress() *JobDetailUpdateOne {
	jduo.mutation.ClearAddress()
	return jduo
}

// SetBuildingClass sets the "BuildingClass" field.
func (jduo *JobDetailUpdateOne) SetBuildingClass(s string) *JobDetailUpdateOne {
	jduo.mutation.SetBuildingClass(s)
	return jduo
}

// SetNillableBuildingClass sets the "BuildingClass" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableBuildingClass(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetBuildingClass(*s)
	}
	return jduo
}

// ClearBuildingClass clears the value of the "BuildingClass" field.
func (jduo *JobDetailUpdateOne) ClearBuildingClass() *JobDetailUpdateOne {
	jduo.mutation.ClearBuildingClass()
	return jduo
}

// SetBuildingType sets the "BuildingType" field.
func (jduo *JobDetailUpdateOne) SetBuildingType(s string) *JobDetailUpdateOne {
	jduo.mutation.SetBuildingType(s)
	return jduo
}

// SetNillableBuildingType sets the "BuildingType" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableBuildingType(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetBuildingType(*s)
	}
	return jduo
}

// ClearBuildingType clears the value of the "BuildingType" field.
func (jduo *JobDetailUpdateOne) ClearBuildingType() *JobDetailUpdateOne {
	jduo.mutation.ClearBuildingType()
	return jduo
}

// SetLevel sets the "Level" field.
func (jduo *JobDetailUpdateOne) SetLevel(f float64) *JobDetailUpdateOne {
	jduo.mutation.ResetLevel()
	jduo.mutation.SetLevel(f)
	return jduo
}

// SetNillableLevel sets the "Level" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableLevel(f *float64) *JobDetailUpdateOne {
	if f != nil {
		jduo.SetLevel(*f)
	}
	return jduo
}

// AddLevel adds f to the "Level" field.
func (jduo *JobDetailUpdateOne) AddLevel(f float64) *JobDetailUpdateOne {
	jduo.mutation.AddLevel(f)
	return jduo
}

// ClearLevel clears the value of the "Level" field.
func (jduo *JobDetailUpdateOne) ClearLevel() *JobDetailUpdateOne {
	jduo.mutation.ClearLevel()
	return jduo
}

// SetUnitPrice sets the "UnitPrice" field.
func (jduo *JobDetailUpdateOne) SetUnitPrice(f float64) *JobDetailUpdateOne {
	jduo.mutation.ResetUnitPrice()
	jduo.mutation.SetUnitPrice(f)
	return jduo
}

// SetNillableUnitPrice sets the "UnitPrice" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableUnitPrice(f *float64) *JobDetailUpdateOne {
	if f != nil {
		jduo.SetUnitPrice(*f)
	}
	return jduo
}

// AddUnitPrice adds f to the "UnitPrice" field.
func (jduo *JobDetailUpdateOne) AddUnitPrice(f float64) *JobDetailUpdateOne {
	jduo.mutation.AddUnitPrice(f)
	return jduo
}

// ClearUnitPrice clears the value of the "UnitPrice" field.
func (jduo *JobDetailUpdateOne) ClearUnitPrice() *JobDetailUpdateOne {
	jduo.mutation.ClearUnitPrice()
	return jduo
}

// SetFloorCount sets the "FloorCount" field.
func (jduo *JobDetailUpdateOne) SetFloorCount(i int) *JobDetailUpdateOne {
	jduo.mutation.ResetFloorCount()
	jduo.mutation.SetFloorCount(i)
	return jduo
}

// SetNillableFloorCount sets the "FloorCount" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableFloorCount(i *int) *JobDetailUpdateOne {
	if i != nil {
		jduo.SetFloorCount(*i)
	}
	return jduo
}

// AddFloorCount adds i to the "FloorCount" field.
func (jduo *JobDetailUpdateOne) AddFloorCount(i int) *JobDetailUpdateOne {
	jduo.mutation.AddFloorCount(i)
	return jduo
}

// ClearFloorCount clears the value of the "FloorCount" field.
func (jduo *JobDetailUpdateOne) ClearFloorCount() *JobDetailUpdateOne {
	jduo.mutation.ClearFloorCount()
	return jduo
}

// SetBKSReferenceNo sets the "BKSReferenceNo" field.
func (jduo *JobDetailUpdateOne) SetBKSReferenceNo(i int) *JobDetailUpdateOne {
	jduo.mutation.ResetBKSReferenceNo()
	jduo.mutation.SetBKSReferenceNo(i)
	return jduo
}

// SetNillableBKSReferenceNo sets the "BKSReferenceNo" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableBKSReferenceNo(i *int) *JobDetailUpdateOne {
	if i != nil {
		jduo.SetBKSReferenceNo(*i)
	}
	return jduo
}

// AddBKSReferenceNo adds i to the "BKSReferenceNo" field.
func (jduo *JobDetailUpdateOne) AddBKSReferenceNo(i int) *JobDetailUpdateOne {
	jduo.mutation.AddBKSReferenceNo(i)
	return jduo
}

// ClearBKSReferenceNo clears the value of the "BKSReferenceNo" field.
func (jduo *JobDetailUpdateOne) ClearBKSReferenceNo() *JobDetailUpdateOne {
	jduo.mutation.ClearBKSReferenceNo()
	return jduo
}

// SetCoordinates sets the "Coordinates" field.
func (jduo *JobDetailUpdateOne) SetCoordinates(s string) *JobDetailUpdateOne {
	jduo.mutation.SetCoordinates(s)
	return jduo
}

// SetNillableCoordinates sets the "Coordinates" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableCoordinates(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetCoordinates(*s)
	}
	return jduo
}

// ClearCoordinates clears the value of the "Coordinates" field.
func (jduo *JobDetailUpdateOne) ClearCoordinates() *JobDetailUpdateOne {
	jduo.mutation.ClearCoordinates()
	return jduo
}

// SetFolderNo sets the "FolderNo" field.
func (jduo *JobDetailUpdateOne) SetFolderNo(s string) *JobDetailUpdateOne {
	jduo.mutation.SetFolderNo(s)
	return jduo
}

// SetNillableFolderNo sets the "FolderNo" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableFolderNo(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetFolderNo(*s)
	}
	return jduo
}

// ClearFolderNo clears the value of the "FolderNo" field.
func (jduo *JobDetailUpdateOne) ClearFolderNo() *JobDetailUpdateOne {
	jduo.mutation.ClearFolderNo()
	return jduo
}

// SetUploadedFile sets the "UploadedFile" field.
func (jduo *JobDetailUpdateOne) SetUploadedFile(b bool) *JobDetailUpdateOne {
	jduo.mutation.SetUploadedFile(b)
	return jduo
}

// SetNillableUploadedFile sets the "UploadedFile" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableUploadedFile(b *bool) *JobDetailUpdateOne {
	if b != nil {
		jduo.SetUploadedFile(*b)
	}
	return jduo
}

// ClearUploadedFile clears the value of the "UploadedFile" field.
func (jduo *JobDetailUpdateOne) ClearUploadedFile() *JobDetailUpdateOne {
	jduo.mutation.ClearUploadedFile()
	return jduo
}

// SetIndustryArea sets the "IndustryArea" field.
func (jduo *JobDetailUpdateOne) SetIndustryArea(b bool) *JobDetailUpdateOne {
	jduo.mutation.SetIndustryArea(b)
	return jduo
}

// SetNillableIndustryArea sets the "IndustryArea" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableIndustryArea(b *bool) *JobDetailUpdateOne {
	if b != nil {
		jduo.SetIndustryArea(*b)
	}
	return jduo
}

// ClearIndustryArea clears the value of the "IndustryArea" field.
func (jduo *JobDetailUpdateOne) ClearIndustryArea() *JobDetailUpdateOne {
	jduo.mutation.ClearIndustryArea()
	return jduo
}

// SetClusterStructure sets the "ClusterStructure" field.
func (jduo *JobDetailUpdateOne) SetClusterStructure(b bool) *JobDetailUpdateOne {
	jduo.mutation.SetClusterStructure(b)
	return jduo
}

// SetNillableClusterStructure sets the "ClusterStructure" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableClusterStructure(b *bool) *JobDetailUpdateOne {
	if b != nil {
		jduo.SetClusterStructure(*b)
	}
	return jduo
}

// ClearClusterStructure clears the value of the "ClusterStructure" field.
func (jduo *JobDetailUpdateOne) ClearClusterStructure() *JobDetailUpdateOne {
	jduo.mutation.ClearClusterStructure()
	return jduo
}

// SetIsLicenseExpired sets the "IsLicenseExpired" field.
func (jduo *JobDetailUpdateOne) SetIsLicenseExpired(b bool) *JobDetailUpdateOne {
	jduo.mutation.SetIsLicenseExpired(b)
	return jduo
}

// SetNillableIsLicenseExpired sets the "IsLicenseExpired" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableIsLicenseExpired(b *bool) *JobDetailUpdateOne {
	if b != nil {
		jduo.SetIsLicenseExpired(*b)
	}
	return jduo
}

// ClearIsLicenseExpired clears the value of the "IsLicenseExpired" field.
func (jduo *JobDetailUpdateOne) ClearIsLicenseExpired() *JobDetailUpdateOne {
	jduo.mutation.ClearIsLicenseExpired()
	return jduo
}

// SetIsCompleted sets the "IsCompleted" field.
func (jduo *JobDetailUpdateOne) SetIsCompleted(b bool) *JobDetailUpdateOne {
	jduo.mutation.SetIsCompleted(b)
	return jduo
}

// SetNillableIsCompleted sets the "IsCompleted" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableIsCompleted(b *bool) *JobDetailUpdateOne {
	if b != nil {
		jduo.SetIsCompleted(*b)
	}
	return jduo
}

// ClearIsCompleted clears the value of the "IsCompleted" field.
func (jduo *JobDetailUpdateOne) ClearIsCompleted() *JobDetailUpdateOne {
	jduo.mutation.ClearIsCompleted()
	return jduo
}

// SetNote sets the "Note" field.
func (jduo *JobDetailUpdateOne) SetNote(s string) *JobDetailUpdateOne {
	jduo.mutation.SetNote(s)
	return jduo
}

// SetNillableNote sets the "Note" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableNote(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetNote(*s)
	}
	return jduo
}

// ClearNote clears the value of the "Note" field.
func (jduo *JobDetailUpdateOne) ClearNote() *JobDetailUpdateOne {
	jduo.mutation.ClearNote()
	return jduo
}

// SetCreatedAt sets the "CreatedAt" field.
func (jduo *JobDetailUpdateOne) SetCreatedAt(t time.Time) *JobDetailUpdateOne {
	jduo.mutation.SetCreatedAt(t)
	return jduo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableCreatedAt(t *time.Time) *JobDetailUpdateOne {
	if t != nil {
		jduo.SetCreatedAt(*t)
	}
	return jduo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (jduo *JobDetailUpdateOne) SetUpdatedAt(t time.Time) *JobDetailUpdateOne {
	jduo.mutation.SetUpdatedAt(t)
	return jduo
}

// SetRelationsID sets the "relations" edge to the JobRelations entity by ID.
func (jduo *JobDetailUpdateOne) SetRelationsID(id int) *JobDetailUpdateOne {
	jduo.mutation.SetRelationsID(id)
	return jduo
}

// SetNillableRelationsID sets the "relations" edge to the JobRelations entity by ID if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableRelationsID(id *int) *JobDetailUpdateOne {
	if id != nil {
		jduo = jduo.SetRelationsID(*id)
	}
	return jduo
}

// SetRelations sets the "relations" edge to the JobRelations entity.
func (jduo *JobDetailUpdateOne) SetRelations(j *JobRelations) *JobDetailUpdateOne {
	return jduo.SetRelationsID(j.ID)
}

// Mutation returns the JobDetailMutation object of the builder.
func (jduo *JobDetailUpdateOne) Mutation() *JobDetailMutation {
	return jduo.mutation
}

// ClearRelations clears the "relations" edge to the JobRelations entity.
func (jduo *JobDetailUpdateOne) ClearRelations() *JobDetailUpdateOne {
	jduo.mutation.ClearRelations()
	return jduo
}

// Where appends a list predicates to the JobDetailUpdate builder.
func (jduo *JobDetailUpdateOne) Where(ps ...predicate.JobDetail) *JobDetailUpdateOne {
	jduo.mutation.Where(ps...)
	return jduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jduo *JobDetailUpdateOne) Select(field string, fields ...string) *JobDetailUpdateOne {
	jduo.fields = append([]string{field}, fields...)
	return jduo
}

// Save executes the query and returns the updated JobDetail entity.
func (jduo *JobDetailUpdateOne) Save(ctx context.Context) (*JobDetail, error) {
	jduo.defaults()
	return withHooks(ctx, jduo.sqlSave, jduo.mutation, jduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jduo *JobDetailUpdateOne) SaveX(ctx context.Context) *JobDetail {
	node, err := jduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jduo *JobDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := jduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jduo *JobDetailUpdateOne) ExecX(ctx context.Context) {
	if err := jduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jduo *JobDetailUpdateOne) defaults() {
	if _, ok := jduo.mutation.UpdatedAt(); !ok {
		v := jobdetail.UpdateDefaultUpdatedAt()
		jduo.mutation.SetUpdatedAt(v)
	}
}

func (jduo *JobDetailUpdateOne) sqlSave(ctx context.Context) (_node *JobDetail, err error) {
	_spec := sqlgraph.NewUpdateSpec(jobdetail.Table, jobdetail.Columns, sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt))
	id, ok := jduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JobDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobdetail.FieldID)
		for _, f := range fields {
			if !jobdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jobdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jduo.mutation.YibfNo(); ok {
		_spec.SetField(jobdetail.FieldYibfNo, field.TypeInt, value)
	}
	if value, ok := jduo.mutation.AddedYibfNo(); ok {
		_spec.AddField(jobdetail.FieldYibfNo, field.TypeInt, value)
	}
	if value, ok := jduo.mutation.Title(); ok {
		_spec.SetField(jobdetail.FieldTitle, field.TypeString, value)
	}
	if jduo.mutation.TitleCleared() {
		_spec.ClearField(jobdetail.FieldTitle, field.TypeString)
	}
	if value, ok := jduo.mutation.Administration(); ok {
		_spec.SetField(jobdetail.FieldAdministration, field.TypeString, value)
	}
	if jduo.mutation.AdministrationCleared() {
		_spec.ClearField(jobdetail.FieldAdministration, field.TypeString)
	}
	if value, ok := jduo.mutation.State(); ok {
		_spec.SetField(jobdetail.FieldState, field.TypeString, value)
	}
	if jduo.mutation.StateCleared() {
		_spec.ClearField(jobdetail.FieldState, field.TypeString)
	}
	if value, ok := jduo.mutation.Island(); ok {
		_spec.SetField(jobdetail.FieldIsland, field.TypeString, value)
	}
	if jduo.mutation.IslandCleared() {
		_spec.ClearField(jobdetail.FieldIsland, field.TypeString)
	}
	if value, ok := jduo.mutation.Parcel(); ok {
		_spec.SetField(jobdetail.FieldParcel, field.TypeString, value)
	}
	if jduo.mutation.ParcelCleared() {
		_spec.ClearField(jobdetail.FieldParcel, field.TypeString)
	}
	if value, ok := jduo.mutation.Sheet(); ok {
		_spec.SetField(jobdetail.FieldSheet, field.TypeString, value)
	}
	if jduo.mutation.SheetCleared() {
		_spec.ClearField(jobdetail.FieldSheet, field.TypeString)
	}
	if value, ok := jduo.mutation.ContractDate(); ok {
		_spec.SetField(jobdetail.FieldContractDate, field.TypeTime, value)
	}
	if jduo.mutation.ContractDateCleared() {
		_spec.ClearField(jobdetail.FieldContractDate, field.TypeTime)
	}
	if value, ok := jduo.mutation.StartDate(); ok {
		_spec.SetField(jobdetail.FieldStartDate, field.TypeTime, value)
	}
	if jduo.mutation.StartDateCleared() {
		_spec.ClearField(jobdetail.FieldStartDate, field.TypeTime)
	}
	if value, ok := jduo.mutation.LicenseDate(); ok {
		_spec.SetField(jobdetail.FieldLicenseDate, field.TypeTime, value)
	}
	if jduo.mutation.LicenseDateCleared() {
		_spec.ClearField(jobdetail.FieldLicenseDate, field.TypeTime)
	}
	if value, ok := jduo.mutation.LicenseNo(); ok {
		_spec.SetField(jobdetail.FieldLicenseNo, field.TypeString, value)
	}
	if jduo.mutation.LicenseNoCleared() {
		_spec.ClearField(jobdetail.FieldLicenseNo, field.TypeString)
	}
	if value, ok := jduo.mutation.DistributionDate(); ok {
		_spec.SetField(jobdetail.FieldDistributionDate, field.TypeTime, value)
	}
	if jduo.mutation.DistributionDateCleared() {
		_spec.ClearField(jobdetail.FieldDistributionDate, field.TypeTime)
	}
	if value, ok := jduo.mutation.CompletionDate(); ok {
		_spec.SetField(jobdetail.FieldCompletionDate, field.TypeTime, value)
	}
	if jduo.mutation.CompletionDateCleared() {
		_spec.ClearField(jobdetail.FieldCompletionDate, field.TypeTime)
	}
	if value, ok := jduo.mutation.LandArea(); ok {
		_spec.SetField(jobdetail.FieldLandArea, field.TypeFloat64, value)
	}
	if value, ok := jduo.mutation.AddedLandArea(); ok {
		_spec.AddField(jobdetail.FieldLandArea, field.TypeFloat64, value)
	}
	if jduo.mutation.LandAreaCleared() {
		_spec.ClearField(jobdetail.FieldLandArea, field.TypeFloat64)
	}
	if value, ok := jduo.mutation.TotalArea(); ok {
		_spec.SetField(jobdetail.FieldTotalArea, field.TypeFloat64, value)
	}
	if value, ok := jduo.mutation.AddedTotalArea(); ok {
		_spec.AddField(jobdetail.FieldTotalArea, field.TypeFloat64, value)
	}
	if jduo.mutation.TotalAreaCleared() {
		_spec.ClearField(jobdetail.FieldTotalArea, field.TypeFloat64)
	}
	if value, ok := jduo.mutation.ConstructionArea(); ok {
		_spec.SetField(jobdetail.FieldConstructionArea, field.TypeFloat64, value)
	}
	if value, ok := jduo.mutation.AddedConstructionArea(); ok {
		_spec.AddField(jobdetail.FieldConstructionArea, field.TypeFloat64, value)
	}
	if jduo.mutation.ConstructionAreaCleared() {
		_spec.ClearField(jobdetail.FieldConstructionArea, field.TypeFloat64)
	}
	if value, ok := jduo.mutation.LeftArea(); ok {
		_spec.SetField(jobdetail.FieldLeftArea, field.TypeFloat64, value)
	}
	if value, ok := jduo.mutation.AddedLeftArea(); ok {
		_spec.AddField(jobdetail.FieldLeftArea, field.TypeFloat64, value)
	}
	if jduo.mutation.LeftAreaCleared() {
		_spec.ClearField(jobdetail.FieldLeftArea, field.TypeFloat64)
	}
	if value, ok := jduo.mutation.YDSAddress(); ok {
		_spec.SetField(jobdetail.FieldYDSAddress, field.TypeString, value)
	}
	if jduo.mutation.YDSAddressCleared() {
		_spec.ClearField(jobdetail.FieldYDSAddress, field.TypeString)
	}
	if value, ok := jduo.mutation.Address(); ok {
		_spec.SetField(jobdetail.FieldAddress, field.TypeString, value)
	}
	if jduo.mutation.AddressCleared() {
		_spec.ClearField(jobdetail.FieldAddress, field.TypeString)
	}
	if value, ok := jduo.mutation.BuildingClass(); ok {
		_spec.SetField(jobdetail.FieldBuildingClass, field.TypeString, value)
	}
	if jduo.mutation.BuildingClassCleared() {
		_spec.ClearField(jobdetail.FieldBuildingClass, field.TypeString)
	}
	if value, ok := jduo.mutation.BuildingType(); ok {
		_spec.SetField(jobdetail.FieldBuildingType, field.TypeString, value)
	}
	if jduo.mutation.BuildingTypeCleared() {
		_spec.ClearField(jobdetail.FieldBuildingType, field.TypeString)
	}
	if value, ok := jduo.mutation.Level(); ok {
		_spec.SetField(jobdetail.FieldLevel, field.TypeFloat64, value)
	}
	if value, ok := jduo.mutation.AddedLevel(); ok {
		_spec.AddField(jobdetail.FieldLevel, field.TypeFloat64, value)
	}
	if jduo.mutation.LevelCleared() {
		_spec.ClearField(jobdetail.FieldLevel, field.TypeFloat64)
	}
	if value, ok := jduo.mutation.UnitPrice(); ok {
		_spec.SetField(jobdetail.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := jduo.mutation.AddedUnitPrice(); ok {
		_spec.AddField(jobdetail.FieldUnitPrice, field.TypeFloat64, value)
	}
	if jduo.mutation.UnitPriceCleared() {
		_spec.ClearField(jobdetail.FieldUnitPrice, field.TypeFloat64)
	}
	if value, ok := jduo.mutation.FloorCount(); ok {
		_spec.SetField(jobdetail.FieldFloorCount, field.TypeInt, value)
	}
	if value, ok := jduo.mutation.AddedFloorCount(); ok {
		_spec.AddField(jobdetail.FieldFloorCount, field.TypeInt, value)
	}
	if jduo.mutation.FloorCountCleared() {
		_spec.ClearField(jobdetail.FieldFloorCount, field.TypeInt)
	}
	if value, ok := jduo.mutation.BKSReferenceNo(); ok {
		_spec.SetField(jobdetail.FieldBKSReferenceNo, field.TypeInt, value)
	}
	if value, ok := jduo.mutation.AddedBKSReferenceNo(); ok {
		_spec.AddField(jobdetail.FieldBKSReferenceNo, field.TypeInt, value)
	}
	if jduo.mutation.BKSReferenceNoCleared() {
		_spec.ClearField(jobdetail.FieldBKSReferenceNo, field.TypeInt)
	}
	if value, ok := jduo.mutation.Coordinates(); ok {
		_spec.SetField(jobdetail.FieldCoordinates, field.TypeString, value)
	}
	if jduo.mutation.CoordinatesCleared() {
		_spec.ClearField(jobdetail.FieldCoordinates, field.TypeString)
	}
	if value, ok := jduo.mutation.FolderNo(); ok {
		_spec.SetField(jobdetail.FieldFolderNo, field.TypeString, value)
	}
	if jduo.mutation.FolderNoCleared() {
		_spec.ClearField(jobdetail.FieldFolderNo, field.TypeString)
	}
	if value, ok := jduo.mutation.UploadedFile(); ok {
		_spec.SetField(jobdetail.FieldUploadedFile, field.TypeBool, value)
	}
	if jduo.mutation.UploadedFileCleared() {
		_spec.ClearField(jobdetail.FieldUploadedFile, field.TypeBool)
	}
	if value, ok := jduo.mutation.IndustryArea(); ok {
		_spec.SetField(jobdetail.FieldIndustryArea, field.TypeBool, value)
	}
	if jduo.mutation.IndustryAreaCleared() {
		_spec.ClearField(jobdetail.FieldIndustryArea, field.TypeBool)
	}
	if value, ok := jduo.mutation.ClusterStructure(); ok {
		_spec.SetField(jobdetail.FieldClusterStructure, field.TypeBool, value)
	}
	if jduo.mutation.ClusterStructureCleared() {
		_spec.ClearField(jobdetail.FieldClusterStructure, field.TypeBool)
	}
	if value, ok := jduo.mutation.IsLicenseExpired(); ok {
		_spec.SetField(jobdetail.FieldIsLicenseExpired, field.TypeBool, value)
	}
	if jduo.mutation.IsLicenseExpiredCleared() {
		_spec.ClearField(jobdetail.FieldIsLicenseExpired, field.TypeBool)
	}
	if value, ok := jduo.mutation.IsCompleted(); ok {
		_spec.SetField(jobdetail.FieldIsCompleted, field.TypeBool, value)
	}
	if jduo.mutation.IsCompletedCleared() {
		_spec.ClearField(jobdetail.FieldIsCompleted, field.TypeBool)
	}
	if value, ok := jduo.mutation.Note(); ok {
		_spec.SetField(jobdetail.FieldNote, field.TypeString, value)
	}
	if jduo.mutation.NoteCleared() {
		_spec.ClearField(jobdetail.FieldNote, field.TypeString)
	}
	if value, ok := jduo.mutation.CreatedAt(); ok {
		_spec.SetField(jobdetail.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := jduo.mutation.UpdatedAt(); ok {
		_spec.SetField(jobdetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if jduo.mutation.RelationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   jobdetail.RelationsTable,
			Columns: []string{jobdetail.RelationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrelations.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduo.mutation.RelationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   jobdetail.RelationsTable,
			Columns: []string{jobdetail.RelationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrelations.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &JobDetail{config: jduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jduo.mutation.done = true
	return _node, nil
}
