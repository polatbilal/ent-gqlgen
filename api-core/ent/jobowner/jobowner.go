// Code generated by ent, DO NOT EDIT.

package jobowner

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the jobowner type in the database.
	Label = "job_owner"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldTcNo holds the string denoting the tcno field in the database.
	FieldTcNo = "tc_no"
	// FieldTaxAdmin holds the string denoting the taxadmin field in the database.
	FieldTaxAdmin = "tax_admin"
	// FieldTaxNo holds the string denoting the taxno field in the database.
	FieldTaxNo = "tax_no"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldYDSID holds the string denoting the ydsid field in the database.
	FieldYDSID = "ydsid"
	// FieldShareholder holds the string denoting the shareholder field in the database.
	FieldShareholder = "shareholder"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOwners holds the string denoting the owners edge name in mutations.
	EdgeOwners = "owners"
	// Table holds the table name of the jobowner in the database.
	Table = "job_owners"
	// OwnersTable is the table that holds the owners relation/edge.
	OwnersTable = "job_relations"
	// OwnersInverseTable is the table name for the JobRelations entity.
	// It exists in this package in order to avoid circular dependency with the "jobrelations" package.
	OwnersInverseTable = "job_relations"
	// OwnersColumn is the table column denoting the owners relation/edge.
	OwnersColumn = "owner_id"
)

// Columns holds all SQL columns for jobowner fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAddress,
	FieldTcNo,
	FieldTaxAdmin,
	FieldTaxNo,
	FieldPhone,
	FieldEmail,
	FieldYDSID,
	FieldShareholder,
	FieldNote,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "Name" field.
	DefaultName string
	// DefaultShareholder holds the default value on creation for the "Shareholder" field.
	DefaultShareholder bool
	// DefaultCreatedAt holds the default value on creation for the "CreatedAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "UpdatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "UpdatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the JobOwner queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the Name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAddress orders the results by the Address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByTcNo orders the results by the TcNo field.
func ByTcNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTcNo, opts...).ToFunc()
}

// ByTaxAdmin orders the results by the TaxAdmin field.
func ByTaxAdmin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxAdmin, opts...).ToFunc()
}

// ByTaxNo orders the results by the TaxNo field.
func ByTaxNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxNo, opts...).ToFunc()
}

// ByPhone orders the results by the Phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByEmail orders the results by the Email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByYDSID orders the results by the YDSID field.
func ByYDSID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYDSID, opts...).ToFunc()
}

// ByShareholder orders the results by the Shareholder field.
func ByShareholder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShareholder, opts...).ToFunc()
}

// ByNote orders the results by the Note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOwnersCount orders the results by owners count.
func ByOwnersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnersStep(), opts...)
	}
}

// ByOwners orders the results by owners terms.
func ByOwners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OwnersTable, OwnersColumn),
	)
}
