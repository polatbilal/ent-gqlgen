// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobsupervisor"
)

// JobSupervisor is the model entity for the JobSupervisor schema.
type JobSupervisor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Address holds the value of the "Address" field.
	Address string `json:"Address,omitempty"`
	// Phone holds the value of the "Phone" field.
	Phone string `json:"Phone,omitempty"`
	// Email holds the value of the "Email" field.
	Email string `json:"Email,omitempty"`
	// TcNo holds the value of the "TcNo" field.
	TcNo int `json:"TcNo,omitempty"`
	// Position holds the value of the "Position" field.
	Position string `json:"Position,omitempty"`
	// Career holds the value of the "Career" field.
	Career string `json:"Career,omitempty"`
	// RegisterNo holds the value of the "RegisterNo" field.
	RegisterNo int `json:"RegisterNo,omitempty"`
	// SocialSecurityNo holds the value of the "SocialSecurityNo" field.
	SocialSecurityNo int `json:"SocialSecurityNo,omitempty"`
	// SchoolGraduation holds the value of the "SchoolGraduation" field.
	SchoolGraduation string `json:"SchoolGraduation,omitempty"`
	// YDSID holds the value of the "YDSID" field.
	YDSID int `json:"YDSID,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobSupervisorQuery when eager-loading is set.
	Edges        JobSupervisorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// JobSupervisorEdges holds the relations/edges for other nodes in the graph.
type JobSupervisorEdges struct {
	// Supervisors holds the value of the supervisors edge.
	Supervisors []*JobDetail `json:"supervisors,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedSupervisors map[string][]*JobDetail
}

// SupervisorsOrErr returns the Supervisors value or an error if the edge
// was not loaded in eager-loading.
func (e JobSupervisorEdges) SupervisorsOrErr() ([]*JobDetail, error) {
	if e.loadedTypes[0] {
		return e.Supervisors, nil
	}
	return nil, &NotLoadedError{edge: "supervisors"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobSupervisor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobsupervisor.FieldID, jobsupervisor.FieldTcNo, jobsupervisor.FieldRegisterNo, jobsupervisor.FieldSocialSecurityNo, jobsupervisor.FieldYDSID:
			values[i] = new(sql.NullInt64)
		case jobsupervisor.FieldName, jobsupervisor.FieldAddress, jobsupervisor.FieldPhone, jobsupervisor.FieldEmail, jobsupervisor.FieldPosition, jobsupervisor.FieldCareer, jobsupervisor.FieldSchoolGraduation:
			values[i] = new(sql.NullString)
		case jobsupervisor.FieldCreatedAt, jobsupervisor.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobSupervisor fields.
func (js *JobSupervisor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobsupervisor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			js.ID = int(value.Int64)
		case jobsupervisor.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				js.Name = value.String
			}
		case jobsupervisor.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Address", values[i])
			} else if value.Valid {
				js.Address = value.String
			}
		case jobsupervisor.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Phone", values[i])
			} else if value.Valid {
				js.Phone = value.String
			}
		case jobsupervisor.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Email", values[i])
			} else if value.Valid {
				js.Email = value.String
			}
		case jobsupervisor.FieldTcNo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field TcNo", values[i])
			} else if value.Valid {
				js.TcNo = int(value.Int64)
			}
		case jobsupervisor.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Position", values[i])
			} else if value.Valid {
				js.Position = value.String
			}
		case jobsupervisor.FieldCareer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Career", values[i])
			} else if value.Valid {
				js.Career = value.String
			}
		case jobsupervisor.FieldRegisterNo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RegisterNo", values[i])
			} else if value.Valid {
				js.RegisterNo = int(value.Int64)
			}
		case jobsupervisor.FieldSocialSecurityNo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field SocialSecurityNo", values[i])
			} else if value.Valid {
				js.SocialSecurityNo = int(value.Int64)
			}
		case jobsupervisor.FieldSchoolGraduation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SchoolGraduation", values[i])
			} else if value.Valid {
				js.SchoolGraduation = value.String
			}
		case jobsupervisor.FieldYDSID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field YDSID", values[i])
			} else if value.Valid {
				js.YDSID = int(value.Int64)
			}
		case jobsupervisor.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				js.CreatedAt = value.Time
			}
		case jobsupervisor.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				js.UpdatedAt = value.Time
			}
		default:
			js.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobSupervisor.
// This includes values selected through modifiers, order, etc.
func (js *JobSupervisor) Value(name string) (ent.Value, error) {
	return js.selectValues.Get(name)
}

// QuerySupervisors queries the "supervisors" edge of the JobSupervisor entity.
func (js *JobSupervisor) QuerySupervisors() *JobDetailQuery {
	return NewJobSupervisorClient(js.config).QuerySupervisors(js)
}

// Update returns a builder for updating this JobSupervisor.
// Note that you need to call JobSupervisor.Unwrap() before calling this method if this JobSupervisor
// was returned from a transaction, and the transaction was committed or rolled back.
func (js *JobSupervisor) Update() *JobSupervisorUpdateOne {
	return NewJobSupervisorClient(js.config).UpdateOne(js)
}

// Unwrap unwraps the JobSupervisor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (js *JobSupervisor) Unwrap() *JobSupervisor {
	_tx, ok := js.config.driver.(*txDriver)
	if !ok {
		panic("ent: JobSupervisor is not a transactional entity")
	}
	js.config.driver = _tx.drv
	return js
}

// String implements the fmt.Stringer.
func (js *JobSupervisor) String() string {
	var builder strings.Builder
	builder.WriteString("JobSupervisor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", js.ID))
	builder.WriteString("Name=")
	builder.WriteString(js.Name)
	builder.WriteString(", ")
	builder.WriteString("Address=")
	builder.WriteString(js.Address)
	builder.WriteString(", ")
	builder.WriteString("Phone=")
	builder.WriteString(js.Phone)
	builder.WriteString(", ")
	builder.WriteString("Email=")
	builder.WriteString(js.Email)
	builder.WriteString(", ")
	builder.WriteString("TcNo=")
	builder.WriteString(fmt.Sprintf("%v", js.TcNo))
	builder.WriteString(", ")
	builder.WriteString("Position=")
	builder.WriteString(js.Position)
	builder.WriteString(", ")
	builder.WriteString("Career=")
	builder.WriteString(js.Career)
	builder.WriteString(", ")
	builder.WriteString("RegisterNo=")
	builder.WriteString(fmt.Sprintf("%v", js.RegisterNo))
	builder.WriteString(", ")
	builder.WriteString("SocialSecurityNo=")
	builder.WriteString(fmt.Sprintf("%v", js.SocialSecurityNo))
	builder.WriteString(", ")
	builder.WriteString("SchoolGraduation=")
	builder.WriteString(js.SchoolGraduation)
	builder.WriteString(", ")
	builder.WriteString("YDSID=")
	builder.WriteString(fmt.Sprintf("%v", js.YDSID))
	builder.WriteString(", ")
	builder.WriteString("CreatedAt=")
	builder.WriteString(js.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(js.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedSupervisors returns the Supervisors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (js *JobSupervisor) NamedSupervisors(name string) ([]*JobDetail, error) {
	if js.Edges.namedSupervisors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := js.Edges.namedSupervisors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (js *JobSupervisor) appendNamedSupervisors(name string, edges ...*JobDetail) {
	if js.Edges.namedSupervisors == nil {
		js.Edges.namedSupervisors = make(map[string][]*JobDetail)
	}
	if len(edges) == 0 {
		js.Edges.namedSupervisors[name] = []*JobDetail{}
	} else {
		js.Edges.namedSupervisors[name] = append(js.Edges.namedSupervisors[name], edges...)
	}
}

// JobSupervisors is a parsable slice of JobSupervisor.
type JobSupervisors []*JobSupervisor
