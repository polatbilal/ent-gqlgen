// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/companydetail"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/companyengineer"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/companytoken"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/companyuser"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/jobrelations"
	"github.com/polatbilal/gqlgen-ent/api-core/ent/predicate"
)

// CompanyDetailUpdate is the builder for updating CompanyDetail entities.
type CompanyDetailUpdate struct {
	config
	hooks    []Hook
	mutation *CompanyDetailMutation
}

// Where appends a list predicates to the CompanyDetailUpdate builder.
func (cdu *CompanyDetailUpdate) Where(ps ...predicate.CompanyDetail) *CompanyDetailUpdate {
	cdu.mutation.Where(ps...)
	return cdu
}

// SetCompanyCode sets the "CompanyCode" field.
func (cdu *CompanyDetailUpdate) SetCompanyCode(i int) *CompanyDetailUpdate {
	cdu.mutation.ResetCompanyCode()
	cdu.mutation.SetCompanyCode(i)
	return cdu
}

// SetNillableCompanyCode sets the "CompanyCode" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableCompanyCode(i *int) *CompanyDetailUpdate {
	if i != nil {
		cdu.SetCompanyCode(*i)
	}
	return cdu
}

// AddCompanyCode adds i to the "CompanyCode" field.
func (cdu *CompanyDetailUpdate) AddCompanyCode(i int) *CompanyDetailUpdate {
	cdu.mutation.AddCompanyCode(i)
	return cdu
}

// SetName sets the "Name" field.
func (cdu *CompanyDetailUpdate) SetName(s string) *CompanyDetailUpdate {
	cdu.mutation.SetName(s)
	return cdu
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableName(s *string) *CompanyDetailUpdate {
	if s != nil {
		cdu.SetName(*s)
	}
	return cdu
}

// SetAddress sets the "Address" field.
func (cdu *CompanyDetailUpdate) SetAddress(s string) *CompanyDetailUpdate {
	cdu.mutation.SetAddress(s)
	return cdu
}

// SetNillableAddress sets the "Address" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableAddress(s *string) *CompanyDetailUpdate {
	if s != nil {
		cdu.SetAddress(*s)
	}
	return cdu
}

// ClearAddress clears the value of the "Address" field.
func (cdu *CompanyDetailUpdate) ClearAddress() *CompanyDetailUpdate {
	cdu.mutation.ClearAddress()
	return cdu
}

// SetPhone sets the "Phone" field.
func (cdu *CompanyDetailUpdate) SetPhone(s string) *CompanyDetailUpdate {
	cdu.mutation.SetPhone(s)
	return cdu
}

// SetNillablePhone sets the "Phone" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillablePhone(s *string) *CompanyDetailUpdate {
	if s != nil {
		cdu.SetPhone(*s)
	}
	return cdu
}

// ClearPhone clears the value of the "Phone" field.
func (cdu *CompanyDetailUpdate) ClearPhone() *CompanyDetailUpdate {
	cdu.mutation.ClearPhone()
	return cdu
}

// SetFax sets the "Fax" field.
func (cdu *CompanyDetailUpdate) SetFax(s string) *CompanyDetailUpdate {
	cdu.mutation.SetFax(s)
	return cdu
}

// SetNillableFax sets the "Fax" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableFax(s *string) *CompanyDetailUpdate {
	if s != nil {
		cdu.SetFax(*s)
	}
	return cdu
}

// ClearFax clears the value of the "Fax" field.
func (cdu *CompanyDetailUpdate) ClearFax() *CompanyDetailUpdate {
	cdu.mutation.ClearFax()
	return cdu
}

// SetMobilePhone sets the "MobilePhone" field.
func (cdu *CompanyDetailUpdate) SetMobilePhone(s string) *CompanyDetailUpdate {
	cdu.mutation.SetMobilePhone(s)
	return cdu
}

// SetNillableMobilePhone sets the "MobilePhone" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableMobilePhone(s *string) *CompanyDetailUpdate {
	if s != nil {
		cdu.SetMobilePhone(*s)
	}
	return cdu
}

// ClearMobilePhone clears the value of the "MobilePhone" field.
func (cdu *CompanyDetailUpdate) ClearMobilePhone() *CompanyDetailUpdate {
	cdu.mutation.ClearMobilePhone()
	return cdu
}

// SetEmail sets the "Email" field.
func (cdu *CompanyDetailUpdate) SetEmail(s string) *CompanyDetailUpdate {
	cdu.mutation.SetEmail(s)
	return cdu
}

// SetNillableEmail sets the "Email" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableEmail(s *string) *CompanyDetailUpdate {
	if s != nil {
		cdu.SetEmail(*s)
	}
	return cdu
}

// ClearEmail clears the value of the "Email" field.
func (cdu *CompanyDetailUpdate) ClearEmail() *CompanyDetailUpdate {
	cdu.mutation.ClearEmail()
	return cdu
}

// SetWebsite sets the "Website" field.
func (cdu *CompanyDetailUpdate) SetWebsite(s string) *CompanyDetailUpdate {
	cdu.mutation.SetWebsite(s)
	return cdu
}

// SetNillableWebsite sets the "Website" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableWebsite(s *string) *CompanyDetailUpdate {
	if s != nil {
		cdu.SetWebsite(*s)
	}
	return cdu
}

// ClearWebsite clears the value of the "Website" field.
func (cdu *CompanyDetailUpdate) ClearWebsite() *CompanyDetailUpdate {
	cdu.mutation.ClearWebsite()
	return cdu
}

// SetTaxAdmin sets the "TaxAdmin" field.
func (cdu *CompanyDetailUpdate) SetTaxAdmin(s string) *CompanyDetailUpdate {
	cdu.mutation.SetTaxAdmin(s)
	return cdu
}

// SetNillableTaxAdmin sets the "TaxAdmin" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableTaxAdmin(s *string) *CompanyDetailUpdate {
	if s != nil {
		cdu.SetTaxAdmin(*s)
	}
	return cdu
}

// ClearTaxAdmin clears the value of the "TaxAdmin" field.
func (cdu *CompanyDetailUpdate) ClearTaxAdmin() *CompanyDetailUpdate {
	cdu.mutation.ClearTaxAdmin()
	return cdu
}

// SetTaxNo sets the "TaxNo" field.
func (cdu *CompanyDetailUpdate) SetTaxNo(i int) *CompanyDetailUpdate {
	cdu.mutation.ResetTaxNo()
	cdu.mutation.SetTaxNo(i)
	return cdu
}

// SetNillableTaxNo sets the "TaxNo" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableTaxNo(i *int) *CompanyDetailUpdate {
	if i != nil {
		cdu.SetTaxNo(*i)
	}
	return cdu
}

// AddTaxNo adds i to the "TaxNo" field.
func (cdu *CompanyDetailUpdate) AddTaxNo(i int) *CompanyDetailUpdate {
	cdu.mutation.AddTaxNo(i)
	return cdu
}

// ClearTaxNo clears the value of the "TaxNo" field.
func (cdu *CompanyDetailUpdate) ClearTaxNo() *CompanyDetailUpdate {
	cdu.mutation.ClearTaxNo()
	return cdu
}

// SetChamberInfo sets the "ChamberInfo" field.
func (cdu *CompanyDetailUpdate) SetChamberInfo(s string) *CompanyDetailUpdate {
	cdu.mutation.SetChamberInfo(s)
	return cdu
}

// SetNillableChamberInfo sets the "ChamberInfo" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableChamberInfo(s *string) *CompanyDetailUpdate {
	if s != nil {
		cdu.SetChamberInfo(*s)
	}
	return cdu
}

// ClearChamberInfo clears the value of the "ChamberInfo" field.
func (cdu *CompanyDetailUpdate) ClearChamberInfo() *CompanyDetailUpdate {
	cdu.mutation.ClearChamberInfo()
	return cdu
}

// SetChamberRegisterNo sets the "ChamberRegisterNo" field.
func (cdu *CompanyDetailUpdate) SetChamberRegisterNo(s string) *CompanyDetailUpdate {
	cdu.mutation.SetChamberRegisterNo(s)
	return cdu
}

// SetNillableChamberRegisterNo sets the "ChamberRegisterNo" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableChamberRegisterNo(s *string) *CompanyDetailUpdate {
	if s != nil {
		cdu.SetChamberRegisterNo(*s)
	}
	return cdu
}

// ClearChamberRegisterNo clears the value of the "ChamberRegisterNo" field.
func (cdu *CompanyDetailUpdate) ClearChamberRegisterNo() *CompanyDetailUpdate {
	cdu.mutation.ClearChamberRegisterNo()
	return cdu
}

// SetVisaDate sets the "VisaDate" field.
func (cdu *CompanyDetailUpdate) SetVisaDate(t time.Time) *CompanyDetailUpdate {
	cdu.mutation.SetVisaDate(t)
	return cdu
}

// SetNillableVisaDate sets the "VisaDate" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableVisaDate(t *time.Time) *CompanyDetailUpdate {
	if t != nil {
		cdu.SetVisaDate(*t)
	}
	return cdu
}

// ClearVisaDate clears the value of the "VisaDate" field.
func (cdu *CompanyDetailUpdate) ClearVisaDate() *CompanyDetailUpdate {
	cdu.mutation.ClearVisaDate()
	return cdu
}

// SetVisaEndDate sets the "VisaEndDate" field.
func (cdu *CompanyDetailUpdate) SetVisaEndDate(t time.Time) *CompanyDetailUpdate {
	cdu.mutation.SetVisaEndDate(t)
	return cdu
}

// SetNillableVisaEndDate sets the "VisaEndDate" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableVisaEndDate(t *time.Time) *CompanyDetailUpdate {
	if t != nil {
		cdu.SetVisaEndDate(*t)
	}
	return cdu
}

// ClearVisaEndDate clears the value of the "VisaEndDate" field.
func (cdu *CompanyDetailUpdate) ClearVisaEndDate() *CompanyDetailUpdate {
	cdu.mutation.ClearVisaEndDate()
	return cdu
}

// SetVisaFinishedFor90Days sets the "VisaFinishedFor90Days" field.
func (cdu *CompanyDetailUpdate) SetVisaFinishedFor90Days(b bool) *CompanyDetailUpdate {
	cdu.mutation.SetVisaFinishedFor90Days(b)
	return cdu
}

// SetNillableVisaFinishedFor90Days sets the "VisaFinishedFor90Days" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableVisaFinishedFor90Days(b *bool) *CompanyDetailUpdate {
	if b != nil {
		cdu.SetVisaFinishedFor90Days(*b)
	}
	return cdu
}

// ClearVisaFinishedFor90Days clears the value of the "VisaFinishedFor90Days" field.
func (cdu *CompanyDetailUpdate) ClearVisaFinishedFor90Days() *CompanyDetailUpdate {
	cdu.mutation.ClearVisaFinishedFor90Days()
	return cdu
}

// SetCorePersonAbsent90Days sets the "CorePersonAbsent90Days" field.
func (cdu *CompanyDetailUpdate) SetCorePersonAbsent90Days(b bool) *CompanyDetailUpdate {
	cdu.mutation.SetCorePersonAbsent90Days(b)
	return cdu
}

// SetNillableCorePersonAbsent90Days sets the "CorePersonAbsent90Days" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableCorePersonAbsent90Days(b *bool) *CompanyDetailUpdate {
	if b != nil {
		cdu.SetCorePersonAbsent90Days(*b)
	}
	return cdu
}

// ClearCorePersonAbsent90Days clears the value of the "CorePersonAbsent90Days" field.
func (cdu *CompanyDetailUpdate) ClearCorePersonAbsent90Days() *CompanyDetailUpdate {
	cdu.mutation.ClearCorePersonAbsent90Days()
	return cdu
}

// SetIsClosed sets the "IsClosed" field.
func (cdu *CompanyDetailUpdate) SetIsClosed(b bool) *CompanyDetailUpdate {
	cdu.mutation.SetIsClosed(b)
	return cdu
}

// SetNillableIsClosed sets the "IsClosed" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableIsClosed(b *bool) *CompanyDetailUpdate {
	if b != nil {
		cdu.SetIsClosed(*b)
	}
	return cdu
}

// SetOwnerName sets the "OwnerName" field.
func (cdu *CompanyDetailUpdate) SetOwnerName(s string) *CompanyDetailUpdate {
	cdu.mutation.SetOwnerName(s)
	return cdu
}

// SetNillableOwnerName sets the "OwnerName" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableOwnerName(s *string) *CompanyDetailUpdate {
	if s != nil {
		cdu.SetOwnerName(*s)
	}
	return cdu
}

// ClearOwnerName clears the value of the "OwnerName" field.
func (cdu *CompanyDetailUpdate) ClearOwnerName() *CompanyDetailUpdate {
	cdu.mutation.ClearOwnerName()
	return cdu
}

// SetOwnerTcNo sets the "OwnerTcNo" field.
func (cdu *CompanyDetailUpdate) SetOwnerTcNo(i int) *CompanyDetailUpdate {
	cdu.mutation.ResetOwnerTcNo()
	cdu.mutation.SetOwnerTcNo(i)
	return cdu
}

// SetNillableOwnerTcNo sets the "OwnerTcNo" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableOwnerTcNo(i *int) *CompanyDetailUpdate {
	if i != nil {
		cdu.SetOwnerTcNo(*i)
	}
	return cdu
}

// AddOwnerTcNo adds i to the "OwnerTcNo" field.
func (cdu *CompanyDetailUpdate) AddOwnerTcNo(i int) *CompanyDetailUpdate {
	cdu.mutation.AddOwnerTcNo(i)
	return cdu
}

// ClearOwnerTcNo clears the value of the "OwnerTcNo" field.
func (cdu *CompanyDetailUpdate) ClearOwnerTcNo() *CompanyDetailUpdate {
	cdu.mutation.ClearOwnerTcNo()
	return cdu
}

// SetOwnerAddress sets the "OwnerAddress" field.
func (cdu *CompanyDetailUpdate) SetOwnerAddress(s string) *CompanyDetailUpdate {
	cdu.mutation.SetOwnerAddress(s)
	return cdu
}

// SetNillableOwnerAddress sets the "OwnerAddress" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableOwnerAddress(s *string) *CompanyDetailUpdate {
	if s != nil {
		cdu.SetOwnerAddress(*s)
	}
	return cdu
}

// ClearOwnerAddress clears the value of the "OwnerAddress" field.
func (cdu *CompanyDetailUpdate) ClearOwnerAddress() *CompanyDetailUpdate {
	cdu.mutation.ClearOwnerAddress()
	return cdu
}

// SetOwnerPhone sets the "OwnerPhone" field.
func (cdu *CompanyDetailUpdate) SetOwnerPhone(s string) *CompanyDetailUpdate {
	cdu.mutation.SetOwnerPhone(s)
	return cdu
}

// SetNillableOwnerPhone sets the "OwnerPhone" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableOwnerPhone(s *string) *CompanyDetailUpdate {
	if s != nil {
		cdu.SetOwnerPhone(*s)
	}
	return cdu
}

// ClearOwnerPhone clears the value of the "OwnerPhone" field.
func (cdu *CompanyDetailUpdate) ClearOwnerPhone() *CompanyDetailUpdate {
	cdu.mutation.ClearOwnerPhone()
	return cdu
}

// SetOwnerEmail sets the "OwnerEmail" field.
func (cdu *CompanyDetailUpdate) SetOwnerEmail(s string) *CompanyDetailUpdate {
	cdu.mutation.SetOwnerEmail(s)
	return cdu
}

// SetNillableOwnerEmail sets the "OwnerEmail" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableOwnerEmail(s *string) *CompanyDetailUpdate {
	if s != nil {
		cdu.SetOwnerEmail(*s)
	}
	return cdu
}

// ClearOwnerEmail clears the value of the "OwnerEmail" field.
func (cdu *CompanyDetailUpdate) ClearOwnerEmail() *CompanyDetailUpdate {
	cdu.mutation.ClearOwnerEmail()
	return cdu
}

// SetOwnerRegisterNo sets the "OwnerRegisterNo" field.
func (cdu *CompanyDetailUpdate) SetOwnerRegisterNo(i int) *CompanyDetailUpdate {
	cdu.mutation.ResetOwnerRegisterNo()
	cdu.mutation.SetOwnerRegisterNo(i)
	return cdu
}

// SetNillableOwnerRegisterNo sets the "OwnerRegisterNo" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableOwnerRegisterNo(i *int) *CompanyDetailUpdate {
	if i != nil {
		cdu.SetOwnerRegisterNo(*i)
	}
	return cdu
}

// AddOwnerRegisterNo adds i to the "OwnerRegisterNo" field.
func (cdu *CompanyDetailUpdate) AddOwnerRegisterNo(i int) *CompanyDetailUpdate {
	cdu.mutation.AddOwnerRegisterNo(i)
	return cdu
}

// ClearOwnerRegisterNo clears the value of the "OwnerRegisterNo" field.
func (cdu *CompanyDetailUpdate) ClearOwnerRegisterNo() *CompanyDetailUpdate {
	cdu.mutation.ClearOwnerRegisterNo()
	return cdu
}

// SetOwnerCareer sets the "OwnerCareer" field.
func (cdu *CompanyDetailUpdate) SetOwnerCareer(s string) *CompanyDetailUpdate {
	cdu.mutation.SetOwnerCareer(s)
	return cdu
}

// SetNillableOwnerCareer sets the "OwnerCareer" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableOwnerCareer(s *string) *CompanyDetailUpdate {
	if s != nil {
		cdu.SetOwnerCareer(*s)
	}
	return cdu
}

// ClearOwnerCareer clears the value of the "OwnerCareer" field.
func (cdu *CompanyDetailUpdate) ClearOwnerCareer() *CompanyDetailUpdate {
	cdu.mutation.ClearOwnerCareer()
	return cdu
}

// SetCreatedAt sets the "CreatedAt" field.
func (cdu *CompanyDetailUpdate) SetCreatedAt(t time.Time) *CompanyDetailUpdate {
	cdu.mutation.SetCreatedAt(t)
	return cdu
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (cdu *CompanyDetailUpdate) SetNillableCreatedAt(t *time.Time) *CompanyDetailUpdate {
	if t != nil {
		cdu.SetCreatedAt(*t)
	}
	return cdu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (cdu *CompanyDetailUpdate) SetUpdatedAt(t time.Time) *CompanyDetailUpdate {
	cdu.mutation.SetUpdatedAt(t)
	return cdu
}

// AddJobIDs adds the "jobs" edge to the JobRelations entity by IDs.
func (cdu *CompanyDetailUpdate) AddJobIDs(ids ...int) *CompanyDetailUpdate {
	cdu.mutation.AddJobIDs(ids...)
	return cdu
}

// AddJobs adds the "jobs" edges to the JobRelations entity.
func (cdu *CompanyDetailUpdate) AddJobs(j ...*JobRelations) *CompanyDetailUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cdu.AddJobIDs(ids...)
}

// AddUserIDs adds the "users" edge to the CompanyUser entity by IDs.
func (cdu *CompanyDetailUpdate) AddUserIDs(ids ...int) *CompanyDetailUpdate {
	cdu.mutation.AddUserIDs(ids...)
	return cdu
}

// AddUsers adds the "users" edges to the CompanyUser entity.
func (cdu *CompanyDetailUpdate) AddUsers(c ...*CompanyUser) *CompanyDetailUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cdu.AddUserIDs(ids...)
}

// AddTokenIDs adds the "tokens" edge to the CompanyToken entity by IDs.
func (cdu *CompanyDetailUpdate) AddTokenIDs(ids ...int) *CompanyDetailUpdate {
	cdu.mutation.AddTokenIDs(ids...)
	return cdu
}

// AddTokens adds the "tokens" edges to the CompanyToken entity.
func (cdu *CompanyDetailUpdate) AddTokens(c ...*CompanyToken) *CompanyDetailUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cdu.AddTokenIDs(ids...)
}

// AddEngineerIDs adds the "engineers" edge to the CompanyEngineer entity by IDs.
func (cdu *CompanyDetailUpdate) AddEngineerIDs(ids ...int) *CompanyDetailUpdate {
	cdu.mutation.AddEngineerIDs(ids...)
	return cdu
}

// AddEngineers adds the "engineers" edges to the CompanyEngineer entity.
func (cdu *CompanyDetailUpdate) AddEngineers(c ...*CompanyEngineer) *CompanyDetailUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cdu.AddEngineerIDs(ids...)
}

// Mutation returns the CompanyDetailMutation object of the builder.
func (cdu *CompanyDetailUpdate) Mutation() *CompanyDetailMutation {
	return cdu.mutation
}

// ClearJobs clears all "jobs" edges to the JobRelations entity.
func (cdu *CompanyDetailUpdate) ClearJobs() *CompanyDetailUpdate {
	cdu.mutation.ClearJobs()
	return cdu
}

// RemoveJobIDs removes the "jobs" edge to JobRelations entities by IDs.
func (cdu *CompanyDetailUpdate) RemoveJobIDs(ids ...int) *CompanyDetailUpdate {
	cdu.mutation.RemoveJobIDs(ids...)
	return cdu
}

// RemoveJobs removes "jobs" edges to JobRelations entities.
func (cdu *CompanyDetailUpdate) RemoveJobs(j ...*JobRelations) *CompanyDetailUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cdu.RemoveJobIDs(ids...)
}

// ClearUsers clears all "users" edges to the CompanyUser entity.
func (cdu *CompanyDetailUpdate) ClearUsers() *CompanyDetailUpdate {
	cdu.mutation.ClearUsers()
	return cdu
}

// RemoveUserIDs removes the "users" edge to CompanyUser entities by IDs.
func (cdu *CompanyDetailUpdate) RemoveUserIDs(ids ...int) *CompanyDetailUpdate {
	cdu.mutation.RemoveUserIDs(ids...)
	return cdu
}

// RemoveUsers removes "users" edges to CompanyUser entities.
func (cdu *CompanyDetailUpdate) RemoveUsers(c ...*CompanyUser) *CompanyDetailUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cdu.RemoveUserIDs(ids...)
}

// ClearTokens clears all "tokens" edges to the CompanyToken entity.
func (cdu *CompanyDetailUpdate) ClearTokens() *CompanyDetailUpdate {
	cdu.mutation.ClearTokens()
	return cdu
}

// RemoveTokenIDs removes the "tokens" edge to CompanyToken entities by IDs.
func (cdu *CompanyDetailUpdate) RemoveTokenIDs(ids ...int) *CompanyDetailUpdate {
	cdu.mutation.RemoveTokenIDs(ids...)
	return cdu
}

// RemoveTokens removes "tokens" edges to CompanyToken entities.
func (cdu *CompanyDetailUpdate) RemoveTokens(c ...*CompanyToken) *CompanyDetailUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cdu.RemoveTokenIDs(ids...)
}

// ClearEngineers clears all "engineers" edges to the CompanyEngineer entity.
func (cdu *CompanyDetailUpdate) ClearEngineers() *CompanyDetailUpdate {
	cdu.mutation.ClearEngineers()
	return cdu
}

// RemoveEngineerIDs removes the "engineers" edge to CompanyEngineer entities by IDs.
func (cdu *CompanyDetailUpdate) RemoveEngineerIDs(ids ...int) *CompanyDetailUpdate {
	cdu.mutation.RemoveEngineerIDs(ids...)
	return cdu
}

// RemoveEngineers removes "engineers" edges to CompanyEngineer entities.
func (cdu *CompanyDetailUpdate) RemoveEngineers(c ...*CompanyEngineer) *CompanyDetailUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cdu.RemoveEngineerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cdu *CompanyDetailUpdate) Save(ctx context.Context) (int, error) {
	cdu.defaults()
	return withHooks(ctx, cdu.sqlSave, cdu.mutation, cdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cdu *CompanyDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := cdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cdu *CompanyDetailUpdate) Exec(ctx context.Context) error {
	_, err := cdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdu *CompanyDetailUpdate) ExecX(ctx context.Context) {
	if err := cdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdu *CompanyDetailUpdate) defaults() {
	if _, ok := cdu.mutation.UpdatedAt(); !ok {
		v := companydetail.UpdateDefaultUpdatedAt()
		cdu.mutation.SetUpdatedAt(v)
	}
}

func (cdu *CompanyDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(companydetail.Table, companydetail.Columns, sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt))
	if ps := cdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cdu.mutation.CompanyCode(); ok {
		_spec.SetField(companydetail.FieldCompanyCode, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.AddedCompanyCode(); ok {
		_spec.AddField(companydetail.FieldCompanyCode, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.Name(); ok {
		_spec.SetField(companydetail.FieldName, field.TypeString, value)
	}
	if value, ok := cdu.mutation.Address(); ok {
		_spec.SetField(companydetail.FieldAddress, field.TypeString, value)
	}
	if cdu.mutation.AddressCleared() {
		_spec.ClearField(companydetail.FieldAddress, field.TypeString)
	}
	if value, ok := cdu.mutation.Phone(); ok {
		_spec.SetField(companydetail.FieldPhone, field.TypeString, value)
	}
	if cdu.mutation.PhoneCleared() {
		_spec.ClearField(companydetail.FieldPhone, field.TypeString)
	}
	if value, ok := cdu.mutation.Fax(); ok {
		_spec.SetField(companydetail.FieldFax, field.TypeString, value)
	}
	if cdu.mutation.FaxCleared() {
		_spec.ClearField(companydetail.FieldFax, field.TypeString)
	}
	if value, ok := cdu.mutation.MobilePhone(); ok {
		_spec.SetField(companydetail.FieldMobilePhone, field.TypeString, value)
	}
	if cdu.mutation.MobilePhoneCleared() {
		_spec.ClearField(companydetail.FieldMobilePhone, field.TypeString)
	}
	if value, ok := cdu.mutation.Email(); ok {
		_spec.SetField(companydetail.FieldEmail, field.TypeString, value)
	}
	if cdu.mutation.EmailCleared() {
		_spec.ClearField(companydetail.FieldEmail, field.TypeString)
	}
	if value, ok := cdu.mutation.Website(); ok {
		_spec.SetField(companydetail.FieldWebsite, field.TypeString, value)
	}
	if cdu.mutation.WebsiteCleared() {
		_spec.ClearField(companydetail.FieldWebsite, field.TypeString)
	}
	if value, ok := cdu.mutation.TaxAdmin(); ok {
		_spec.SetField(companydetail.FieldTaxAdmin, field.TypeString, value)
	}
	if cdu.mutation.TaxAdminCleared() {
		_spec.ClearField(companydetail.FieldTaxAdmin, field.TypeString)
	}
	if value, ok := cdu.mutation.TaxNo(); ok {
		_spec.SetField(companydetail.FieldTaxNo, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.AddedTaxNo(); ok {
		_spec.AddField(companydetail.FieldTaxNo, field.TypeInt, value)
	}
	if cdu.mutation.TaxNoCleared() {
		_spec.ClearField(companydetail.FieldTaxNo, field.TypeInt)
	}
	if value, ok := cdu.mutation.ChamberInfo(); ok {
		_spec.SetField(companydetail.FieldChamberInfo, field.TypeString, value)
	}
	if cdu.mutation.ChamberInfoCleared() {
		_spec.ClearField(companydetail.FieldChamberInfo, field.TypeString)
	}
	if value, ok := cdu.mutation.ChamberRegisterNo(); ok {
		_spec.SetField(companydetail.FieldChamberRegisterNo, field.TypeString, value)
	}
	if cdu.mutation.ChamberRegisterNoCleared() {
		_spec.ClearField(companydetail.FieldChamberRegisterNo, field.TypeString)
	}
	if value, ok := cdu.mutation.VisaDate(); ok {
		_spec.SetField(companydetail.FieldVisaDate, field.TypeTime, value)
	}
	if cdu.mutation.VisaDateCleared() {
		_spec.ClearField(companydetail.FieldVisaDate, field.TypeTime)
	}
	if value, ok := cdu.mutation.VisaEndDate(); ok {
		_spec.SetField(companydetail.FieldVisaEndDate, field.TypeTime, value)
	}
	if cdu.mutation.VisaEndDateCleared() {
		_spec.ClearField(companydetail.FieldVisaEndDate, field.TypeTime)
	}
	if value, ok := cdu.mutation.VisaFinishedFor90Days(); ok {
		_spec.SetField(companydetail.FieldVisaFinishedFor90Days, field.TypeBool, value)
	}
	if cdu.mutation.VisaFinishedFor90DaysCleared() {
		_spec.ClearField(companydetail.FieldVisaFinishedFor90Days, field.TypeBool)
	}
	if value, ok := cdu.mutation.CorePersonAbsent90Days(); ok {
		_spec.SetField(companydetail.FieldCorePersonAbsent90Days, field.TypeBool, value)
	}
	if cdu.mutation.CorePersonAbsent90DaysCleared() {
		_spec.ClearField(companydetail.FieldCorePersonAbsent90Days, field.TypeBool)
	}
	if value, ok := cdu.mutation.IsClosed(); ok {
		_spec.SetField(companydetail.FieldIsClosed, field.TypeBool, value)
	}
	if value, ok := cdu.mutation.OwnerName(); ok {
		_spec.SetField(companydetail.FieldOwnerName, field.TypeString, value)
	}
	if cdu.mutation.OwnerNameCleared() {
		_spec.ClearField(companydetail.FieldOwnerName, field.TypeString)
	}
	if value, ok := cdu.mutation.OwnerTcNo(); ok {
		_spec.SetField(companydetail.FieldOwnerTcNo, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.AddedOwnerTcNo(); ok {
		_spec.AddField(companydetail.FieldOwnerTcNo, field.TypeInt, value)
	}
	if cdu.mutation.OwnerTcNoCleared() {
		_spec.ClearField(companydetail.FieldOwnerTcNo, field.TypeInt)
	}
	if value, ok := cdu.mutation.OwnerAddress(); ok {
		_spec.SetField(companydetail.FieldOwnerAddress, field.TypeString, value)
	}
	if cdu.mutation.OwnerAddressCleared() {
		_spec.ClearField(companydetail.FieldOwnerAddress, field.TypeString)
	}
	if value, ok := cdu.mutation.OwnerPhone(); ok {
		_spec.SetField(companydetail.FieldOwnerPhone, field.TypeString, value)
	}
	if cdu.mutation.OwnerPhoneCleared() {
		_spec.ClearField(companydetail.FieldOwnerPhone, field.TypeString)
	}
	if value, ok := cdu.mutation.OwnerEmail(); ok {
		_spec.SetField(companydetail.FieldOwnerEmail, field.TypeString, value)
	}
	if cdu.mutation.OwnerEmailCleared() {
		_spec.ClearField(companydetail.FieldOwnerEmail, field.TypeString)
	}
	if value, ok := cdu.mutation.OwnerRegisterNo(); ok {
		_spec.SetField(companydetail.FieldOwnerRegisterNo, field.TypeInt, value)
	}
	if value, ok := cdu.mutation.AddedOwnerRegisterNo(); ok {
		_spec.AddField(companydetail.FieldOwnerRegisterNo, field.TypeInt, value)
	}
	if cdu.mutation.OwnerRegisterNoCleared() {
		_spec.ClearField(companydetail.FieldOwnerRegisterNo, field.TypeInt)
	}
	if value, ok := cdu.mutation.OwnerCareer(); ok {
		_spec.SetField(companydetail.FieldOwnerCareer, field.TypeString, value)
	}
	if cdu.mutation.OwnerCareerCleared() {
		_spec.ClearField(companydetail.FieldOwnerCareer, field.TypeString)
	}
	if value, ok := cdu.mutation.CreatedAt(); ok {
		_spec.SetField(companydetail.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cdu.mutation.UpdatedAt(); ok {
		_spec.SetField(companydetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if cdu.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.JobsTable,
			Columns: []string{companydetail.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrelations.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.RemovedJobsIDs(); len(nodes) > 0 && !cdu.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.JobsTable,
			Columns: []string{companydetail.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrelations.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.JobsTable,
			Columns: []string{companydetail.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrelations.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cdu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.UsersTable,
			Columns: []string{companydetail.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !cdu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.UsersTable,
			Columns: []string{companydetail.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.UsersTable,
			Columns: []string{companydetail.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cdu.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.TokensTable,
			Columns: []string{companydetail.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companytoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.RemovedTokensIDs(); len(nodes) > 0 && !cdu.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.TokensTable,
			Columns: []string{companydetail.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companytoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.TokensTable,
			Columns: []string{companydetail.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companytoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cdu.mutation.EngineersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.EngineersTable,
			Columns: []string{companydetail.EngineersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.RemovedEngineersIDs(); len(nodes) > 0 && !cdu.mutation.EngineersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.EngineersTable,
			Columns: []string{companydetail.EngineersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cdu.mutation.EngineersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.EngineersTable,
			Columns: []string{companydetail.EngineersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{companydetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cdu.mutation.done = true
	return n, nil
}

// CompanyDetailUpdateOne is the builder for updating a single CompanyDetail entity.
type CompanyDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompanyDetailMutation
}

// SetCompanyCode sets the "CompanyCode" field.
func (cduo *CompanyDetailUpdateOne) SetCompanyCode(i int) *CompanyDetailUpdateOne {
	cduo.mutation.ResetCompanyCode()
	cduo.mutation.SetCompanyCode(i)
	return cduo
}

// SetNillableCompanyCode sets the "CompanyCode" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableCompanyCode(i *int) *CompanyDetailUpdateOne {
	if i != nil {
		cduo.SetCompanyCode(*i)
	}
	return cduo
}

// AddCompanyCode adds i to the "CompanyCode" field.
func (cduo *CompanyDetailUpdateOne) AddCompanyCode(i int) *CompanyDetailUpdateOne {
	cduo.mutation.AddCompanyCode(i)
	return cduo
}

// SetName sets the "Name" field.
func (cduo *CompanyDetailUpdateOne) SetName(s string) *CompanyDetailUpdateOne {
	cduo.mutation.SetName(s)
	return cduo
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableName(s *string) *CompanyDetailUpdateOne {
	if s != nil {
		cduo.SetName(*s)
	}
	return cduo
}

// SetAddress sets the "Address" field.
func (cduo *CompanyDetailUpdateOne) SetAddress(s string) *CompanyDetailUpdateOne {
	cduo.mutation.SetAddress(s)
	return cduo
}

// SetNillableAddress sets the "Address" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableAddress(s *string) *CompanyDetailUpdateOne {
	if s != nil {
		cduo.SetAddress(*s)
	}
	return cduo
}

// ClearAddress clears the value of the "Address" field.
func (cduo *CompanyDetailUpdateOne) ClearAddress() *CompanyDetailUpdateOne {
	cduo.mutation.ClearAddress()
	return cduo
}

// SetPhone sets the "Phone" field.
func (cduo *CompanyDetailUpdateOne) SetPhone(s string) *CompanyDetailUpdateOne {
	cduo.mutation.SetPhone(s)
	return cduo
}

// SetNillablePhone sets the "Phone" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillablePhone(s *string) *CompanyDetailUpdateOne {
	if s != nil {
		cduo.SetPhone(*s)
	}
	return cduo
}

// ClearPhone clears the value of the "Phone" field.
func (cduo *CompanyDetailUpdateOne) ClearPhone() *CompanyDetailUpdateOne {
	cduo.mutation.ClearPhone()
	return cduo
}

// SetFax sets the "Fax" field.
func (cduo *CompanyDetailUpdateOne) SetFax(s string) *CompanyDetailUpdateOne {
	cduo.mutation.SetFax(s)
	return cduo
}

// SetNillableFax sets the "Fax" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableFax(s *string) *CompanyDetailUpdateOne {
	if s != nil {
		cduo.SetFax(*s)
	}
	return cduo
}

// ClearFax clears the value of the "Fax" field.
func (cduo *CompanyDetailUpdateOne) ClearFax() *CompanyDetailUpdateOne {
	cduo.mutation.ClearFax()
	return cduo
}

// SetMobilePhone sets the "MobilePhone" field.
func (cduo *CompanyDetailUpdateOne) SetMobilePhone(s string) *CompanyDetailUpdateOne {
	cduo.mutation.SetMobilePhone(s)
	return cduo
}

// SetNillableMobilePhone sets the "MobilePhone" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableMobilePhone(s *string) *CompanyDetailUpdateOne {
	if s != nil {
		cduo.SetMobilePhone(*s)
	}
	return cduo
}

// ClearMobilePhone clears the value of the "MobilePhone" field.
func (cduo *CompanyDetailUpdateOne) ClearMobilePhone() *CompanyDetailUpdateOne {
	cduo.mutation.ClearMobilePhone()
	return cduo
}

// SetEmail sets the "Email" field.
func (cduo *CompanyDetailUpdateOne) SetEmail(s string) *CompanyDetailUpdateOne {
	cduo.mutation.SetEmail(s)
	return cduo
}

// SetNillableEmail sets the "Email" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableEmail(s *string) *CompanyDetailUpdateOne {
	if s != nil {
		cduo.SetEmail(*s)
	}
	return cduo
}

// ClearEmail clears the value of the "Email" field.
func (cduo *CompanyDetailUpdateOne) ClearEmail() *CompanyDetailUpdateOne {
	cduo.mutation.ClearEmail()
	return cduo
}

// SetWebsite sets the "Website" field.
func (cduo *CompanyDetailUpdateOne) SetWebsite(s string) *CompanyDetailUpdateOne {
	cduo.mutation.SetWebsite(s)
	return cduo
}

// SetNillableWebsite sets the "Website" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableWebsite(s *string) *CompanyDetailUpdateOne {
	if s != nil {
		cduo.SetWebsite(*s)
	}
	return cduo
}

// ClearWebsite clears the value of the "Website" field.
func (cduo *CompanyDetailUpdateOne) ClearWebsite() *CompanyDetailUpdateOne {
	cduo.mutation.ClearWebsite()
	return cduo
}

// SetTaxAdmin sets the "TaxAdmin" field.
func (cduo *CompanyDetailUpdateOne) SetTaxAdmin(s string) *CompanyDetailUpdateOne {
	cduo.mutation.SetTaxAdmin(s)
	return cduo
}

// SetNillableTaxAdmin sets the "TaxAdmin" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableTaxAdmin(s *string) *CompanyDetailUpdateOne {
	if s != nil {
		cduo.SetTaxAdmin(*s)
	}
	return cduo
}

// ClearTaxAdmin clears the value of the "TaxAdmin" field.
func (cduo *CompanyDetailUpdateOne) ClearTaxAdmin() *CompanyDetailUpdateOne {
	cduo.mutation.ClearTaxAdmin()
	return cduo
}

// SetTaxNo sets the "TaxNo" field.
func (cduo *CompanyDetailUpdateOne) SetTaxNo(i int) *CompanyDetailUpdateOne {
	cduo.mutation.ResetTaxNo()
	cduo.mutation.SetTaxNo(i)
	return cduo
}

// SetNillableTaxNo sets the "TaxNo" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableTaxNo(i *int) *CompanyDetailUpdateOne {
	if i != nil {
		cduo.SetTaxNo(*i)
	}
	return cduo
}

// AddTaxNo adds i to the "TaxNo" field.
func (cduo *CompanyDetailUpdateOne) AddTaxNo(i int) *CompanyDetailUpdateOne {
	cduo.mutation.AddTaxNo(i)
	return cduo
}

// ClearTaxNo clears the value of the "TaxNo" field.
func (cduo *CompanyDetailUpdateOne) ClearTaxNo() *CompanyDetailUpdateOne {
	cduo.mutation.ClearTaxNo()
	return cduo
}

// SetChamberInfo sets the "ChamberInfo" field.
func (cduo *CompanyDetailUpdateOne) SetChamberInfo(s string) *CompanyDetailUpdateOne {
	cduo.mutation.SetChamberInfo(s)
	return cduo
}

// SetNillableChamberInfo sets the "ChamberInfo" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableChamberInfo(s *string) *CompanyDetailUpdateOne {
	if s != nil {
		cduo.SetChamberInfo(*s)
	}
	return cduo
}

// ClearChamberInfo clears the value of the "ChamberInfo" field.
func (cduo *CompanyDetailUpdateOne) ClearChamberInfo() *CompanyDetailUpdateOne {
	cduo.mutation.ClearChamberInfo()
	return cduo
}

// SetChamberRegisterNo sets the "ChamberRegisterNo" field.
func (cduo *CompanyDetailUpdateOne) SetChamberRegisterNo(s string) *CompanyDetailUpdateOne {
	cduo.mutation.SetChamberRegisterNo(s)
	return cduo
}

// SetNillableChamberRegisterNo sets the "ChamberRegisterNo" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableChamberRegisterNo(s *string) *CompanyDetailUpdateOne {
	if s != nil {
		cduo.SetChamberRegisterNo(*s)
	}
	return cduo
}

// ClearChamberRegisterNo clears the value of the "ChamberRegisterNo" field.
func (cduo *CompanyDetailUpdateOne) ClearChamberRegisterNo() *CompanyDetailUpdateOne {
	cduo.mutation.ClearChamberRegisterNo()
	return cduo
}

// SetVisaDate sets the "VisaDate" field.
func (cduo *CompanyDetailUpdateOne) SetVisaDate(t time.Time) *CompanyDetailUpdateOne {
	cduo.mutation.SetVisaDate(t)
	return cduo
}

// SetNillableVisaDate sets the "VisaDate" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableVisaDate(t *time.Time) *CompanyDetailUpdateOne {
	if t != nil {
		cduo.SetVisaDate(*t)
	}
	return cduo
}

// ClearVisaDate clears the value of the "VisaDate" field.
func (cduo *CompanyDetailUpdateOne) ClearVisaDate() *CompanyDetailUpdateOne {
	cduo.mutation.ClearVisaDate()
	return cduo
}

// SetVisaEndDate sets the "VisaEndDate" field.
func (cduo *CompanyDetailUpdateOne) SetVisaEndDate(t time.Time) *CompanyDetailUpdateOne {
	cduo.mutation.SetVisaEndDate(t)
	return cduo
}

// SetNillableVisaEndDate sets the "VisaEndDate" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableVisaEndDate(t *time.Time) *CompanyDetailUpdateOne {
	if t != nil {
		cduo.SetVisaEndDate(*t)
	}
	return cduo
}

// ClearVisaEndDate clears the value of the "VisaEndDate" field.
func (cduo *CompanyDetailUpdateOne) ClearVisaEndDate() *CompanyDetailUpdateOne {
	cduo.mutation.ClearVisaEndDate()
	return cduo
}

// SetVisaFinishedFor90Days sets the "VisaFinishedFor90Days" field.
func (cduo *CompanyDetailUpdateOne) SetVisaFinishedFor90Days(b bool) *CompanyDetailUpdateOne {
	cduo.mutation.SetVisaFinishedFor90Days(b)
	return cduo
}

// SetNillableVisaFinishedFor90Days sets the "VisaFinishedFor90Days" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableVisaFinishedFor90Days(b *bool) *CompanyDetailUpdateOne {
	if b != nil {
		cduo.SetVisaFinishedFor90Days(*b)
	}
	return cduo
}

// ClearVisaFinishedFor90Days clears the value of the "VisaFinishedFor90Days" field.
func (cduo *CompanyDetailUpdateOne) ClearVisaFinishedFor90Days() *CompanyDetailUpdateOne {
	cduo.mutation.ClearVisaFinishedFor90Days()
	return cduo
}

// SetCorePersonAbsent90Days sets the "CorePersonAbsent90Days" field.
func (cduo *CompanyDetailUpdateOne) SetCorePersonAbsent90Days(b bool) *CompanyDetailUpdateOne {
	cduo.mutation.SetCorePersonAbsent90Days(b)
	return cduo
}

// SetNillableCorePersonAbsent90Days sets the "CorePersonAbsent90Days" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableCorePersonAbsent90Days(b *bool) *CompanyDetailUpdateOne {
	if b != nil {
		cduo.SetCorePersonAbsent90Days(*b)
	}
	return cduo
}

// ClearCorePersonAbsent90Days clears the value of the "CorePersonAbsent90Days" field.
func (cduo *CompanyDetailUpdateOne) ClearCorePersonAbsent90Days() *CompanyDetailUpdateOne {
	cduo.mutation.ClearCorePersonAbsent90Days()
	return cduo
}

// SetIsClosed sets the "IsClosed" field.
func (cduo *CompanyDetailUpdateOne) SetIsClosed(b bool) *CompanyDetailUpdateOne {
	cduo.mutation.SetIsClosed(b)
	return cduo
}

// SetNillableIsClosed sets the "IsClosed" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableIsClosed(b *bool) *CompanyDetailUpdateOne {
	if b != nil {
		cduo.SetIsClosed(*b)
	}
	return cduo
}

// SetOwnerName sets the "OwnerName" field.
func (cduo *CompanyDetailUpdateOne) SetOwnerName(s string) *CompanyDetailUpdateOne {
	cduo.mutation.SetOwnerName(s)
	return cduo
}

// SetNillableOwnerName sets the "OwnerName" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableOwnerName(s *string) *CompanyDetailUpdateOne {
	if s != nil {
		cduo.SetOwnerName(*s)
	}
	return cduo
}

// ClearOwnerName clears the value of the "OwnerName" field.
func (cduo *CompanyDetailUpdateOne) ClearOwnerName() *CompanyDetailUpdateOne {
	cduo.mutation.ClearOwnerName()
	return cduo
}

// SetOwnerTcNo sets the "OwnerTcNo" field.
func (cduo *CompanyDetailUpdateOne) SetOwnerTcNo(i int) *CompanyDetailUpdateOne {
	cduo.mutation.ResetOwnerTcNo()
	cduo.mutation.SetOwnerTcNo(i)
	return cduo
}

// SetNillableOwnerTcNo sets the "OwnerTcNo" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableOwnerTcNo(i *int) *CompanyDetailUpdateOne {
	if i != nil {
		cduo.SetOwnerTcNo(*i)
	}
	return cduo
}

// AddOwnerTcNo adds i to the "OwnerTcNo" field.
func (cduo *CompanyDetailUpdateOne) AddOwnerTcNo(i int) *CompanyDetailUpdateOne {
	cduo.mutation.AddOwnerTcNo(i)
	return cduo
}

// ClearOwnerTcNo clears the value of the "OwnerTcNo" field.
func (cduo *CompanyDetailUpdateOne) ClearOwnerTcNo() *CompanyDetailUpdateOne {
	cduo.mutation.ClearOwnerTcNo()
	return cduo
}

// SetOwnerAddress sets the "OwnerAddress" field.
func (cduo *CompanyDetailUpdateOne) SetOwnerAddress(s string) *CompanyDetailUpdateOne {
	cduo.mutation.SetOwnerAddress(s)
	return cduo
}

// SetNillableOwnerAddress sets the "OwnerAddress" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableOwnerAddress(s *string) *CompanyDetailUpdateOne {
	if s != nil {
		cduo.SetOwnerAddress(*s)
	}
	return cduo
}

// ClearOwnerAddress clears the value of the "OwnerAddress" field.
func (cduo *CompanyDetailUpdateOne) ClearOwnerAddress() *CompanyDetailUpdateOne {
	cduo.mutation.ClearOwnerAddress()
	return cduo
}

// SetOwnerPhone sets the "OwnerPhone" field.
func (cduo *CompanyDetailUpdateOne) SetOwnerPhone(s string) *CompanyDetailUpdateOne {
	cduo.mutation.SetOwnerPhone(s)
	return cduo
}

// SetNillableOwnerPhone sets the "OwnerPhone" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableOwnerPhone(s *string) *CompanyDetailUpdateOne {
	if s != nil {
		cduo.SetOwnerPhone(*s)
	}
	return cduo
}

// ClearOwnerPhone clears the value of the "OwnerPhone" field.
func (cduo *CompanyDetailUpdateOne) ClearOwnerPhone() *CompanyDetailUpdateOne {
	cduo.mutation.ClearOwnerPhone()
	return cduo
}

// SetOwnerEmail sets the "OwnerEmail" field.
func (cduo *CompanyDetailUpdateOne) SetOwnerEmail(s string) *CompanyDetailUpdateOne {
	cduo.mutation.SetOwnerEmail(s)
	return cduo
}

// SetNillableOwnerEmail sets the "OwnerEmail" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableOwnerEmail(s *string) *CompanyDetailUpdateOne {
	if s != nil {
		cduo.SetOwnerEmail(*s)
	}
	return cduo
}

// ClearOwnerEmail clears the value of the "OwnerEmail" field.
func (cduo *CompanyDetailUpdateOne) ClearOwnerEmail() *CompanyDetailUpdateOne {
	cduo.mutation.ClearOwnerEmail()
	return cduo
}

// SetOwnerRegisterNo sets the "OwnerRegisterNo" field.
func (cduo *CompanyDetailUpdateOne) SetOwnerRegisterNo(i int) *CompanyDetailUpdateOne {
	cduo.mutation.ResetOwnerRegisterNo()
	cduo.mutation.SetOwnerRegisterNo(i)
	return cduo
}

// SetNillableOwnerRegisterNo sets the "OwnerRegisterNo" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableOwnerRegisterNo(i *int) *CompanyDetailUpdateOne {
	if i != nil {
		cduo.SetOwnerRegisterNo(*i)
	}
	return cduo
}

// AddOwnerRegisterNo adds i to the "OwnerRegisterNo" field.
func (cduo *CompanyDetailUpdateOne) AddOwnerRegisterNo(i int) *CompanyDetailUpdateOne {
	cduo.mutation.AddOwnerRegisterNo(i)
	return cduo
}

// ClearOwnerRegisterNo clears the value of the "OwnerRegisterNo" field.
func (cduo *CompanyDetailUpdateOne) ClearOwnerRegisterNo() *CompanyDetailUpdateOne {
	cduo.mutation.ClearOwnerRegisterNo()
	return cduo
}

// SetOwnerCareer sets the "OwnerCareer" field.
func (cduo *CompanyDetailUpdateOne) SetOwnerCareer(s string) *CompanyDetailUpdateOne {
	cduo.mutation.SetOwnerCareer(s)
	return cduo
}

// SetNillableOwnerCareer sets the "OwnerCareer" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableOwnerCareer(s *string) *CompanyDetailUpdateOne {
	if s != nil {
		cduo.SetOwnerCareer(*s)
	}
	return cduo
}

// ClearOwnerCareer clears the value of the "OwnerCareer" field.
func (cduo *CompanyDetailUpdateOne) ClearOwnerCareer() *CompanyDetailUpdateOne {
	cduo.mutation.ClearOwnerCareer()
	return cduo
}

// SetCreatedAt sets the "CreatedAt" field.
func (cduo *CompanyDetailUpdateOne) SetCreatedAt(t time.Time) *CompanyDetailUpdateOne {
	cduo.mutation.SetCreatedAt(t)
	return cduo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (cduo *CompanyDetailUpdateOne) SetNillableCreatedAt(t *time.Time) *CompanyDetailUpdateOne {
	if t != nil {
		cduo.SetCreatedAt(*t)
	}
	return cduo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (cduo *CompanyDetailUpdateOne) SetUpdatedAt(t time.Time) *CompanyDetailUpdateOne {
	cduo.mutation.SetUpdatedAt(t)
	return cduo
}

// AddJobIDs adds the "jobs" edge to the JobRelations entity by IDs.
func (cduo *CompanyDetailUpdateOne) AddJobIDs(ids ...int) *CompanyDetailUpdateOne {
	cduo.mutation.AddJobIDs(ids...)
	return cduo
}

// AddJobs adds the "jobs" edges to the JobRelations entity.
func (cduo *CompanyDetailUpdateOne) AddJobs(j ...*JobRelations) *CompanyDetailUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cduo.AddJobIDs(ids...)
}

// AddUserIDs adds the "users" edge to the CompanyUser entity by IDs.
func (cduo *CompanyDetailUpdateOne) AddUserIDs(ids ...int) *CompanyDetailUpdateOne {
	cduo.mutation.AddUserIDs(ids...)
	return cduo
}

// AddUsers adds the "users" edges to the CompanyUser entity.
func (cduo *CompanyDetailUpdateOne) AddUsers(c ...*CompanyUser) *CompanyDetailUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cduo.AddUserIDs(ids...)
}

// AddTokenIDs adds the "tokens" edge to the CompanyToken entity by IDs.
func (cduo *CompanyDetailUpdateOne) AddTokenIDs(ids ...int) *CompanyDetailUpdateOne {
	cduo.mutation.AddTokenIDs(ids...)
	return cduo
}

// AddTokens adds the "tokens" edges to the CompanyToken entity.
func (cduo *CompanyDetailUpdateOne) AddTokens(c ...*CompanyToken) *CompanyDetailUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cduo.AddTokenIDs(ids...)
}

// AddEngineerIDs adds the "engineers" edge to the CompanyEngineer entity by IDs.
func (cduo *CompanyDetailUpdateOne) AddEngineerIDs(ids ...int) *CompanyDetailUpdateOne {
	cduo.mutation.AddEngineerIDs(ids...)
	return cduo
}

// AddEngineers adds the "engineers" edges to the CompanyEngineer entity.
func (cduo *CompanyDetailUpdateOne) AddEngineers(c ...*CompanyEngineer) *CompanyDetailUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cduo.AddEngineerIDs(ids...)
}

// Mutation returns the CompanyDetailMutation object of the builder.
func (cduo *CompanyDetailUpdateOne) Mutation() *CompanyDetailMutation {
	return cduo.mutation
}

// ClearJobs clears all "jobs" edges to the JobRelations entity.
func (cduo *CompanyDetailUpdateOne) ClearJobs() *CompanyDetailUpdateOne {
	cduo.mutation.ClearJobs()
	return cduo
}

// RemoveJobIDs removes the "jobs" edge to JobRelations entities by IDs.
func (cduo *CompanyDetailUpdateOne) RemoveJobIDs(ids ...int) *CompanyDetailUpdateOne {
	cduo.mutation.RemoveJobIDs(ids...)
	return cduo
}

// RemoveJobs removes "jobs" edges to JobRelations entities.
func (cduo *CompanyDetailUpdateOne) RemoveJobs(j ...*JobRelations) *CompanyDetailUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cduo.RemoveJobIDs(ids...)
}

// ClearUsers clears all "users" edges to the CompanyUser entity.
func (cduo *CompanyDetailUpdateOne) ClearUsers() *CompanyDetailUpdateOne {
	cduo.mutation.ClearUsers()
	return cduo
}

// RemoveUserIDs removes the "users" edge to CompanyUser entities by IDs.
func (cduo *CompanyDetailUpdateOne) RemoveUserIDs(ids ...int) *CompanyDetailUpdateOne {
	cduo.mutation.RemoveUserIDs(ids...)
	return cduo
}

// RemoveUsers removes "users" edges to CompanyUser entities.
func (cduo *CompanyDetailUpdateOne) RemoveUsers(c ...*CompanyUser) *CompanyDetailUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cduo.RemoveUserIDs(ids...)
}

// ClearTokens clears all "tokens" edges to the CompanyToken entity.
func (cduo *CompanyDetailUpdateOne) ClearTokens() *CompanyDetailUpdateOne {
	cduo.mutation.ClearTokens()
	return cduo
}

// RemoveTokenIDs removes the "tokens" edge to CompanyToken entities by IDs.
func (cduo *CompanyDetailUpdateOne) RemoveTokenIDs(ids ...int) *CompanyDetailUpdateOne {
	cduo.mutation.RemoveTokenIDs(ids...)
	return cduo
}

// RemoveTokens removes "tokens" edges to CompanyToken entities.
func (cduo *CompanyDetailUpdateOne) RemoveTokens(c ...*CompanyToken) *CompanyDetailUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cduo.RemoveTokenIDs(ids...)
}

// ClearEngineers clears all "engineers" edges to the CompanyEngineer entity.
func (cduo *CompanyDetailUpdateOne) ClearEngineers() *CompanyDetailUpdateOne {
	cduo.mutation.ClearEngineers()
	return cduo
}

// RemoveEngineerIDs removes the "engineers" edge to CompanyEngineer entities by IDs.
func (cduo *CompanyDetailUpdateOne) RemoveEngineerIDs(ids ...int) *CompanyDetailUpdateOne {
	cduo.mutation.RemoveEngineerIDs(ids...)
	return cduo
}

// RemoveEngineers removes "engineers" edges to CompanyEngineer entities.
func (cduo *CompanyDetailUpdateOne) RemoveEngineers(c ...*CompanyEngineer) *CompanyDetailUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cduo.RemoveEngineerIDs(ids...)
}

// Where appends a list predicates to the CompanyDetailUpdate builder.
func (cduo *CompanyDetailUpdateOne) Where(ps ...predicate.CompanyDetail) *CompanyDetailUpdateOne {
	cduo.mutation.Where(ps...)
	return cduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cduo *CompanyDetailUpdateOne) Select(field string, fields ...string) *CompanyDetailUpdateOne {
	cduo.fields = append([]string{field}, fields...)
	return cduo
}

// Save executes the query and returns the updated CompanyDetail entity.
func (cduo *CompanyDetailUpdateOne) Save(ctx context.Context) (*CompanyDetail, error) {
	cduo.defaults()
	return withHooks(ctx, cduo.sqlSave, cduo.mutation, cduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cduo *CompanyDetailUpdateOne) SaveX(ctx context.Context) *CompanyDetail {
	node, err := cduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cduo *CompanyDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := cduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cduo *CompanyDetailUpdateOne) ExecX(ctx context.Context) {
	if err := cduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cduo *CompanyDetailUpdateOne) defaults() {
	if _, ok := cduo.mutation.UpdatedAt(); !ok {
		v := companydetail.UpdateDefaultUpdatedAt()
		cduo.mutation.SetUpdatedAt(v)
	}
}

func (cduo *CompanyDetailUpdateOne) sqlSave(ctx context.Context) (_node *CompanyDetail, err error) {
	_spec := sqlgraph.NewUpdateSpec(companydetail.Table, companydetail.Columns, sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt))
	id, ok := cduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CompanyDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, companydetail.FieldID)
		for _, f := range fields {
			if !companydetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != companydetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cduo.mutation.CompanyCode(); ok {
		_spec.SetField(companydetail.FieldCompanyCode, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.AddedCompanyCode(); ok {
		_spec.AddField(companydetail.FieldCompanyCode, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.Name(); ok {
		_spec.SetField(companydetail.FieldName, field.TypeString, value)
	}
	if value, ok := cduo.mutation.Address(); ok {
		_spec.SetField(companydetail.FieldAddress, field.TypeString, value)
	}
	if cduo.mutation.AddressCleared() {
		_spec.ClearField(companydetail.FieldAddress, field.TypeString)
	}
	if value, ok := cduo.mutation.Phone(); ok {
		_spec.SetField(companydetail.FieldPhone, field.TypeString, value)
	}
	if cduo.mutation.PhoneCleared() {
		_spec.ClearField(companydetail.FieldPhone, field.TypeString)
	}
	if value, ok := cduo.mutation.Fax(); ok {
		_spec.SetField(companydetail.FieldFax, field.TypeString, value)
	}
	if cduo.mutation.FaxCleared() {
		_spec.ClearField(companydetail.FieldFax, field.TypeString)
	}
	if value, ok := cduo.mutation.MobilePhone(); ok {
		_spec.SetField(companydetail.FieldMobilePhone, field.TypeString, value)
	}
	if cduo.mutation.MobilePhoneCleared() {
		_spec.ClearField(companydetail.FieldMobilePhone, field.TypeString)
	}
	if value, ok := cduo.mutation.Email(); ok {
		_spec.SetField(companydetail.FieldEmail, field.TypeString, value)
	}
	if cduo.mutation.EmailCleared() {
		_spec.ClearField(companydetail.FieldEmail, field.TypeString)
	}
	if value, ok := cduo.mutation.Website(); ok {
		_spec.SetField(companydetail.FieldWebsite, field.TypeString, value)
	}
	if cduo.mutation.WebsiteCleared() {
		_spec.ClearField(companydetail.FieldWebsite, field.TypeString)
	}
	if value, ok := cduo.mutation.TaxAdmin(); ok {
		_spec.SetField(companydetail.FieldTaxAdmin, field.TypeString, value)
	}
	if cduo.mutation.TaxAdminCleared() {
		_spec.ClearField(companydetail.FieldTaxAdmin, field.TypeString)
	}
	if value, ok := cduo.mutation.TaxNo(); ok {
		_spec.SetField(companydetail.FieldTaxNo, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.AddedTaxNo(); ok {
		_spec.AddField(companydetail.FieldTaxNo, field.TypeInt, value)
	}
	if cduo.mutation.TaxNoCleared() {
		_spec.ClearField(companydetail.FieldTaxNo, field.TypeInt)
	}
	if value, ok := cduo.mutation.ChamberInfo(); ok {
		_spec.SetField(companydetail.FieldChamberInfo, field.TypeString, value)
	}
	if cduo.mutation.ChamberInfoCleared() {
		_spec.ClearField(companydetail.FieldChamberInfo, field.TypeString)
	}
	if value, ok := cduo.mutation.ChamberRegisterNo(); ok {
		_spec.SetField(companydetail.FieldChamberRegisterNo, field.TypeString, value)
	}
	if cduo.mutation.ChamberRegisterNoCleared() {
		_spec.ClearField(companydetail.FieldChamberRegisterNo, field.TypeString)
	}
	if value, ok := cduo.mutation.VisaDate(); ok {
		_spec.SetField(companydetail.FieldVisaDate, field.TypeTime, value)
	}
	if cduo.mutation.VisaDateCleared() {
		_spec.ClearField(companydetail.FieldVisaDate, field.TypeTime)
	}
	if value, ok := cduo.mutation.VisaEndDate(); ok {
		_spec.SetField(companydetail.FieldVisaEndDate, field.TypeTime, value)
	}
	if cduo.mutation.VisaEndDateCleared() {
		_spec.ClearField(companydetail.FieldVisaEndDate, field.TypeTime)
	}
	if value, ok := cduo.mutation.VisaFinishedFor90Days(); ok {
		_spec.SetField(companydetail.FieldVisaFinishedFor90Days, field.TypeBool, value)
	}
	if cduo.mutation.VisaFinishedFor90DaysCleared() {
		_spec.ClearField(companydetail.FieldVisaFinishedFor90Days, field.TypeBool)
	}
	if value, ok := cduo.mutation.CorePersonAbsent90Days(); ok {
		_spec.SetField(companydetail.FieldCorePersonAbsent90Days, field.TypeBool, value)
	}
	if cduo.mutation.CorePersonAbsent90DaysCleared() {
		_spec.ClearField(companydetail.FieldCorePersonAbsent90Days, field.TypeBool)
	}
	if value, ok := cduo.mutation.IsClosed(); ok {
		_spec.SetField(companydetail.FieldIsClosed, field.TypeBool, value)
	}
	if value, ok := cduo.mutation.OwnerName(); ok {
		_spec.SetField(companydetail.FieldOwnerName, field.TypeString, value)
	}
	if cduo.mutation.OwnerNameCleared() {
		_spec.ClearField(companydetail.FieldOwnerName, field.TypeString)
	}
	if value, ok := cduo.mutation.OwnerTcNo(); ok {
		_spec.SetField(companydetail.FieldOwnerTcNo, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.AddedOwnerTcNo(); ok {
		_spec.AddField(companydetail.FieldOwnerTcNo, field.TypeInt, value)
	}
	if cduo.mutation.OwnerTcNoCleared() {
		_spec.ClearField(companydetail.FieldOwnerTcNo, field.TypeInt)
	}
	if value, ok := cduo.mutation.OwnerAddress(); ok {
		_spec.SetField(companydetail.FieldOwnerAddress, field.TypeString, value)
	}
	if cduo.mutation.OwnerAddressCleared() {
		_spec.ClearField(companydetail.FieldOwnerAddress, field.TypeString)
	}
	if value, ok := cduo.mutation.OwnerPhone(); ok {
		_spec.SetField(companydetail.FieldOwnerPhone, field.TypeString, value)
	}
	if cduo.mutation.OwnerPhoneCleared() {
		_spec.ClearField(companydetail.FieldOwnerPhone, field.TypeString)
	}
	if value, ok := cduo.mutation.OwnerEmail(); ok {
		_spec.SetField(companydetail.FieldOwnerEmail, field.TypeString, value)
	}
	if cduo.mutation.OwnerEmailCleared() {
		_spec.ClearField(companydetail.FieldOwnerEmail, field.TypeString)
	}
	if value, ok := cduo.mutation.OwnerRegisterNo(); ok {
		_spec.SetField(companydetail.FieldOwnerRegisterNo, field.TypeInt, value)
	}
	if value, ok := cduo.mutation.AddedOwnerRegisterNo(); ok {
		_spec.AddField(companydetail.FieldOwnerRegisterNo, field.TypeInt, value)
	}
	if cduo.mutation.OwnerRegisterNoCleared() {
		_spec.ClearField(companydetail.FieldOwnerRegisterNo, field.TypeInt)
	}
	if value, ok := cduo.mutation.OwnerCareer(); ok {
		_spec.SetField(companydetail.FieldOwnerCareer, field.TypeString, value)
	}
	if cduo.mutation.OwnerCareerCleared() {
		_spec.ClearField(companydetail.FieldOwnerCareer, field.TypeString)
	}
	if value, ok := cduo.mutation.CreatedAt(); ok {
		_spec.SetField(companydetail.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cduo.mutation.UpdatedAt(); ok {
		_spec.SetField(companydetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if cduo.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.JobsTable,
			Columns: []string{companydetail.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrelations.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.RemovedJobsIDs(); len(nodes) > 0 && !cduo.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.JobsTable,
			Columns: []string{companydetail.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrelations.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.JobsTable,
			Columns: []string{companydetail.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrelations.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cduo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.UsersTable,
			Columns: []string{companydetail.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !cduo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.UsersTable,
			Columns: []string{companydetail.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.UsersTable,
			Columns: []string{companydetail.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cduo.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.TokensTable,
			Columns: []string{companydetail.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companytoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.RemovedTokensIDs(); len(nodes) > 0 && !cduo.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.TokensTable,
			Columns: []string{companydetail.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companytoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.TokensTable,
			Columns: []string{companydetail.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companytoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cduo.mutation.EngineersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.EngineersTable,
			Columns: []string{companydetail.EngineersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.RemovedEngineersIDs(); len(nodes) > 0 && !cduo.mutation.EngineersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.EngineersTable,
			Columns: []string{companydetail.EngineersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cduo.mutation.EngineersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.EngineersTable,
			Columns: []string{companydetail.EngineersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CompanyDetail{config: cduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{companydetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cduo.mutation.done = true
	return _node, nil
}
