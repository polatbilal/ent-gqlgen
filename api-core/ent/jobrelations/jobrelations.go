// Code generated by ent, DO NOT EDIT.

package jobrelations

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the jobrelations type in the database.
	Label = "job_relations"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldYibfNo holds the string denoting the yibfno field in the database.
	FieldYibfNo = "yibf_no"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeJob holds the string denoting the job edge name in mutations.
	EdgeJob = "job"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// EdgeProgress holds the string denoting the progress edge name in mutations.
	EdgeProgress = "progress"
	// EdgeContractor holds the string denoting the contractor edge name in mutations.
	EdgeContractor = "contractor"
	// EdgeSupervisor holds the string denoting the supervisor edge name in mutations.
	EdgeSupervisor = "supervisor"
	// EdgeStatic holds the string denoting the static edge name in mutations.
	EdgeStatic = "static"
	// EdgeMechanic holds the string denoting the mechanic edge name in mutations.
	EdgeMechanic = "mechanic"
	// EdgeElectric holds the string denoting the electric edge name in mutations.
	EdgeElectric = "electric"
	// EdgeInspector holds the string denoting the inspector edge name in mutations.
	EdgeInspector = "inspector"
	// EdgeArchitect holds the string denoting the architect edge name in mutations.
	EdgeArchitect = "architect"
	// EdgeController holds the string denoting the controller edge name in mutations.
	EdgeController = "controller"
	// EdgeMechaniccontroller holds the string denoting the mechaniccontroller edge name in mutations.
	EdgeMechaniccontroller = "mechaniccontroller"
	// EdgeElectriccontroller holds the string denoting the electriccontroller edge name in mutations.
	EdgeElectriccontroller = "electriccontroller"
	// EdgeLayers holds the string denoting the layers edge name in mutations.
	EdgeLayers = "layers"
	// EdgePayments holds the string denoting the payments edge name in mutations.
	EdgePayments = "payments"
	// Table holds the table name of the jobrelations in the database.
	Table = "job_relations"
	// JobTable is the table that holds the job relation/edge.
	JobTable = "job_relations"
	// JobInverseTable is the table name for the JobDetail entity.
	// It exists in this package in order to avoid circular dependency with the "jobdetail" package.
	JobInverseTable = "job_details"
	// JobColumn is the table column denoting the job relation/edge.
	JobColumn = "job_id"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "job_relations"
	// OwnerInverseTable is the table name for the JobOwner entity.
	// It exists in this package in order to avoid circular dependency with the "jobowner" package.
	OwnerInverseTable = "job_owners"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "job_relations"
	// AuthorInverseTable is the table name for the JobAuthor entity.
	// It exists in this package in order to avoid circular dependency with the "jobauthor" package.
	AuthorInverseTable = "job_authors"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "author_id"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "job_relations"
	// CompanyInverseTable is the table name for the CompanyDetail entity.
	// It exists in this package in order to avoid circular dependency with the "companydetail" package.
	CompanyInverseTable = "company_details"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_id"
	// ProgressTable is the table that holds the progress relation/edge.
	ProgressTable = "job_relations"
	// ProgressInverseTable is the table name for the JobProgress entity.
	// It exists in this package in order to avoid circular dependency with the "jobprogress" package.
	ProgressInverseTable = "job_progresses"
	// ProgressColumn is the table column denoting the progress relation/edge.
	ProgressColumn = "progress_id"
	// ContractorTable is the table that holds the contractor relation/edge.
	ContractorTable = "job_relations"
	// ContractorInverseTable is the table name for the JobContractor entity.
	// It exists in this package in order to avoid circular dependency with the "jobcontractor" package.
	ContractorInverseTable = "job_contractors"
	// ContractorColumn is the table column denoting the contractor relation/edge.
	ContractorColumn = "contractor_id"
	// SupervisorTable is the table that holds the supervisor relation/edge.
	SupervisorTable = "job_relations"
	// SupervisorInverseTable is the table name for the JobSupervisor entity.
	// It exists in this package in order to avoid circular dependency with the "jobsupervisor" package.
	SupervisorInverseTable = "job_supervisors"
	// SupervisorColumn is the table column denoting the supervisor relation/edge.
	SupervisorColumn = "supervisor_id"
	// StaticTable is the table that holds the static relation/edge.
	StaticTable = "job_relations"
	// StaticInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	StaticInverseTable = "company_engineers"
	// StaticColumn is the table column denoting the static relation/edge.
	StaticColumn = "static_id"
	// MechanicTable is the table that holds the mechanic relation/edge.
	MechanicTable = "job_relations"
	// MechanicInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	MechanicInverseTable = "company_engineers"
	// MechanicColumn is the table column denoting the mechanic relation/edge.
	MechanicColumn = "mechanic_id"
	// ElectricTable is the table that holds the electric relation/edge.
	ElectricTable = "job_relations"
	// ElectricInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	ElectricInverseTable = "company_engineers"
	// ElectricColumn is the table column denoting the electric relation/edge.
	ElectricColumn = "electric_id"
	// InspectorTable is the table that holds the inspector relation/edge.
	InspectorTable = "job_relations"
	// InspectorInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	InspectorInverseTable = "company_engineers"
	// InspectorColumn is the table column denoting the inspector relation/edge.
	InspectorColumn = "inspector_id"
	// ArchitectTable is the table that holds the architect relation/edge.
	ArchitectTable = "job_relations"
	// ArchitectInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	ArchitectInverseTable = "company_engineers"
	// ArchitectColumn is the table column denoting the architect relation/edge.
	ArchitectColumn = "architect_id"
	// ControllerTable is the table that holds the controller relation/edge.
	ControllerTable = "job_relations"
	// ControllerInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	ControllerInverseTable = "company_engineers"
	// ControllerColumn is the table column denoting the controller relation/edge.
	ControllerColumn = "controller_id"
	// MechaniccontrollerTable is the table that holds the mechaniccontroller relation/edge.
	MechaniccontrollerTable = "job_relations"
	// MechaniccontrollerInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	MechaniccontrollerInverseTable = "company_engineers"
	// MechaniccontrollerColumn is the table column denoting the mechaniccontroller relation/edge.
	MechaniccontrollerColumn = "mechaniccontroller_id"
	// ElectriccontrollerTable is the table that holds the electriccontroller relation/edge.
	ElectriccontrollerTable = "job_relations"
	// ElectriccontrollerInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	ElectriccontrollerInverseTable = "company_engineers"
	// ElectriccontrollerColumn is the table column denoting the electriccontroller relation/edge.
	ElectriccontrollerColumn = "electriccontroller_id"
	// LayersTable is the table that holds the layers relation/edge.
	LayersTable = "job_layers"
	// LayersInverseTable is the table name for the JobLayer entity.
	// It exists in this package in order to avoid circular dependency with the "joblayer" package.
	LayersInverseTable = "job_layers"
	// LayersColumn is the table column denoting the layers relation/edge.
	LayersColumn = "job_id"
	// PaymentsTable is the table that holds the payments relation/edge.
	PaymentsTable = "job_payments"
	// PaymentsInverseTable is the table name for the JobPayments entity.
	// It exists in this package in order to avoid circular dependency with the "jobpayments" package.
	PaymentsInverseTable = "job_payments"
	// PaymentsColumn is the table column denoting the payments relation/edge.
	PaymentsColumn = "job_id"
)

// Columns holds all SQL columns for jobrelations fields.
var Columns = []string{
	FieldID,
	FieldYibfNo,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "job_relations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"company_id",
	"static_id",
	"mechanic_id",
	"electric_id",
	"inspector_id",
	"architect_id",
	"controller_id",
	"mechaniccontroller_id",
	"electriccontroller_id",
	"author_id",
	"contractor_id",
	"job_id",
	"owner_id",
	"progress_id",
	"supervisor_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "CreatedAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "UpdatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "UpdatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the JobRelations queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByYibfNo orders the results by the yibfNo field.
func ByYibfNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYibfNo, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByJobField orders the results by job field.
func ByJobField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobStep(), sql.OrderByField(field, opts...))
	}
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByAuthorField orders the results by author field.
func ByAuthorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorStep(), sql.OrderByField(field, opts...))
	}
}

// ByCompanyField orders the results by company field.
func ByCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyStep(), sql.OrderByField(field, opts...))
	}
}

// ByProgressField orders the results by progress field.
func ByProgressField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgressStep(), sql.OrderByField(field, opts...))
	}
}

// ByContractorField orders the results by contractor field.
func ByContractorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContractorStep(), sql.OrderByField(field, opts...))
	}
}

// BySupervisorField orders the results by supervisor field.
func BySupervisorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSupervisorStep(), sql.OrderByField(field, opts...))
	}
}

// ByStaticField orders the results by static field.
func ByStaticField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStaticStep(), sql.OrderByField(field, opts...))
	}
}

// ByMechanicField orders the results by mechanic field.
func ByMechanicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMechanicStep(), sql.OrderByField(field, opts...))
	}
}

// ByElectricField orders the results by electric field.
func ByElectricField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newElectricStep(), sql.OrderByField(field, opts...))
	}
}

// ByInspectorField orders the results by inspector field.
func ByInspectorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInspectorStep(), sql.OrderByField(field, opts...))
	}
}

// ByArchitectField orders the results by architect field.
func ByArchitectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArchitectStep(), sql.OrderByField(field, opts...))
	}
}

// ByControllerField orders the results by controller field.
func ByControllerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControllerStep(), sql.OrderByField(field, opts...))
	}
}

// ByMechaniccontrollerField orders the results by mechaniccontroller field.
func ByMechaniccontrollerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMechaniccontrollerStep(), sql.OrderByField(field, opts...))
	}
}

// ByElectriccontrollerField orders the results by electriccontroller field.
func ByElectriccontrollerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newElectriccontrollerStep(), sql.OrderByField(field, opts...))
	}
}

// ByLayersCount orders the results by layers count.
func ByLayersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLayersStep(), opts...)
	}
}

// ByLayers orders the results by layers terms.
func ByLayers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLayersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPaymentsCount orders the results by payments count.
func ByPaymentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPaymentsStep(), opts...)
	}
}

// ByPayments orders the results by payments terms.
func ByPayments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newJobStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, JobTable, JobColumn),
	)
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newAuthorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
	)
}
func newCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
	)
}
func newProgressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProgressTable, ProgressColumn),
	)
}
func newContractorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContractorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ContractorTable, ContractorColumn),
	)
}
func newSupervisorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SupervisorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SupervisorTable, SupervisorColumn),
	)
}
func newStaticStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StaticInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StaticTable, StaticColumn),
	)
}
func newMechanicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MechanicInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MechanicTable, MechanicColumn),
	)
}
func newElectricStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ElectricInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ElectricTable, ElectricColumn),
	)
}
func newInspectorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InspectorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InspectorTable, InspectorColumn),
	)
}
func newArchitectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArchitectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ArchitectTable, ArchitectColumn),
	)
}
func newControllerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControllerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ControllerTable, ControllerColumn),
	)
}
func newMechaniccontrollerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MechaniccontrollerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MechaniccontrollerTable, MechaniccontrollerColumn),
	)
}
func newElectriccontrollerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ElectriccontrollerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ElectriccontrollerTable, ElectriccontrollerColumn),
	)
}
func newLayersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LayersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LayersTable, LayersColumn),
	)
}
func newPaymentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PaymentsTable, PaymentsColumn),
	)
}
