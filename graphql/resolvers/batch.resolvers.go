package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"context"
	"fmt"
	"strings"

	"github.com/polatbilal/gqlgen-ent/ent"
	"github.com/polatbilal/gqlgen-ent/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/ent/jobrelations"
	"github.com/polatbilal/gqlgen-ent/graphql/helpers"
	"github.com/polatbilal/gqlgen-ent/graphql/model"
	"github.com/polatbilal/gqlgen-ent/middlewares"
)

// JobBatchMutation is the resolver for the jobBatchMutation field.
func (r *mutationResolver) JobBatchMutation(ctx context.Context, input model.JobBatchInput) (*model.JobBatchResult, error) {
	maxRetries := 3
	var lastErr error

	for attempt := 0; attempt < maxRetries; attempt++ {
		if attempt > 0 {
			fmt.Printf("Yeniden deneme %d/%d\n", attempt+1, maxRetries)
		}

		result, err := r.ExecuteBatchMutation(ctx, input)
		if err != nil {
			lastErr = err
			if strings.Contains(err.Error(), "duplicate key value violates unique constraint") {
				continue
			}
			return nil, err
		}
		return result, nil
	}

	return nil, fmt.Errorf("maksimum deneme sayısına ulaşıldı, son hata: %w", lastErr)
}

// ExecuteBatchMutation is the resolver for the executeBatchMutation field.
func (r *mutationResolver) ExecuteBatchMutation(ctx context.Context, input model.JobBatchInput) (*model.JobBatchResult, error) {
	client := middlewares.GetClientFromContext(ctx)
	if client == nil {
		return nil, fmt.Errorf("client nil")
	}

	tx, err := client.Tx(ctx)
	if err != nil {
		return nil, fmt.Errorf("transaction başlatılırken hata oluştu: %w", err)
	}

	defer func() {
		if v := recover(); v != nil {
			fmt.Printf("Panic oluştu: %v\n", v)
			_ = tx.Rollback()
			panic(v)
		}
	}()

	txCtx := ent.NewContext(ctx, tx.Client())

	// Mevcut JobRelations kaydını bul
	existingRelations, err := tx.JobRelations.Query().
		Where(jobrelations.YibfNo(input.YibfNo)).
		WithCompany().
		WithJob().
		WithOwner().
		WithContractor().
		WithAuthor().
		WithSupervisor().
		WithInspector().
		WithStatic().
		WithArchitect().
		WithMechanic().
		WithElectric().
		WithController().
		WithMechaniccontroller().
		WithElectriccontroller().
		First(txCtx)
	if err != nil && !ent.IsNotFound(err) {
		return nil, fmt.Errorf("kayıt aranırken hata oluştu: %w", err)
	}

	var (
		job        *ent.JobDetail
		owner      *ent.JobOwner
		contractor *ent.JobContractor
		author     *ent.JobAuthor
		supervisor *ent.JobSupervisor
		relations  *ent.JobRelations
	)

	if existingRelations != nil {
		fmt.Println("Mevcut kayıt bulundu...")
		relations = existingRelations

		// İş güncelleme/oluşturma
		if input.JobInput != nil {
			fmt.Println("İş işlemi başlıyor...")
			jobInput := *input.JobInput
			jobInput.YibfNo = &input.YibfNo
			if existingRelations.Edges.Job != nil {
				job, err = r.UpdateJob(txCtx, existingRelations.Edges.Job.YibfNo, jobInput)
				if err != nil {
					fmt.Printf("İş güncelleme hatası: %v\n", err)
					_ = tx.Rollback()
					return nil, fmt.Errorf("iş güncellenirken hata: %w", err)
				}
				fmt.Printf("İş başarıyla güncellendi: %+v\n", job)
			} else {
				job, err = r.CreateJob(txCtx, jobInput)
				if err != nil {
					fmt.Printf("İş oluşturma hatası: %v\n", err)
					_ = tx.Rollback()
					return nil, fmt.Errorf("iş oluşturulurken hata: %w", err)
				}
				fmt.Printf("İş başarıyla oluşturuldu: %+v\n", job)
			}
		} else {
			job = existingRelations.Edges.Job
		}

		// Owner işlemi
		if input.OwnerInput != nil {
			fmt.Println("Owner işlemi başlıyor...")
			ownerInput := *input.OwnerInput
			ownerInput.YibfNo = &input.YibfNo

			if existingRelations.Edges.Owner != nil {
				// Mevcut owner'ı güncelle
				owner, err = r.UpdateOwner(txCtx, ownerInput)
				if err != nil {
					fmt.Printf("Owner güncelleme hatası: %v\n", err)
					_ = tx.Rollback()
					return nil, fmt.Errorf("mal sahibi güncellenirken hata: %w", err)
				}
				fmt.Printf("Owner başarıyla güncellendi: %+v\n", owner)
			} else {
				// Yeni owner oluştur
				owner, err = r.CreateOwner(txCtx, ownerInput)
				if err != nil {
					fmt.Printf("Owner oluşturma hatası: %v\n", err)
					_ = tx.Rollback()
					return nil, fmt.Errorf("mal sahibi oluşturulurken hata: %w", err)
				}
				fmt.Printf("Owner başarıyla oluşturuldu: %+v\n", owner)

				// İlişkilendirmeyi güncelle
				update := tx.JobRelations.UpdateOne(relations)
				update.SetOwner(owner)
				if _, err = update.Save(txCtx); err != nil {
					fmt.Printf("Owner ilişkilendirme hatası: %v\n", err)
					_ = tx.Rollback()
					return nil, fmt.Errorf("mal sahibi ilişkilendirilirken hata: %w", err)
				}
				fmt.Println("Owner ilişkilendirmesi başarıyla güncellendi")
			}
		} else {
			owner = existingRelations.Edges.Owner
		}

		// Contractor işlemi
		if input.ContractorInput != nil {
			fmt.Println("Contractor işlemi başlıyor...")
			contractorInput := *input.ContractorInput
			contractorInput.YibfNo = &input.YibfNo

			if existingRelations.Edges.Contractor != nil {
				// Mevcut contractor'ı güncelle
				contractor, err = r.UpdateContractor(txCtx, contractorInput)
				if err != nil {
					fmt.Printf("Contractor güncelleme hatası: %v\n", err)
					_ = tx.Rollback()
					return nil, fmt.Errorf("yüklenici güncellenirken hata: %w", err)
				}
				fmt.Printf("Contractor başarıyla güncellendi: %+v\n", contractor)
			} else {
				// Yeni contractor oluştur
				contractor, err = r.CreateContractor(txCtx, contractorInput)
				if err != nil {
					fmt.Printf("Contractor oluşturma hatası: %v\n", err)
					_ = tx.Rollback()
					return nil, fmt.Errorf("yüklenici oluşturulurken hata: %w", err)
				}
				fmt.Printf("Contractor başarıyla oluşturuldu: %+v\n", contractor)

				// İlişkilendirmeyi güncelle
				update := tx.JobRelations.UpdateOne(relations)
				update.SetContractor(contractor)
				if _, err = update.Save(txCtx); err != nil {
					fmt.Printf("Contractor ilişkilendirme hatası: %v\n", err)
					_ = tx.Rollback()
					return nil, fmt.Errorf("yüklenici ilişkilendirilirken hata: %w", err)
				}
				fmt.Println("Contractor ilişkilendirmesi başarıyla güncellendi")
			}
		} else {
			contractor = existingRelations.Edges.Contractor
		}

		// Author işlemi
		if input.AuthorInput != nil {
			fmt.Println("Author işlemi başlıyor...")
			authorInput := *input.AuthorInput
			authorInput.YibfNo = &input.YibfNo

			if existingRelations.Edges.Author != nil {
				// Mevcut author'ı güncelle
				author, err = r.UpdateAuthor(txCtx, input.YibfNo, authorInput)
				if err != nil {
					fmt.Printf("Author güncelleme hatası: %v\n", err)
					_ = tx.Rollback()
					return nil, fmt.Errorf("proje müellifi güncellenirken hata: %w", err)
				}
				fmt.Printf("Author başarıyla güncellendi: %+v\n", author)
			} else {
				// Yeni author oluştur
				author, err = r.CreateAuthor(txCtx, authorInput)
				if err != nil {
					fmt.Printf("Author oluşturma hatası: %v\n", err)
					_ = tx.Rollback()
					return nil, fmt.Errorf("proje müellifi oluşturulurken hata: %w", err)
				}
				fmt.Printf("Author başarıyla oluşturuldu: %+v\n", author)

				// İlişkilendirmeyi güncelle
				update := tx.JobRelations.UpdateOne(relations)
				update.SetAuthor(author)
				if _, err = update.Save(txCtx); err != nil {
					fmt.Printf("Author ilişkilendirme hatası: %v\n", err)
					_ = tx.Rollback()
					return nil, fmt.Errorf("proje müellifi ilişkilendirilirken hata: %w", err)
				}
				fmt.Println("Author ilişkilendirmesi başarıyla güncellendi")
			}
		} else {
			author = existingRelations.Edges.Author
		}

		// Supervisor işlemi
		if input.SupervisorInput != nil {
			fmt.Println("Supervisor işlemi başlıyor...")
			supervisorInput := *input.SupervisorInput
			supervisorInput.YibfNo = &input.YibfNo

			if existingRelations.Edges.Supervisor != nil {
				// Mevcut supervisor'ı güncelle
				supervisor, err = r.UpdateSupervisor(txCtx, supervisorInput)
				if err != nil {
					fmt.Printf("Supervisor güncelleme hatası: %v\n", err)
					_ = tx.Rollback()
					return nil, fmt.Errorf("şantiye şefi güncellenirken hata: %w", err)
				}
				fmt.Printf("Supervisor başarıyla güncellendi: %+v\n", supervisor)
			} else {
				// Yeni supervisor oluştur
				supervisor, err = r.CreateSupervisor(txCtx, supervisorInput)
				if err != nil {
					fmt.Printf("Supervisor oluşturma hatası: %v\n", err)
					_ = tx.Rollback()
					return nil, fmt.Errorf("şantiye şefi oluşturulurken hata: %w", err)
				}
				fmt.Printf("Supervisor başarıyla oluşturuldu: %+v\n", supervisor)

				// İlişkilendirmeyi güncelle
				update := tx.JobRelations.UpdateOne(relations)
				update.SetSupervisor(supervisor)
				if _, err = update.Save(txCtx); err != nil {
					fmt.Printf("Supervisor ilişkilendirme hatası: %v\n", err)
					_ = tx.Rollback()
					return nil, fmt.Errorf("şantiye şefi ilişkilendirilirken hata: %w", err)
				}
				fmt.Println("Supervisor ilişkilendirmesi başarıyla güncellendi")
			}
		} else {
			supervisor = existingRelations.Edges.Supervisor
		}

	} else {
		fmt.Println("Kayıt bulunamadı, yeni kayıt oluşturulacak...")

		// İş oluşturma - Bu işlem JobRelations'ı da oluşturacak
		fmt.Println("İş oluşturma başlıyor...")
		jobInput := *input.JobInput
		jobInput.YibfNo = &input.YibfNo
		job, err = r.CreateJob(txCtx, jobInput)
		if err != nil {
			fmt.Printf("İş oluşturma hatası: %v\n", err)
			_ = tx.Rollback()
			return nil, fmt.Errorf("iş oluşturulurken hata: %w", err)
		}
		fmt.Printf("İş başarıyla oluşturuldu: %+v\n", job)

		// CreateJob işlemi JobRelations'ı oluşturduğu için, oluşturulan relations'ı bulalım
		relations, err = tx.JobRelations.Query().
			Where(jobrelations.YibfNo(input.YibfNo)).
			Only(txCtx)

		if err != nil {
			fmt.Printf("JobRelations sorgulama hatası: %v\n", err)
			_ = tx.Rollback()
			return nil, fmt.Errorf("iş ilişkileri sorgulanırken hata: %w", err)
		}

		// Owner oluşturma
		if input.OwnerInput != nil {
			fmt.Println("Owner oluşturma başlıyor...")
			ownerInput := *input.OwnerInput
			ownerInput.YibfNo = &input.YibfNo
			owner, err = r.CreateOwner(txCtx, ownerInput)
			if err != nil {
				fmt.Printf("Owner oluşturma hatası: %v\n", err)
				_ = tx.Rollback()
				return nil, fmt.Errorf("mal sahibi oluşturulurken hata: %w", err)
			}
			fmt.Printf("Owner başarıyla oluşturuldu: %+v\n", owner)

			// İlişkilendirmeyi güncelle
			update := tx.JobRelations.UpdateOne(relations)
			update.SetOwner(owner)
			if _, err = update.Save(txCtx); err != nil {
				fmt.Printf("Owner ilişkilendirme hatası: %v\n", err)
				_ = tx.Rollback()
				return nil, fmt.Errorf("mal sahibi ilişkilendirilirken hata: %w", err)
			}
			fmt.Println("Owner ilişkilendirmesi başarıyla güncellendi")
		}

		// Contractor oluşturma
		if input.ContractorInput != nil {
			fmt.Println("Contractor oluşturma başlıyor...")
			contractorInput := *input.ContractorInput
			contractorInput.YibfNo = &input.YibfNo
			contractor, err = r.CreateContractor(txCtx, contractorInput)
			if err != nil {
				fmt.Printf("Contractor oluşturma hatası: %v\n", err)
				_ = tx.Rollback()
				return nil, fmt.Errorf("yüklenici oluşturulurken hata: %w", err)
			}
			fmt.Printf("Contractor başarıyla oluşturuldu: %+v\n", contractor)

			// İlişkilendirmeyi güncelle
			update := tx.JobRelations.UpdateOne(relations)
			update.SetContractor(contractor)
			if _, err = update.Save(txCtx); err != nil {
				fmt.Printf("Contractor ilişkilendirme hatası: %v\n", err)
				_ = tx.Rollback()
				return nil, fmt.Errorf("yüklenici ilişkilendirilirken hata: %w", err)
			}
			fmt.Println("Contractor ilişkilendirmesi başarıyla güncellendi")
		}

		// Author oluşturma
		if input.AuthorInput != nil {
			fmt.Println("Author oluşturma başlıyor...")
			authorInput := *input.AuthorInput
			authorInput.YibfNo = &input.YibfNo
			author, err = r.CreateAuthor(txCtx, authorInput)
			if err != nil {
				fmt.Printf("Author oluşturma hatası: %v\n", err)
				_ = tx.Rollback()
				return nil, fmt.Errorf("proje müellifi oluşturulurken hata: %w", err)
			}
			fmt.Printf("Author başarıyla oluşturuldu: %+v\n", author)

			// İlişkilendirmeyi güncelle
			update := tx.JobRelations.UpdateOne(relations)
			update.SetAuthor(author)
			if _, err = update.Save(txCtx); err != nil {
				fmt.Printf("Author ilişkilendirme hatası: %v\n", err)
				_ = tx.Rollback()
				return nil, fmt.Errorf("proje müellifi ilişkilendirilirken hata: %w", err)
			}
			fmt.Println("Author ilişkilendirmesi başarıyla güncellendi")
		}

		// Supervisor oluşturma
		if input.SupervisorInput != nil {
			fmt.Println("Supervisor oluşturma başlıyor...")
			supervisorInput := *input.SupervisorInput
			supervisorInput.YibfNo = &input.YibfNo
			supervisor, err = r.CreateSupervisor(txCtx, supervisorInput)
			if err != nil {
				fmt.Printf("Supervisor oluşturma hatası: %v\n", err)
				_ = tx.Rollback()
				return nil, fmt.Errorf("şantiye şefi oluşturulurken hata: %w", err)
			}
			fmt.Printf("Supervisor başarıyla oluşturuldu: %+v\n", supervisor)

			// İlişkilendirmeyi güncelle
			update := tx.JobRelations.UpdateOne(relations)
			update.SetSupervisor(supervisor)
			if _, err = update.Save(txCtx); err != nil {
				fmt.Printf("Supervisor ilişkilendirme hatası: %v\n", err)
				_ = tx.Rollback()
				return nil, fmt.Errorf("şantiye şefi ilişkilendirilirken hata: %w", err)
			}
			fmt.Println("Supervisor ilişkilendirmesi başarıyla güncellendi")
		}
	}

	// Mühendis ilişkilerini güncelle (opsiyonel)
	var jobEngineer *model.JobEngineer
	if input.EngineerInput != nil {
		fmt.Println("Mühendis ilişkileri güncelleme başlıyor...")
		engineerInput := *input.EngineerInput
		engineerInput.YibfNo = &input.YibfNo
		engineers, err := helpers.ValidateAndGetEngineers(txCtx, engineerInput)
		if err != nil {
			fmt.Printf("Mühendis doğrulama hatası: %v\n", err)
			_ = tx.Rollback()
			return nil, fmt.Errorf("mühendisler doğrulanırken hata: %w", err)
		}
		fmt.Printf("Mühendisler başarıyla doğrulandı: %+v\n", engineers)

		update := tx.JobRelations.UpdateOne(relations)
		if inspector, ok := engineers["inspector"]; ok {
			update.SetInspector(inspector)
		}
		if static, ok := engineers["static"]; ok {
			update.SetStatic(static)
		}
		if architect, ok := engineers["architect"]; ok {
			update.SetArchitect(architect)
		}
		if mechanic, ok := engineers["mechanic"]; ok {
			update.SetMechanic(mechanic)
		}
		if electric, ok := engineers["electric"]; ok {
			update.SetElectric(electric)
		}
		if controller, ok := engineers["controller"]; ok {
			update.SetController(controller)
		}
		if mechanicController, ok := engineers["mechanicController"]; ok {
			update.SetMechaniccontroller(mechanicController)
		}
		if electricController, ok := engineers["electricController"]; ok {
			update.SetElectriccontroller(electricController)
		}

		if relations, err = update.Save(txCtx); err != nil {
			fmt.Printf("Mühendis ilişkileri güncelleme hatası: %v\n", err)
			_ = tx.Rollback()
			return nil, fmt.Errorf("mühendis ilişkileri güncellenirken hata: %w", err)
		}
		fmt.Println("Mühendis ilişkileri başarıyla güncellendi")
	}

	// JobEngineer bilgilerini al
	jobEngineer = &model.JobEngineer{
		YibfNo:             &relations.YibfNo,
		Inspector:          relations.Edges.Inspector,
		Static:             relations.Edges.Static,
		Architect:          relations.Edges.Architect,
		Mechanic:           relations.Edges.Mechanic,
		Electric:           relations.Edges.Electric,
		Controller:         relations.Edges.Controller,
		MechanicController: relations.Edges.Mechaniccontroller,
		ElectricController: relations.Edges.Electriccontroller,
	}

	// Transaction'ı commit et
	fmt.Println("Transaction commit ediliyor...")
	if err := tx.Commit(); err != nil {
		fmt.Printf("Transaction commit hatası: %v\n", err)
		return nil, fmt.Errorf("değişiklikler kaydedilirken hata: %w", err)
	}
	fmt.Println("Transaction başarıyla commit edildi")

	return &model.JobBatchResult{
		Job:        job,
		Owner:      owner,
		Contractor: contractor,
		Author:     author,
		Supervisor: supervisor,
		Engineer:   jobEngineer,
	}, nil
}

// JobBatchQuery is the resolver for the jobBatchQuery field.
func (r *queryResolver) JobBatchQuery(ctx context.Context, yibfNo *int) ([]*model.JobBatchResult, error) {
	client := middlewares.GetClientFromContext(ctx)
	if client == nil {
		return nil, fmt.Errorf("client nil")
	}

	// Query builder'ı başlat
	query := client.JobRelations.Query().
		Where(jobrelations.HasJobWith(jobdetail.StateNEQ("Bitmiş"))).
		WithCompany().
		WithJob().
		WithOwner().
		WithContractor().
		WithAuthor().
		WithSupervisor().
		WithProgress().
		WithInspector().
		WithStatic().
		WithArchitect().
		WithMechanic().
		WithElectric().
		WithController().
		WithMechaniccontroller().
		WithElectriccontroller()

	// Eğer yibfNo belirtilmişse filtreleme yap
	if yibfNo != nil {
		query = query.Where(jobrelations.YibfNo(*yibfNo))
	}

	// Tüm kayıtları getir
	relations, err := query.All(ctx)
	if err != nil {
		return nil, fmt.Errorf("kayıtlar aranırken hata oluştu: %w", err)
	}

	// Sonuçları dönüştür
	var results []*model.JobBatchResult
	for _, relation := range relations {
		// JobEngineer bilgilerini hazırla
		jobEngineer := &model.JobEngineer{
			YibfNo:             &relation.YibfNo,
			Inspector:          relation.Edges.Inspector,
			Static:             relation.Edges.Static,
			Architect:          relation.Edges.Architect,
			Mechanic:           relation.Edges.Mechanic,
			Electric:           relation.Edges.Electric,
			Controller:         relation.Edges.Controller,
			MechanicController: relation.Edges.Mechaniccontroller,
			ElectricController: relation.Edges.Electriccontroller,
		}

		// Her bir kaydı JobBatchResult'a dönüştür
		result := &model.JobBatchResult{
			Job:        relation.Edges.Job,
			Owner:      relation.Edges.Owner,
			Contractor: relation.Edges.Contractor,
			Author:     relation.Edges.Author,
			Supervisor: relation.Edges.Supervisor,
			Engineer:   jobEngineer,
			Progress:   relation.Edges.Progress,
			Company:    relation.Edges.Company,
		}

		results = append(results, result)
	}

	if len(results) == 0 {
		if yibfNo != nil {
			return nil, fmt.Errorf("%d Yibf No için kayıt bulunamadı", *yibfNo)
		}
		return []*model.JobBatchResult{}, nil
	}

	return results, nil
}
