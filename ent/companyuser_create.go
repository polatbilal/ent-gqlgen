// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/polatbilal/gqlgen-ent/ent/companydetail"
	"github.com/polatbilal/gqlgen-ent/ent/companyuser"
	"github.com/polatbilal/gqlgen-ent/ent/user"
)

// CompanyUserCreate is the builder for creating a CompanyUser entity.
type CompanyUserCreate struct {
	config
	mutation *CompanyUserMutation
	hooks    []Hook
}

// SetCompanyID sets the "company" edge to the CompanyDetail entity by ID.
func (cuc *CompanyUserCreate) SetCompanyID(id int) *CompanyUserCreate {
	cuc.mutation.SetCompanyID(id)
	return cuc
}

// SetNillableCompanyID sets the "company" edge to the CompanyDetail entity by ID if the given value is not nil.
func (cuc *CompanyUserCreate) SetNillableCompanyID(id *int) *CompanyUserCreate {
	if id != nil {
		cuc = cuc.SetCompanyID(*id)
	}
	return cuc
}

// SetCompany sets the "company" edge to the CompanyDetail entity.
func (cuc *CompanyUserCreate) SetCompany(c *CompanyDetail) *CompanyUserCreate {
	return cuc.SetCompanyID(c.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cuc *CompanyUserCreate) SetUserID(id int) *CompanyUserCreate {
	cuc.mutation.SetUserID(id)
	return cuc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (cuc *CompanyUserCreate) SetNillableUserID(id *int) *CompanyUserCreate {
	if id != nil {
		cuc = cuc.SetUserID(*id)
	}
	return cuc
}

// SetUser sets the "user" edge to the User entity.
func (cuc *CompanyUserCreate) SetUser(u *User) *CompanyUserCreate {
	return cuc.SetUserID(u.ID)
}

// Mutation returns the CompanyUserMutation object of the builder.
func (cuc *CompanyUserCreate) Mutation() *CompanyUserMutation {
	return cuc.mutation
}

// Save creates the CompanyUser in the database.
func (cuc *CompanyUserCreate) Save(ctx context.Context) (*CompanyUser, error) {
	return withHooks(ctx, cuc.sqlSave, cuc.mutation, cuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cuc *CompanyUserCreate) SaveX(ctx context.Context) *CompanyUser {
	v, err := cuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cuc *CompanyUserCreate) Exec(ctx context.Context) error {
	_, err := cuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuc *CompanyUserCreate) ExecX(ctx context.Context) {
	if err := cuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuc *CompanyUserCreate) check() error {
	return nil
}

func (cuc *CompanyUserCreate) sqlSave(ctx context.Context) (*CompanyUser, error) {
	if err := cuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cuc.mutation.id = &_node.ID
	cuc.mutation.done = true
	return _node, nil
}

func (cuc *CompanyUserCreate) createSpec() (*CompanyUser, *sqlgraph.CreateSpec) {
	var (
		_node = &CompanyUser{config: cuc.config}
		_spec = sqlgraph.NewCreateSpec(companyuser.Table, sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt))
	)
	if nodes := cuc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companyuser.CompanyTable,
			Columns: []string{companyuser.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cuc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companyuser.UserTable,
			Columns: []string{companyuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CompanyUserCreateBulk is the builder for creating many CompanyUser entities in bulk.
type CompanyUserCreateBulk struct {
	config
	err      error
	builders []*CompanyUserCreate
}

// Save creates the CompanyUser entities in the database.
func (cucb *CompanyUserCreateBulk) Save(ctx context.Context) ([]*CompanyUser, error) {
	if cucb.err != nil {
		return nil, cucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cucb.builders))
	nodes := make([]*CompanyUser, len(cucb.builders))
	mutators := make([]Mutator, len(cucb.builders))
	for i := range cucb.builders {
		func(i int, root context.Context) {
			builder := cucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompanyUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cucb *CompanyUserCreateBulk) SaveX(ctx context.Context) []*CompanyUser {
	v, err := cucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cucb *CompanyUserCreateBulk) Exec(ctx context.Context) error {
	_, err := cucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cucb *CompanyUserCreateBulk) ExecX(ctx context.Context) {
	if err := cucb.Exec(ctx); err != nil {
		panic(err)
	}
}
