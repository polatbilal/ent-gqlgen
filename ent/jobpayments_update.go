// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/polatbilal/gqlgen-ent/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/ent/jobpayments"
	"github.com/polatbilal/gqlgen-ent/ent/predicate"
)

// JobPaymentsUpdate is the builder for updating JobPayments entities.
type JobPaymentsUpdate struct {
	config
	hooks    []Hook
	mutation *JobPaymentsMutation
}

// Where appends a list predicates to the JobPaymentsUpdate builder.
func (jpu *JobPaymentsUpdate) Where(ps ...predicate.JobPayments) *JobPaymentsUpdate {
	jpu.mutation.Where(ps...)
	return jpu
}

// SetDate sets the "Date" field.
func (jpu *JobPaymentsUpdate) SetDate(t time.Time) *JobPaymentsUpdate {
	jpu.mutation.SetDate(t)
	return jpu
}

// SetNillableDate sets the "Date" field if the given value is not nil.
func (jpu *JobPaymentsUpdate) SetNillableDate(t *time.Time) *JobPaymentsUpdate {
	if t != nil {
		jpu.SetDate(*t)
	}
	return jpu
}

// SetAmount sets the "Amount" field.
func (jpu *JobPaymentsUpdate) SetAmount(i int) *JobPaymentsUpdate {
	jpu.mutation.ResetAmount()
	jpu.mutation.SetAmount(i)
	return jpu
}

// SetNillableAmount sets the "Amount" field if the given value is not nil.
func (jpu *JobPaymentsUpdate) SetNillableAmount(i *int) *JobPaymentsUpdate {
	if i != nil {
		jpu.SetAmount(*i)
	}
	return jpu
}

// AddAmount adds i to the "Amount" field.
func (jpu *JobPaymentsUpdate) AddAmount(i int) *JobPaymentsUpdate {
	jpu.mutation.AddAmount(i)
	return jpu
}

// ClearAmount clears the value of the "Amount" field.
func (jpu *JobPaymentsUpdate) ClearAmount() *JobPaymentsUpdate {
	jpu.mutation.ClearAmount()
	return jpu
}

// SetDescription sets the "Description" field.
func (jpu *JobPaymentsUpdate) SetDescription(s string) *JobPaymentsUpdate {
	jpu.mutation.SetDescription(s)
	return jpu
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (jpu *JobPaymentsUpdate) SetNillableDescription(s *string) *JobPaymentsUpdate {
	if s != nil {
		jpu.SetDescription(*s)
	}
	return jpu
}

// ClearDescription clears the value of the "Description" field.
func (jpu *JobPaymentsUpdate) ClearDescription() *JobPaymentsUpdate {
	jpu.mutation.ClearDescription()
	return jpu
}

// SetStatus sets the "Status" field.
func (jpu *JobPaymentsUpdate) SetStatus(s string) *JobPaymentsUpdate {
	jpu.mutation.SetStatus(s)
	return jpu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (jpu *JobPaymentsUpdate) SetNillableStatus(s *string) *JobPaymentsUpdate {
	if s != nil {
		jpu.SetStatus(*s)
	}
	return jpu
}

// ClearStatus clears the value of the "Status" field.
func (jpu *JobPaymentsUpdate) ClearStatus() *JobPaymentsUpdate {
	jpu.mutation.ClearStatus()
	return jpu
}

// SetPercentage sets the "Percentage" field.
func (jpu *JobPaymentsUpdate) SetPercentage(f float64) *JobPaymentsUpdate {
	jpu.mutation.ResetPercentage()
	jpu.mutation.SetPercentage(f)
	return jpu
}

// SetNillablePercentage sets the "Percentage" field if the given value is not nil.
func (jpu *JobPaymentsUpdate) SetNillablePercentage(f *float64) *JobPaymentsUpdate {
	if f != nil {
		jpu.SetPercentage(*f)
	}
	return jpu
}

// AddPercentage adds f to the "Percentage" field.
func (jpu *JobPaymentsUpdate) AddPercentage(f float64) *JobPaymentsUpdate {
	jpu.mutation.AddPercentage(f)
	return jpu
}

// ClearPercentage clears the value of the "Percentage" field.
func (jpu *JobPaymentsUpdate) ClearPercentage() *JobPaymentsUpdate {
	jpu.mutation.ClearPercentage()
	return jpu
}

// SetCreatedAt sets the "CreatedAt" field.
func (jpu *JobPaymentsUpdate) SetCreatedAt(t time.Time) *JobPaymentsUpdate {
	jpu.mutation.SetCreatedAt(t)
	return jpu
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (jpu *JobPaymentsUpdate) SetNillableCreatedAt(t *time.Time) *JobPaymentsUpdate {
	if t != nil {
		jpu.SetCreatedAt(*t)
	}
	return jpu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (jpu *JobPaymentsUpdate) SetUpdatedAt(t time.Time) *JobPaymentsUpdate {
	jpu.mutation.SetUpdatedAt(t)
	return jpu
}

// SetPaymentsID sets the "payments" edge to the JobDetail entity by ID.
func (jpu *JobPaymentsUpdate) SetPaymentsID(id int) *JobPaymentsUpdate {
	jpu.mutation.SetPaymentsID(id)
	return jpu
}

// SetNillablePaymentsID sets the "payments" edge to the JobDetail entity by ID if the given value is not nil.
func (jpu *JobPaymentsUpdate) SetNillablePaymentsID(id *int) *JobPaymentsUpdate {
	if id != nil {
		jpu = jpu.SetPaymentsID(*id)
	}
	return jpu
}

// SetPayments sets the "payments" edge to the JobDetail entity.
func (jpu *JobPaymentsUpdate) SetPayments(j *JobDetail) *JobPaymentsUpdate {
	return jpu.SetPaymentsID(j.ID)
}

// Mutation returns the JobPaymentsMutation object of the builder.
func (jpu *JobPaymentsUpdate) Mutation() *JobPaymentsMutation {
	return jpu.mutation
}

// ClearPayments clears the "payments" edge to the JobDetail entity.
func (jpu *JobPaymentsUpdate) ClearPayments() *JobPaymentsUpdate {
	jpu.mutation.ClearPayments()
	return jpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jpu *JobPaymentsUpdate) Save(ctx context.Context) (int, error) {
	jpu.defaults()
	return withHooks(ctx, jpu.sqlSave, jpu.mutation, jpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jpu *JobPaymentsUpdate) SaveX(ctx context.Context) int {
	affected, err := jpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jpu *JobPaymentsUpdate) Exec(ctx context.Context) error {
	_, err := jpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jpu *JobPaymentsUpdate) ExecX(ctx context.Context) {
	if err := jpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jpu *JobPaymentsUpdate) defaults() {
	if _, ok := jpu.mutation.UpdatedAt(); !ok {
		v := jobpayments.UpdateDefaultUpdatedAt()
		jpu.mutation.SetUpdatedAt(v)
	}
}

func (jpu *JobPaymentsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(jobpayments.Table, jobpayments.Columns, sqlgraph.NewFieldSpec(jobpayments.FieldID, field.TypeInt))
	if ps := jpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jpu.mutation.Date(); ok {
		_spec.SetField(jobpayments.FieldDate, field.TypeTime, value)
	}
	if value, ok := jpu.mutation.Amount(); ok {
		_spec.SetField(jobpayments.FieldAmount, field.TypeInt, value)
	}
	if value, ok := jpu.mutation.AddedAmount(); ok {
		_spec.AddField(jobpayments.FieldAmount, field.TypeInt, value)
	}
	if jpu.mutation.AmountCleared() {
		_spec.ClearField(jobpayments.FieldAmount, field.TypeInt)
	}
	if value, ok := jpu.mutation.Description(); ok {
		_spec.SetField(jobpayments.FieldDescription, field.TypeString, value)
	}
	if jpu.mutation.DescriptionCleared() {
		_spec.ClearField(jobpayments.FieldDescription, field.TypeString)
	}
	if value, ok := jpu.mutation.Status(); ok {
		_spec.SetField(jobpayments.FieldStatus, field.TypeString, value)
	}
	if jpu.mutation.StatusCleared() {
		_spec.ClearField(jobpayments.FieldStatus, field.TypeString)
	}
	if value, ok := jpu.mutation.Percentage(); ok {
		_spec.SetField(jobpayments.FieldPercentage, field.TypeFloat64, value)
	}
	if value, ok := jpu.mutation.AddedPercentage(); ok {
		_spec.AddField(jobpayments.FieldPercentage, field.TypeFloat64, value)
	}
	if jpu.mutation.PercentageCleared() {
		_spec.ClearField(jobpayments.FieldPercentage, field.TypeFloat64)
	}
	if value, ok := jpu.mutation.CreatedAt(); ok {
		_spec.SetField(jobpayments.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := jpu.mutation.UpdatedAt(); ok {
		_spec.SetField(jobpayments.FieldUpdatedAt, field.TypeTime, value)
	}
	if jpu.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobpayments.PaymentsTable,
			Columns: []string{jobpayments.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpu.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobpayments.PaymentsTable,
			Columns: []string{jobpayments.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobpayments.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jpu.mutation.done = true
	return n, nil
}

// JobPaymentsUpdateOne is the builder for updating a single JobPayments entity.
type JobPaymentsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobPaymentsMutation
}

// SetDate sets the "Date" field.
func (jpuo *JobPaymentsUpdateOne) SetDate(t time.Time) *JobPaymentsUpdateOne {
	jpuo.mutation.SetDate(t)
	return jpuo
}

// SetNillableDate sets the "Date" field if the given value is not nil.
func (jpuo *JobPaymentsUpdateOne) SetNillableDate(t *time.Time) *JobPaymentsUpdateOne {
	if t != nil {
		jpuo.SetDate(*t)
	}
	return jpuo
}

// SetAmount sets the "Amount" field.
func (jpuo *JobPaymentsUpdateOne) SetAmount(i int) *JobPaymentsUpdateOne {
	jpuo.mutation.ResetAmount()
	jpuo.mutation.SetAmount(i)
	return jpuo
}

// SetNillableAmount sets the "Amount" field if the given value is not nil.
func (jpuo *JobPaymentsUpdateOne) SetNillableAmount(i *int) *JobPaymentsUpdateOne {
	if i != nil {
		jpuo.SetAmount(*i)
	}
	return jpuo
}

// AddAmount adds i to the "Amount" field.
func (jpuo *JobPaymentsUpdateOne) AddAmount(i int) *JobPaymentsUpdateOne {
	jpuo.mutation.AddAmount(i)
	return jpuo
}

// ClearAmount clears the value of the "Amount" field.
func (jpuo *JobPaymentsUpdateOne) ClearAmount() *JobPaymentsUpdateOne {
	jpuo.mutation.ClearAmount()
	return jpuo
}

// SetDescription sets the "Description" field.
func (jpuo *JobPaymentsUpdateOne) SetDescription(s string) *JobPaymentsUpdateOne {
	jpuo.mutation.SetDescription(s)
	return jpuo
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (jpuo *JobPaymentsUpdateOne) SetNillableDescription(s *string) *JobPaymentsUpdateOne {
	if s != nil {
		jpuo.SetDescription(*s)
	}
	return jpuo
}

// ClearDescription clears the value of the "Description" field.
func (jpuo *JobPaymentsUpdateOne) ClearDescription() *JobPaymentsUpdateOne {
	jpuo.mutation.ClearDescription()
	return jpuo
}

// SetStatus sets the "Status" field.
func (jpuo *JobPaymentsUpdateOne) SetStatus(s string) *JobPaymentsUpdateOne {
	jpuo.mutation.SetStatus(s)
	return jpuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (jpuo *JobPaymentsUpdateOne) SetNillableStatus(s *string) *JobPaymentsUpdateOne {
	if s != nil {
		jpuo.SetStatus(*s)
	}
	return jpuo
}

// ClearStatus clears the value of the "Status" field.
func (jpuo *JobPaymentsUpdateOne) ClearStatus() *JobPaymentsUpdateOne {
	jpuo.mutation.ClearStatus()
	return jpuo
}

// SetPercentage sets the "Percentage" field.
func (jpuo *JobPaymentsUpdateOne) SetPercentage(f float64) *JobPaymentsUpdateOne {
	jpuo.mutation.ResetPercentage()
	jpuo.mutation.SetPercentage(f)
	return jpuo
}

// SetNillablePercentage sets the "Percentage" field if the given value is not nil.
func (jpuo *JobPaymentsUpdateOne) SetNillablePercentage(f *float64) *JobPaymentsUpdateOne {
	if f != nil {
		jpuo.SetPercentage(*f)
	}
	return jpuo
}

// AddPercentage adds f to the "Percentage" field.
func (jpuo *JobPaymentsUpdateOne) AddPercentage(f float64) *JobPaymentsUpdateOne {
	jpuo.mutation.AddPercentage(f)
	return jpuo
}

// ClearPercentage clears the value of the "Percentage" field.
func (jpuo *JobPaymentsUpdateOne) ClearPercentage() *JobPaymentsUpdateOne {
	jpuo.mutation.ClearPercentage()
	return jpuo
}

// SetCreatedAt sets the "CreatedAt" field.
func (jpuo *JobPaymentsUpdateOne) SetCreatedAt(t time.Time) *JobPaymentsUpdateOne {
	jpuo.mutation.SetCreatedAt(t)
	return jpuo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (jpuo *JobPaymentsUpdateOne) SetNillableCreatedAt(t *time.Time) *JobPaymentsUpdateOne {
	if t != nil {
		jpuo.SetCreatedAt(*t)
	}
	return jpuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (jpuo *JobPaymentsUpdateOne) SetUpdatedAt(t time.Time) *JobPaymentsUpdateOne {
	jpuo.mutation.SetUpdatedAt(t)
	return jpuo
}

// SetPaymentsID sets the "payments" edge to the JobDetail entity by ID.
func (jpuo *JobPaymentsUpdateOne) SetPaymentsID(id int) *JobPaymentsUpdateOne {
	jpuo.mutation.SetPaymentsID(id)
	return jpuo
}

// SetNillablePaymentsID sets the "payments" edge to the JobDetail entity by ID if the given value is not nil.
func (jpuo *JobPaymentsUpdateOne) SetNillablePaymentsID(id *int) *JobPaymentsUpdateOne {
	if id != nil {
		jpuo = jpuo.SetPaymentsID(*id)
	}
	return jpuo
}

// SetPayments sets the "payments" edge to the JobDetail entity.
func (jpuo *JobPaymentsUpdateOne) SetPayments(j *JobDetail) *JobPaymentsUpdateOne {
	return jpuo.SetPaymentsID(j.ID)
}

// Mutation returns the JobPaymentsMutation object of the builder.
func (jpuo *JobPaymentsUpdateOne) Mutation() *JobPaymentsMutation {
	return jpuo.mutation
}

// ClearPayments clears the "payments" edge to the JobDetail entity.
func (jpuo *JobPaymentsUpdateOne) ClearPayments() *JobPaymentsUpdateOne {
	jpuo.mutation.ClearPayments()
	return jpuo
}

// Where appends a list predicates to the JobPaymentsUpdate builder.
func (jpuo *JobPaymentsUpdateOne) Where(ps ...predicate.JobPayments) *JobPaymentsUpdateOne {
	jpuo.mutation.Where(ps...)
	return jpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jpuo *JobPaymentsUpdateOne) Select(field string, fields ...string) *JobPaymentsUpdateOne {
	jpuo.fields = append([]string{field}, fields...)
	return jpuo
}

// Save executes the query and returns the updated JobPayments entity.
func (jpuo *JobPaymentsUpdateOne) Save(ctx context.Context) (*JobPayments, error) {
	jpuo.defaults()
	return withHooks(ctx, jpuo.sqlSave, jpuo.mutation, jpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jpuo *JobPaymentsUpdateOne) SaveX(ctx context.Context) *JobPayments {
	node, err := jpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jpuo *JobPaymentsUpdateOne) Exec(ctx context.Context) error {
	_, err := jpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jpuo *JobPaymentsUpdateOne) ExecX(ctx context.Context) {
	if err := jpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jpuo *JobPaymentsUpdateOne) defaults() {
	if _, ok := jpuo.mutation.UpdatedAt(); !ok {
		v := jobpayments.UpdateDefaultUpdatedAt()
		jpuo.mutation.SetUpdatedAt(v)
	}
}

func (jpuo *JobPaymentsUpdateOne) sqlSave(ctx context.Context) (_node *JobPayments, err error) {
	_spec := sqlgraph.NewUpdateSpec(jobpayments.Table, jobpayments.Columns, sqlgraph.NewFieldSpec(jobpayments.FieldID, field.TypeInt))
	id, ok := jpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JobPayments.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobpayments.FieldID)
		for _, f := range fields {
			if !jobpayments.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jobpayments.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jpuo.mutation.Date(); ok {
		_spec.SetField(jobpayments.FieldDate, field.TypeTime, value)
	}
	if value, ok := jpuo.mutation.Amount(); ok {
		_spec.SetField(jobpayments.FieldAmount, field.TypeInt, value)
	}
	if value, ok := jpuo.mutation.AddedAmount(); ok {
		_spec.AddField(jobpayments.FieldAmount, field.TypeInt, value)
	}
	if jpuo.mutation.AmountCleared() {
		_spec.ClearField(jobpayments.FieldAmount, field.TypeInt)
	}
	if value, ok := jpuo.mutation.Description(); ok {
		_spec.SetField(jobpayments.FieldDescription, field.TypeString, value)
	}
	if jpuo.mutation.DescriptionCleared() {
		_spec.ClearField(jobpayments.FieldDescription, field.TypeString)
	}
	if value, ok := jpuo.mutation.Status(); ok {
		_spec.SetField(jobpayments.FieldStatus, field.TypeString, value)
	}
	if jpuo.mutation.StatusCleared() {
		_spec.ClearField(jobpayments.FieldStatus, field.TypeString)
	}
	if value, ok := jpuo.mutation.Percentage(); ok {
		_spec.SetField(jobpayments.FieldPercentage, field.TypeFloat64, value)
	}
	if value, ok := jpuo.mutation.AddedPercentage(); ok {
		_spec.AddField(jobpayments.FieldPercentage, field.TypeFloat64, value)
	}
	if jpuo.mutation.PercentageCleared() {
		_spec.ClearField(jobpayments.FieldPercentage, field.TypeFloat64)
	}
	if value, ok := jpuo.mutation.CreatedAt(); ok {
		_spec.SetField(jobpayments.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := jpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(jobpayments.FieldUpdatedAt, field.TypeTime, value)
	}
	if jpuo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobpayments.PaymentsTable,
			Columns: []string{jobpayments.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpuo.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobpayments.PaymentsTable,
			Columns: []string{jobpayments.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &JobPayments{config: jpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobpayments.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jpuo.mutation.done = true
	return _node, nil
}
