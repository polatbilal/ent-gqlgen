// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gqlgen-ent/ent/jobdetail"
	"gqlgen-ent/ent/joblayer"
	"gqlgen-ent/ent/predicate"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobLayerQuery is the builder for querying JobLayer entities.
type JobLayerQuery struct {
	config
	ctx        *QueryContext
	order      []joblayer.OrderOption
	inters     []Interceptor
	predicates []predicate.JobLayer
	withLayer  *JobDetailQuery
	withFKs    bool
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*JobLayer) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the JobLayerQuery builder.
func (jlq *JobLayerQuery) Where(ps ...predicate.JobLayer) *JobLayerQuery {
	jlq.predicates = append(jlq.predicates, ps...)
	return jlq
}

// Limit the number of records to be returned by this query.
func (jlq *JobLayerQuery) Limit(limit int) *JobLayerQuery {
	jlq.ctx.Limit = &limit
	return jlq
}

// Offset to start from.
func (jlq *JobLayerQuery) Offset(offset int) *JobLayerQuery {
	jlq.ctx.Offset = &offset
	return jlq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (jlq *JobLayerQuery) Unique(unique bool) *JobLayerQuery {
	jlq.ctx.Unique = &unique
	return jlq
}

// Order specifies how the records should be ordered.
func (jlq *JobLayerQuery) Order(o ...joblayer.OrderOption) *JobLayerQuery {
	jlq.order = append(jlq.order, o...)
	return jlq
}

// QueryLayer chains the current query on the "layer" edge.
func (jlq *JobLayerQuery) QueryLayer() *JobDetailQuery {
	query := (&JobDetailClient{config: jlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(joblayer.Table, joblayer.FieldID, selector),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, joblayer.LayerTable, joblayer.LayerColumn),
		)
		fromU = sqlgraph.SetNeighbors(jlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first JobLayer entity from the query.
// Returns a *NotFoundError when no JobLayer was found.
func (jlq *JobLayerQuery) First(ctx context.Context) (*JobLayer, error) {
	nodes, err := jlq.Limit(1).All(setContextOp(ctx, jlq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{joblayer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jlq *JobLayerQuery) FirstX(ctx context.Context) *JobLayer {
	node, err := jlq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first JobLayer ID from the query.
// Returns a *NotFoundError when no JobLayer ID was found.
func (jlq *JobLayerQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jlq.Limit(1).IDs(setContextOp(ctx, jlq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{joblayer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (jlq *JobLayerQuery) FirstIDX(ctx context.Context) int {
	id, err := jlq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single JobLayer entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one JobLayer entity is found.
// Returns a *NotFoundError when no JobLayer entities are found.
func (jlq *JobLayerQuery) Only(ctx context.Context) (*JobLayer, error) {
	nodes, err := jlq.Limit(2).All(setContextOp(ctx, jlq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{joblayer.Label}
	default:
		return nil, &NotSingularError{joblayer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jlq *JobLayerQuery) OnlyX(ctx context.Context) *JobLayer {
	node, err := jlq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only JobLayer ID in the query.
// Returns a *NotSingularError when more than one JobLayer ID is found.
// Returns a *NotFoundError when no entities are found.
func (jlq *JobLayerQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jlq.Limit(2).IDs(setContextOp(ctx, jlq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{joblayer.Label}
	default:
		err = &NotSingularError{joblayer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (jlq *JobLayerQuery) OnlyIDX(ctx context.Context) int {
	id, err := jlq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of JobLayers.
func (jlq *JobLayerQuery) All(ctx context.Context) ([]*JobLayer, error) {
	ctx = setContextOp(ctx, jlq.ctx, ent.OpQueryAll)
	if err := jlq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*JobLayer, *JobLayerQuery]()
	return withInterceptors[[]*JobLayer](ctx, jlq, qr, jlq.inters)
}

// AllX is like All, but panics if an error occurs.
func (jlq *JobLayerQuery) AllX(ctx context.Context) []*JobLayer {
	nodes, err := jlq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of JobLayer IDs.
func (jlq *JobLayerQuery) IDs(ctx context.Context) (ids []int, err error) {
	if jlq.ctx.Unique == nil && jlq.path != nil {
		jlq.Unique(true)
	}
	ctx = setContextOp(ctx, jlq.ctx, ent.OpQueryIDs)
	if err = jlq.Select(joblayer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jlq *JobLayerQuery) IDsX(ctx context.Context) []int {
	ids, err := jlq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jlq *JobLayerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, jlq.ctx, ent.OpQueryCount)
	if err := jlq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, jlq, querierCount[*JobLayerQuery](), jlq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (jlq *JobLayerQuery) CountX(ctx context.Context) int {
	count, err := jlq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jlq *JobLayerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, jlq.ctx, ent.OpQueryExist)
	switch _, err := jlq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (jlq *JobLayerQuery) ExistX(ctx context.Context) bool {
	exist, err := jlq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the JobLayerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jlq *JobLayerQuery) Clone() *JobLayerQuery {
	if jlq == nil {
		return nil
	}
	return &JobLayerQuery{
		config:     jlq.config,
		ctx:        jlq.ctx.Clone(),
		order:      append([]joblayer.OrderOption{}, jlq.order...),
		inters:     append([]Interceptor{}, jlq.inters...),
		predicates: append([]predicate.JobLayer{}, jlq.predicates...),
		withLayer:  jlq.withLayer.Clone(),
		// clone intermediate query.
		sql:  jlq.sql.Clone(),
		path: jlq.path,
	}
}

// WithLayer tells the query-builder to eager-load the nodes that are connected to
// the "layer" edge. The optional arguments are used to configure the query builder of the edge.
func (jlq *JobLayerQuery) WithLayer(opts ...func(*JobDetailQuery)) *JobLayerQuery {
	query := (&JobDetailClient{config: jlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jlq.withLayer = query
	return jlq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"Name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.JobLayer.Query().
//		GroupBy(joblayer.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (jlq *JobLayerQuery) GroupBy(field string, fields ...string) *JobLayerGroupBy {
	jlq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &JobLayerGroupBy{build: jlq}
	grbuild.flds = &jlq.ctx.Fields
	grbuild.label = joblayer.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"Name,omitempty"`
//	}
//
//	client.JobLayer.Query().
//		Select(joblayer.FieldName).
//		Scan(ctx, &v)
func (jlq *JobLayerQuery) Select(fields ...string) *JobLayerSelect {
	jlq.ctx.Fields = append(jlq.ctx.Fields, fields...)
	sbuild := &JobLayerSelect{JobLayerQuery: jlq}
	sbuild.label = joblayer.Label
	sbuild.flds, sbuild.scan = &jlq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a JobLayerSelect configured with the given aggregations.
func (jlq *JobLayerQuery) Aggregate(fns ...AggregateFunc) *JobLayerSelect {
	return jlq.Select().Aggregate(fns...)
}

func (jlq *JobLayerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range jlq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, jlq); err != nil {
				return err
			}
		}
	}
	for _, f := range jlq.ctx.Fields {
		if !joblayer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if jlq.path != nil {
		prev, err := jlq.path(ctx)
		if err != nil {
			return err
		}
		jlq.sql = prev
	}
	return nil
}

func (jlq *JobLayerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*JobLayer, error) {
	var (
		nodes       = []*JobLayer{}
		withFKs     = jlq.withFKs
		_spec       = jlq.querySpec()
		loadedTypes = [1]bool{
			jlq.withLayer != nil,
		}
	)
	if jlq.withLayer != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, joblayer.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*JobLayer).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &JobLayer{config: jlq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(jlq.modifiers) > 0 {
		_spec.Modifiers = jlq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, jlq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := jlq.withLayer; query != nil {
		if err := jlq.loadLayer(ctx, query, nodes, nil,
			func(n *JobLayer, e *JobDetail) { n.Edges.Layer = e }); err != nil {
			return nil, err
		}
	}
	for i := range jlq.loadTotal {
		if err := jlq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (jlq *JobLayerQuery) loadLayer(ctx context.Context, query *JobDetailQuery, nodes []*JobLayer, init func(*JobLayer), assign func(*JobLayer, *JobDetail)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobLayer)
	for i := range nodes {
		if nodes[i].job_id == nil {
			continue
		}
		fk := *nodes[i].job_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(jobdetail.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "job_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (jlq *JobLayerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := jlq.querySpec()
	if len(jlq.modifiers) > 0 {
		_spec.Modifiers = jlq.modifiers
	}
	_spec.Node.Columns = jlq.ctx.Fields
	if len(jlq.ctx.Fields) > 0 {
		_spec.Unique = jlq.ctx.Unique != nil && *jlq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, jlq.driver, _spec)
}

func (jlq *JobLayerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(joblayer.Table, joblayer.Columns, sqlgraph.NewFieldSpec(joblayer.FieldID, field.TypeInt))
	_spec.From = jlq.sql
	if unique := jlq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if jlq.path != nil {
		_spec.Unique = true
	}
	if fields := jlq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, joblayer.FieldID)
		for i := range fields {
			if fields[i] != joblayer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := jlq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := jlq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := jlq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := jlq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (jlq *JobLayerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(jlq.driver.Dialect())
	t1 := builder.Table(joblayer.Table)
	columns := jlq.ctx.Fields
	if len(columns) == 0 {
		columns = joblayer.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if jlq.sql != nil {
		selector = jlq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if jlq.ctx.Unique != nil && *jlq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range jlq.predicates {
		p(selector)
	}
	for _, p := range jlq.order {
		p(selector)
	}
	if offset := jlq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jlq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// JobLayerGroupBy is the group-by builder for JobLayer entities.
type JobLayerGroupBy struct {
	selector
	build *JobLayerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jlgb *JobLayerGroupBy) Aggregate(fns ...AggregateFunc) *JobLayerGroupBy {
	jlgb.fns = append(jlgb.fns, fns...)
	return jlgb
}

// Scan applies the selector query and scans the result into the given value.
func (jlgb *JobLayerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jlgb.build.ctx, ent.OpQueryGroupBy)
	if err := jlgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobLayerQuery, *JobLayerGroupBy](ctx, jlgb.build, jlgb, jlgb.build.inters, v)
}

func (jlgb *JobLayerGroupBy) sqlScan(ctx context.Context, root *JobLayerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(jlgb.fns))
	for _, fn := range jlgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*jlgb.flds)+len(jlgb.fns))
		for _, f := range *jlgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*jlgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jlgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// JobLayerSelect is the builder for selecting fields of JobLayer entities.
type JobLayerSelect struct {
	*JobLayerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (jls *JobLayerSelect) Aggregate(fns ...AggregateFunc) *JobLayerSelect {
	jls.fns = append(jls.fns, fns...)
	return jls
}

// Scan applies the selector query and scans the result into the given value.
func (jls *JobLayerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jls.ctx, ent.OpQuerySelect)
	if err := jls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobLayerQuery, *JobLayerSelect](ctx, jls.JobLayerQuery, jls, jls.inters, v)
}

func (jls *JobLayerSelect) sqlScan(ctx context.Context, root *JobLayerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(jls.fns))
	for _, fn := range jls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*jls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
