// Code generated by ent, DO NOT EDIT.

package companydetail

import (
	"gqlgen-ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldID, id))
}

// CompanyCode applies equality check predicate on the "CompanyCode" field. It's identical to CompanyCodeEQ.
func CompanyCode(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldCompanyCode, v))
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldName, v))
}

// Address applies equality check predicate on the "Address" field. It's identical to AddressEQ.
func Address(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldAddress, v))
}

// City applies equality check predicate on the "City" field. It's identical to CityEQ.
func City(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldCity, v))
}

// State applies equality check predicate on the "State" field. It's identical to StateEQ.
func State(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldState, v))
}

// Phone applies equality check predicate on the "Phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldPhone, v))
}

// Fax applies equality check predicate on the "Fax" field. It's identical to FaxEQ.
func Fax(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldFax, v))
}

// Mobile applies equality check predicate on the "Mobile" field. It's identical to MobileEQ.
func Mobile(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldMobile, v))
}

// Email applies equality check predicate on the "Email" field. It's identical to EmailEQ.
func Email(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldEmail, v))
}

// Website applies equality check predicate on the "Website" field. It's identical to WebsiteEQ.
func Website(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldWebsite, v))
}

// TaxAdmin applies equality check predicate on the "TaxAdmin" field. It's identical to TaxAdminEQ.
func TaxAdmin(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldTaxAdmin, v))
}

// TaxNo applies equality check predicate on the "TaxNo" field. It's identical to TaxNoEQ.
func TaxNo(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldTaxNo, v))
}

// Commerce applies equality check predicate on the "Commerce" field. It's identical to CommerceEQ.
func Commerce(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldCommerce, v))
}

// CommerceReg applies equality check predicate on the "CommerceReg" field. It's identical to CommerceRegEQ.
func CommerceReg(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldCommerceReg, v))
}

// VisaDate applies equality check predicate on the "VisaDate" field. It's identical to VisaDateEQ.
func VisaDate(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldVisaDate, v))
}

// CreatedAt applies equality check predicate on the "CreatedAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// CompanyCodeEQ applies the EQ predicate on the "CompanyCode" field.
func CompanyCodeEQ(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldCompanyCode, v))
}

// CompanyCodeNEQ applies the NEQ predicate on the "CompanyCode" field.
func CompanyCodeNEQ(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldCompanyCode, v))
}

// CompanyCodeIn applies the In predicate on the "CompanyCode" field.
func CompanyCodeIn(vs ...int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldCompanyCode, vs...))
}

// CompanyCodeNotIn applies the NotIn predicate on the "CompanyCode" field.
func CompanyCodeNotIn(vs ...int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldCompanyCode, vs...))
}

// CompanyCodeGT applies the GT predicate on the "CompanyCode" field.
func CompanyCodeGT(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldCompanyCode, v))
}

// CompanyCodeGTE applies the GTE predicate on the "CompanyCode" field.
func CompanyCodeGTE(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldCompanyCode, v))
}

// CompanyCodeLT applies the LT predicate on the "CompanyCode" field.
func CompanyCodeLT(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldCompanyCode, v))
}

// CompanyCodeLTE applies the LTE predicate on the "CompanyCode" field.
func CompanyCodeLTE(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldCompanyCode, v))
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldName, v))
}

// AddressEQ applies the EQ predicate on the "Address" field.
func AddressEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "Address" field.
func AddressNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "Address" field.
func AddressIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "Address" field.
func AddressNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "Address" field.
func AddressGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "Address" field.
func AddressGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "Address" field.
func AddressLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "Address" field.
func AddressLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "Address" field.
func AddressContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "Address" field.
func AddressHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "Address" field.
func AddressHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "Address" field.
func AddressIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "Address" field.
func AddressNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "Address" field.
func AddressEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "Address" field.
func AddressContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldAddress, v))
}

// CityEQ applies the EQ predicate on the "City" field.
func CityEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "City" field.
func CityNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "City" field.
func CityIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "City" field.
func CityNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "City" field.
func CityGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "City" field.
func CityGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "City" field.
func CityLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "City" field.
func CityLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "City" field.
func CityContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "City" field.
func CityHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "City" field.
func CityHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldCity, v))
}

// CityIsNil applies the IsNil predicate on the "City" field.
func CityIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldCity))
}

// CityNotNil applies the NotNil predicate on the "City" field.
func CityNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldCity))
}

// CityEqualFold applies the EqualFold predicate on the "City" field.
func CityEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "City" field.
func CityContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldCity, v))
}

// StateEQ applies the EQ predicate on the "State" field.
func StateEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "State" field.
func StateNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "State" field.
func StateIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "State" field.
func StateNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "State" field.
func StateGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "State" field.
func StateGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "State" field.
func StateLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "State" field.
func StateLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "State" field.
func StateContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "State" field.
func StateHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "State" field.
func StateHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldState, v))
}

// StateIsNil applies the IsNil predicate on the "State" field.
func StateIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldState))
}

// StateNotNil applies the NotNil predicate on the "State" field.
func StateNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldState))
}

// StateEqualFold applies the EqualFold predicate on the "State" field.
func StateEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "State" field.
func StateContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldState, v))
}

// PhoneEQ applies the EQ predicate on the "Phone" field.
func PhoneEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "Phone" field.
func PhoneNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "Phone" field.
func PhoneIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "Phone" field.
func PhoneNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "Phone" field.
func PhoneGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "Phone" field.
func PhoneGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "Phone" field.
func PhoneLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "Phone" field.
func PhoneLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "Phone" field.
func PhoneContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "Phone" field.
func PhoneHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "Phone" field.
func PhoneHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "Phone" field.
func PhoneIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "Phone" field.
func PhoneNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "Phone" field.
func PhoneEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "Phone" field.
func PhoneContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldPhone, v))
}

// FaxEQ applies the EQ predicate on the "Fax" field.
func FaxEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldFax, v))
}

// FaxNEQ applies the NEQ predicate on the "Fax" field.
func FaxNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldFax, v))
}

// FaxIn applies the In predicate on the "Fax" field.
func FaxIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldFax, vs...))
}

// FaxNotIn applies the NotIn predicate on the "Fax" field.
func FaxNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldFax, vs...))
}

// FaxGT applies the GT predicate on the "Fax" field.
func FaxGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldFax, v))
}

// FaxGTE applies the GTE predicate on the "Fax" field.
func FaxGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldFax, v))
}

// FaxLT applies the LT predicate on the "Fax" field.
func FaxLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldFax, v))
}

// FaxLTE applies the LTE predicate on the "Fax" field.
func FaxLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldFax, v))
}

// FaxContains applies the Contains predicate on the "Fax" field.
func FaxContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldFax, v))
}

// FaxHasPrefix applies the HasPrefix predicate on the "Fax" field.
func FaxHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldFax, v))
}

// FaxHasSuffix applies the HasSuffix predicate on the "Fax" field.
func FaxHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldFax, v))
}

// FaxIsNil applies the IsNil predicate on the "Fax" field.
func FaxIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldFax))
}

// FaxNotNil applies the NotNil predicate on the "Fax" field.
func FaxNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldFax))
}

// FaxEqualFold applies the EqualFold predicate on the "Fax" field.
func FaxEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldFax, v))
}

// FaxContainsFold applies the ContainsFold predicate on the "Fax" field.
func FaxContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldFax, v))
}

// MobileEQ applies the EQ predicate on the "Mobile" field.
func MobileEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldMobile, v))
}

// MobileNEQ applies the NEQ predicate on the "Mobile" field.
func MobileNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldMobile, v))
}

// MobileIn applies the In predicate on the "Mobile" field.
func MobileIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldMobile, vs...))
}

// MobileNotIn applies the NotIn predicate on the "Mobile" field.
func MobileNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldMobile, vs...))
}

// MobileGT applies the GT predicate on the "Mobile" field.
func MobileGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldMobile, v))
}

// MobileGTE applies the GTE predicate on the "Mobile" field.
func MobileGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldMobile, v))
}

// MobileLT applies the LT predicate on the "Mobile" field.
func MobileLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldMobile, v))
}

// MobileLTE applies the LTE predicate on the "Mobile" field.
func MobileLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldMobile, v))
}

// MobileContains applies the Contains predicate on the "Mobile" field.
func MobileContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldMobile, v))
}

// MobileHasPrefix applies the HasPrefix predicate on the "Mobile" field.
func MobileHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldMobile, v))
}

// MobileHasSuffix applies the HasSuffix predicate on the "Mobile" field.
func MobileHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldMobile, v))
}

// MobileIsNil applies the IsNil predicate on the "Mobile" field.
func MobileIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldMobile))
}

// MobileNotNil applies the NotNil predicate on the "Mobile" field.
func MobileNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldMobile))
}

// MobileEqualFold applies the EqualFold predicate on the "Mobile" field.
func MobileEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldMobile, v))
}

// MobileContainsFold applies the ContainsFold predicate on the "Mobile" field.
func MobileContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldMobile, v))
}

// EmailEQ applies the EQ predicate on the "Email" field.
func EmailEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "Email" field.
func EmailNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "Email" field.
func EmailIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "Email" field.
func EmailNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "Email" field.
func EmailGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "Email" field.
func EmailGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "Email" field.
func EmailLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "Email" field.
func EmailLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "Email" field.
func EmailContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "Email" field.
func EmailHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "Email" field.
func EmailHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "Email" field.
func EmailIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "Email" field.
func EmailNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "Email" field.
func EmailEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "Email" field.
func EmailContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldEmail, v))
}

// WebsiteEQ applies the EQ predicate on the "Website" field.
func WebsiteEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldWebsite, v))
}

// WebsiteNEQ applies the NEQ predicate on the "Website" field.
func WebsiteNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldWebsite, v))
}

// WebsiteIn applies the In predicate on the "Website" field.
func WebsiteIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldWebsite, vs...))
}

// WebsiteNotIn applies the NotIn predicate on the "Website" field.
func WebsiteNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldWebsite, vs...))
}

// WebsiteGT applies the GT predicate on the "Website" field.
func WebsiteGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldWebsite, v))
}

// WebsiteGTE applies the GTE predicate on the "Website" field.
func WebsiteGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldWebsite, v))
}

// WebsiteLT applies the LT predicate on the "Website" field.
func WebsiteLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldWebsite, v))
}

// WebsiteLTE applies the LTE predicate on the "Website" field.
func WebsiteLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldWebsite, v))
}

// WebsiteContains applies the Contains predicate on the "Website" field.
func WebsiteContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldWebsite, v))
}

// WebsiteHasPrefix applies the HasPrefix predicate on the "Website" field.
func WebsiteHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldWebsite, v))
}

// WebsiteHasSuffix applies the HasSuffix predicate on the "Website" field.
func WebsiteHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldWebsite, v))
}

// WebsiteIsNil applies the IsNil predicate on the "Website" field.
func WebsiteIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldWebsite))
}

// WebsiteNotNil applies the NotNil predicate on the "Website" field.
func WebsiteNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldWebsite))
}

// WebsiteEqualFold applies the EqualFold predicate on the "Website" field.
func WebsiteEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldWebsite, v))
}

// WebsiteContainsFold applies the ContainsFold predicate on the "Website" field.
func WebsiteContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldWebsite, v))
}

// TaxAdminEQ applies the EQ predicate on the "TaxAdmin" field.
func TaxAdminEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldTaxAdmin, v))
}

// TaxAdminNEQ applies the NEQ predicate on the "TaxAdmin" field.
func TaxAdminNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldTaxAdmin, v))
}

// TaxAdminIn applies the In predicate on the "TaxAdmin" field.
func TaxAdminIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldTaxAdmin, vs...))
}

// TaxAdminNotIn applies the NotIn predicate on the "TaxAdmin" field.
func TaxAdminNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldTaxAdmin, vs...))
}

// TaxAdminGT applies the GT predicate on the "TaxAdmin" field.
func TaxAdminGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldTaxAdmin, v))
}

// TaxAdminGTE applies the GTE predicate on the "TaxAdmin" field.
func TaxAdminGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldTaxAdmin, v))
}

// TaxAdminLT applies the LT predicate on the "TaxAdmin" field.
func TaxAdminLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldTaxAdmin, v))
}

// TaxAdminLTE applies the LTE predicate on the "TaxAdmin" field.
func TaxAdminLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldTaxAdmin, v))
}

// TaxAdminContains applies the Contains predicate on the "TaxAdmin" field.
func TaxAdminContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldTaxAdmin, v))
}

// TaxAdminHasPrefix applies the HasPrefix predicate on the "TaxAdmin" field.
func TaxAdminHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldTaxAdmin, v))
}

// TaxAdminHasSuffix applies the HasSuffix predicate on the "TaxAdmin" field.
func TaxAdminHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldTaxAdmin, v))
}

// TaxAdminIsNil applies the IsNil predicate on the "TaxAdmin" field.
func TaxAdminIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldTaxAdmin))
}

// TaxAdminNotNil applies the NotNil predicate on the "TaxAdmin" field.
func TaxAdminNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldTaxAdmin))
}

// TaxAdminEqualFold applies the EqualFold predicate on the "TaxAdmin" field.
func TaxAdminEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldTaxAdmin, v))
}

// TaxAdminContainsFold applies the ContainsFold predicate on the "TaxAdmin" field.
func TaxAdminContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldTaxAdmin, v))
}

// TaxNoEQ applies the EQ predicate on the "TaxNo" field.
func TaxNoEQ(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldTaxNo, v))
}

// TaxNoNEQ applies the NEQ predicate on the "TaxNo" field.
func TaxNoNEQ(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldTaxNo, v))
}

// TaxNoIn applies the In predicate on the "TaxNo" field.
func TaxNoIn(vs ...int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldTaxNo, vs...))
}

// TaxNoNotIn applies the NotIn predicate on the "TaxNo" field.
func TaxNoNotIn(vs ...int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldTaxNo, vs...))
}

// TaxNoGT applies the GT predicate on the "TaxNo" field.
func TaxNoGT(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldTaxNo, v))
}

// TaxNoGTE applies the GTE predicate on the "TaxNo" field.
func TaxNoGTE(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldTaxNo, v))
}

// TaxNoLT applies the LT predicate on the "TaxNo" field.
func TaxNoLT(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldTaxNo, v))
}

// TaxNoLTE applies the LTE predicate on the "TaxNo" field.
func TaxNoLTE(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldTaxNo, v))
}

// TaxNoIsNil applies the IsNil predicate on the "TaxNo" field.
func TaxNoIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldTaxNo))
}

// TaxNoNotNil applies the NotNil predicate on the "TaxNo" field.
func TaxNoNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldTaxNo))
}

// CommerceEQ applies the EQ predicate on the "Commerce" field.
func CommerceEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldCommerce, v))
}

// CommerceNEQ applies the NEQ predicate on the "Commerce" field.
func CommerceNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldCommerce, v))
}

// CommerceIn applies the In predicate on the "Commerce" field.
func CommerceIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldCommerce, vs...))
}

// CommerceNotIn applies the NotIn predicate on the "Commerce" field.
func CommerceNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldCommerce, vs...))
}

// CommerceGT applies the GT predicate on the "Commerce" field.
func CommerceGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldCommerce, v))
}

// CommerceGTE applies the GTE predicate on the "Commerce" field.
func CommerceGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldCommerce, v))
}

// CommerceLT applies the LT predicate on the "Commerce" field.
func CommerceLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldCommerce, v))
}

// CommerceLTE applies the LTE predicate on the "Commerce" field.
func CommerceLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldCommerce, v))
}

// CommerceContains applies the Contains predicate on the "Commerce" field.
func CommerceContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldCommerce, v))
}

// CommerceHasPrefix applies the HasPrefix predicate on the "Commerce" field.
func CommerceHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldCommerce, v))
}

// CommerceHasSuffix applies the HasSuffix predicate on the "Commerce" field.
func CommerceHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldCommerce, v))
}

// CommerceIsNil applies the IsNil predicate on the "Commerce" field.
func CommerceIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldCommerce))
}

// CommerceNotNil applies the NotNil predicate on the "Commerce" field.
func CommerceNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldCommerce))
}

// CommerceEqualFold applies the EqualFold predicate on the "Commerce" field.
func CommerceEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldCommerce, v))
}

// CommerceContainsFold applies the ContainsFold predicate on the "Commerce" field.
func CommerceContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldCommerce, v))
}

// CommerceRegEQ applies the EQ predicate on the "CommerceReg" field.
func CommerceRegEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldCommerceReg, v))
}

// CommerceRegNEQ applies the NEQ predicate on the "CommerceReg" field.
func CommerceRegNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldCommerceReg, v))
}

// CommerceRegIn applies the In predicate on the "CommerceReg" field.
func CommerceRegIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldCommerceReg, vs...))
}

// CommerceRegNotIn applies the NotIn predicate on the "CommerceReg" field.
func CommerceRegNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldCommerceReg, vs...))
}

// CommerceRegGT applies the GT predicate on the "CommerceReg" field.
func CommerceRegGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldCommerceReg, v))
}

// CommerceRegGTE applies the GTE predicate on the "CommerceReg" field.
func CommerceRegGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldCommerceReg, v))
}

// CommerceRegLT applies the LT predicate on the "CommerceReg" field.
func CommerceRegLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldCommerceReg, v))
}

// CommerceRegLTE applies the LTE predicate on the "CommerceReg" field.
func CommerceRegLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldCommerceReg, v))
}

// CommerceRegContains applies the Contains predicate on the "CommerceReg" field.
func CommerceRegContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldCommerceReg, v))
}

// CommerceRegHasPrefix applies the HasPrefix predicate on the "CommerceReg" field.
func CommerceRegHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldCommerceReg, v))
}

// CommerceRegHasSuffix applies the HasSuffix predicate on the "CommerceReg" field.
func CommerceRegHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldCommerceReg, v))
}

// CommerceRegIsNil applies the IsNil predicate on the "CommerceReg" field.
func CommerceRegIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldCommerceReg))
}

// CommerceRegNotNil applies the NotNil predicate on the "CommerceReg" field.
func CommerceRegNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldCommerceReg))
}

// CommerceRegEqualFold applies the EqualFold predicate on the "CommerceReg" field.
func CommerceRegEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldCommerceReg, v))
}

// CommerceRegContainsFold applies the ContainsFold predicate on the "CommerceReg" field.
func CommerceRegContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldCommerceReg, v))
}

// VisaDateEQ applies the EQ predicate on the "VisaDate" field.
func VisaDateEQ(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldVisaDate, v))
}

// VisaDateNEQ applies the NEQ predicate on the "VisaDate" field.
func VisaDateNEQ(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldVisaDate, v))
}

// VisaDateIn applies the In predicate on the "VisaDate" field.
func VisaDateIn(vs ...time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldVisaDate, vs...))
}

// VisaDateNotIn applies the NotIn predicate on the "VisaDate" field.
func VisaDateNotIn(vs ...time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldVisaDate, vs...))
}

// VisaDateGT applies the GT predicate on the "VisaDate" field.
func VisaDateGT(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldVisaDate, v))
}

// VisaDateGTE applies the GTE predicate on the "VisaDate" field.
func VisaDateGTE(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldVisaDate, v))
}

// VisaDateLT applies the LT predicate on the "VisaDate" field.
func VisaDateLT(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldVisaDate, v))
}

// VisaDateLTE applies the LTE predicate on the "VisaDate" field.
func VisaDateLTE(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldVisaDate, v))
}

// VisaDateIsNil applies the IsNil predicate on the "VisaDate" field.
func VisaDateIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldVisaDate))
}

// VisaDateNotNil applies the NotNil predicate on the "VisaDate" field.
func VisaDateNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldVisaDate))
}

// CreatedAtEQ applies the EQ predicate on the "CreatedAt" field.
func CreatedAtEQ(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "CreatedAt" field.
func CreatedAtNEQ(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "CreatedAt" field.
func CreatedAtIn(vs ...time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "CreatedAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "CreatedAt" field.
func CreatedAtGT(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "CreatedAt" field.
func CreatedAtGTE(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "CreatedAt" field.
func CreatedAtLT(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "CreatedAt" field.
func CreatedAtLTE(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasCompanyOwner applies the HasEdge predicate on the "companyOwner" edge.
func HasCompanyOwner() predicate.CompanyDetail {
	return predicate.CompanyDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyOwnerTable, CompanyOwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyOwnerWith applies the HasEdge predicate on the "companyOwner" edge with a given conditions (other predicates).
func HasCompanyOwnerWith(preds ...predicate.CompanyEngineer) predicate.CompanyDetail {
	return predicate.CompanyDetail(func(s *sql.Selector) {
		step := newCompanyOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CompanyDetail) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CompanyDetail) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CompanyDetail) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.NotPredicates(p))
}
