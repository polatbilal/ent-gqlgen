// Code generated by ent, DO NOT EDIT.

package companydetail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/polatbilal/gqlgen-ent/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldID, id))
}

// CompanyCode applies equality check predicate on the "CompanyCode" field. It's identical to CompanyCodeEQ.
func CompanyCode(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldCompanyCode, v))
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldName, v))
}

// Address applies equality check predicate on the "Address" field. It's identical to AddressEQ.
func Address(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldAddress, v))
}

// Phone applies equality check predicate on the "Phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldPhone, v))
}

// Fax applies equality check predicate on the "Fax" field. It's identical to FaxEQ.
func Fax(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldFax, v))
}

// MobilePhone applies equality check predicate on the "MobilePhone" field. It's identical to MobilePhoneEQ.
func MobilePhone(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldMobilePhone, v))
}

// Email applies equality check predicate on the "Email" field. It's identical to EmailEQ.
func Email(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldEmail, v))
}

// Website applies equality check predicate on the "Website" field. It's identical to WebsiteEQ.
func Website(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldWebsite, v))
}

// TaxAdmin applies equality check predicate on the "TaxAdmin" field. It's identical to TaxAdminEQ.
func TaxAdmin(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldTaxAdmin, v))
}

// TaxNo applies equality check predicate on the "TaxNo" field. It's identical to TaxNoEQ.
func TaxNo(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldTaxNo, v))
}

// ChamberInfo applies equality check predicate on the "ChamberInfo" field. It's identical to ChamberInfoEQ.
func ChamberInfo(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldChamberInfo, v))
}

// ChamberRegisterNo applies equality check predicate on the "ChamberRegisterNo" field. It's identical to ChamberRegisterNoEQ.
func ChamberRegisterNo(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldChamberRegisterNo, v))
}

// VisaDate applies equality check predicate on the "VisaDate" field. It's identical to VisaDateEQ.
func VisaDate(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldVisaDate, v))
}

// VisaEndDate applies equality check predicate on the "VisaEndDate" field. It's identical to VisaEndDateEQ.
func VisaEndDate(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldVisaEndDate, v))
}

// VisaFinishedFor90Days applies equality check predicate on the "VisaFinishedFor90Days" field. It's identical to VisaFinishedFor90DaysEQ.
func VisaFinishedFor90Days(v bool) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldVisaFinishedFor90Days, v))
}

// CorePersonAbsent90Days applies equality check predicate on the "CorePersonAbsent90Days" field. It's identical to CorePersonAbsent90DaysEQ.
func CorePersonAbsent90Days(v bool) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldCorePersonAbsent90Days, v))
}

// IsClosed applies equality check predicate on the "IsClosed" field. It's identical to IsClosedEQ.
func IsClosed(v bool) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldIsClosed, v))
}

// OwnerName applies equality check predicate on the "OwnerName" field. It's identical to OwnerNameEQ.
func OwnerName(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldOwnerName, v))
}

// OwnerTcNo applies equality check predicate on the "OwnerTcNo" field. It's identical to OwnerTcNoEQ.
func OwnerTcNo(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldOwnerTcNo, v))
}

// OwnerAddress applies equality check predicate on the "OwnerAddress" field. It's identical to OwnerAddressEQ.
func OwnerAddress(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldOwnerAddress, v))
}

// OwnerPhone applies equality check predicate on the "OwnerPhone" field. It's identical to OwnerPhoneEQ.
func OwnerPhone(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldOwnerPhone, v))
}

// OwnerEmail applies equality check predicate on the "OwnerEmail" field. It's identical to OwnerEmailEQ.
func OwnerEmail(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldOwnerEmail, v))
}

// OwnerRegisterNo applies equality check predicate on the "OwnerRegisterNo" field. It's identical to OwnerRegisterNoEQ.
func OwnerRegisterNo(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldOwnerRegisterNo, v))
}

// OwnerCareer applies equality check predicate on the "OwnerCareer" field. It's identical to OwnerCareerEQ.
func OwnerCareer(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldOwnerCareer, v))
}

// CreatedAt applies equality check predicate on the "CreatedAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// CompanyCodeEQ applies the EQ predicate on the "CompanyCode" field.
func CompanyCodeEQ(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldCompanyCode, v))
}

// CompanyCodeNEQ applies the NEQ predicate on the "CompanyCode" field.
func CompanyCodeNEQ(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldCompanyCode, v))
}

// CompanyCodeIn applies the In predicate on the "CompanyCode" field.
func CompanyCodeIn(vs ...int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldCompanyCode, vs...))
}

// CompanyCodeNotIn applies the NotIn predicate on the "CompanyCode" field.
func CompanyCodeNotIn(vs ...int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldCompanyCode, vs...))
}

// CompanyCodeGT applies the GT predicate on the "CompanyCode" field.
func CompanyCodeGT(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldCompanyCode, v))
}

// CompanyCodeGTE applies the GTE predicate on the "CompanyCode" field.
func CompanyCodeGTE(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldCompanyCode, v))
}

// CompanyCodeLT applies the LT predicate on the "CompanyCode" field.
func CompanyCodeLT(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldCompanyCode, v))
}

// CompanyCodeLTE applies the LTE predicate on the "CompanyCode" field.
func CompanyCodeLTE(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldCompanyCode, v))
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldName, v))
}

// AddressEQ applies the EQ predicate on the "Address" field.
func AddressEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "Address" field.
func AddressNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "Address" field.
func AddressIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "Address" field.
func AddressNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "Address" field.
func AddressGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "Address" field.
func AddressGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "Address" field.
func AddressLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "Address" field.
func AddressLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "Address" field.
func AddressContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "Address" field.
func AddressHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "Address" field.
func AddressHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "Address" field.
func AddressIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "Address" field.
func AddressNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "Address" field.
func AddressEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "Address" field.
func AddressContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldAddress, v))
}

// PhoneEQ applies the EQ predicate on the "Phone" field.
func PhoneEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "Phone" field.
func PhoneNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "Phone" field.
func PhoneIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "Phone" field.
func PhoneNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "Phone" field.
func PhoneGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "Phone" field.
func PhoneGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "Phone" field.
func PhoneLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "Phone" field.
func PhoneLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "Phone" field.
func PhoneContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "Phone" field.
func PhoneHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "Phone" field.
func PhoneHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "Phone" field.
func PhoneIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "Phone" field.
func PhoneNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "Phone" field.
func PhoneEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "Phone" field.
func PhoneContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldPhone, v))
}

// FaxEQ applies the EQ predicate on the "Fax" field.
func FaxEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldFax, v))
}

// FaxNEQ applies the NEQ predicate on the "Fax" field.
func FaxNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldFax, v))
}

// FaxIn applies the In predicate on the "Fax" field.
func FaxIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldFax, vs...))
}

// FaxNotIn applies the NotIn predicate on the "Fax" field.
func FaxNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldFax, vs...))
}

// FaxGT applies the GT predicate on the "Fax" field.
func FaxGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldFax, v))
}

// FaxGTE applies the GTE predicate on the "Fax" field.
func FaxGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldFax, v))
}

// FaxLT applies the LT predicate on the "Fax" field.
func FaxLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldFax, v))
}

// FaxLTE applies the LTE predicate on the "Fax" field.
func FaxLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldFax, v))
}

// FaxContains applies the Contains predicate on the "Fax" field.
func FaxContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldFax, v))
}

// FaxHasPrefix applies the HasPrefix predicate on the "Fax" field.
func FaxHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldFax, v))
}

// FaxHasSuffix applies the HasSuffix predicate on the "Fax" field.
func FaxHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldFax, v))
}

// FaxIsNil applies the IsNil predicate on the "Fax" field.
func FaxIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldFax))
}

// FaxNotNil applies the NotNil predicate on the "Fax" field.
func FaxNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldFax))
}

// FaxEqualFold applies the EqualFold predicate on the "Fax" field.
func FaxEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldFax, v))
}

// FaxContainsFold applies the ContainsFold predicate on the "Fax" field.
func FaxContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldFax, v))
}

// MobilePhoneEQ applies the EQ predicate on the "MobilePhone" field.
func MobilePhoneEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldMobilePhone, v))
}

// MobilePhoneNEQ applies the NEQ predicate on the "MobilePhone" field.
func MobilePhoneNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldMobilePhone, v))
}

// MobilePhoneIn applies the In predicate on the "MobilePhone" field.
func MobilePhoneIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldMobilePhone, vs...))
}

// MobilePhoneNotIn applies the NotIn predicate on the "MobilePhone" field.
func MobilePhoneNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldMobilePhone, vs...))
}

// MobilePhoneGT applies the GT predicate on the "MobilePhone" field.
func MobilePhoneGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldMobilePhone, v))
}

// MobilePhoneGTE applies the GTE predicate on the "MobilePhone" field.
func MobilePhoneGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldMobilePhone, v))
}

// MobilePhoneLT applies the LT predicate on the "MobilePhone" field.
func MobilePhoneLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldMobilePhone, v))
}

// MobilePhoneLTE applies the LTE predicate on the "MobilePhone" field.
func MobilePhoneLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldMobilePhone, v))
}

// MobilePhoneContains applies the Contains predicate on the "MobilePhone" field.
func MobilePhoneContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldMobilePhone, v))
}

// MobilePhoneHasPrefix applies the HasPrefix predicate on the "MobilePhone" field.
func MobilePhoneHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldMobilePhone, v))
}

// MobilePhoneHasSuffix applies the HasSuffix predicate on the "MobilePhone" field.
func MobilePhoneHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldMobilePhone, v))
}

// MobilePhoneIsNil applies the IsNil predicate on the "MobilePhone" field.
func MobilePhoneIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldMobilePhone))
}

// MobilePhoneNotNil applies the NotNil predicate on the "MobilePhone" field.
func MobilePhoneNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldMobilePhone))
}

// MobilePhoneEqualFold applies the EqualFold predicate on the "MobilePhone" field.
func MobilePhoneEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldMobilePhone, v))
}

// MobilePhoneContainsFold applies the ContainsFold predicate on the "MobilePhone" field.
func MobilePhoneContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldMobilePhone, v))
}

// EmailEQ applies the EQ predicate on the "Email" field.
func EmailEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "Email" field.
func EmailNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "Email" field.
func EmailIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "Email" field.
func EmailNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "Email" field.
func EmailGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "Email" field.
func EmailGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "Email" field.
func EmailLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "Email" field.
func EmailLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "Email" field.
func EmailContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "Email" field.
func EmailHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "Email" field.
func EmailHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "Email" field.
func EmailIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "Email" field.
func EmailNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "Email" field.
func EmailEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "Email" field.
func EmailContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldEmail, v))
}

// WebsiteEQ applies the EQ predicate on the "Website" field.
func WebsiteEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldWebsite, v))
}

// WebsiteNEQ applies the NEQ predicate on the "Website" field.
func WebsiteNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldWebsite, v))
}

// WebsiteIn applies the In predicate on the "Website" field.
func WebsiteIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldWebsite, vs...))
}

// WebsiteNotIn applies the NotIn predicate on the "Website" field.
func WebsiteNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldWebsite, vs...))
}

// WebsiteGT applies the GT predicate on the "Website" field.
func WebsiteGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldWebsite, v))
}

// WebsiteGTE applies the GTE predicate on the "Website" field.
func WebsiteGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldWebsite, v))
}

// WebsiteLT applies the LT predicate on the "Website" field.
func WebsiteLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldWebsite, v))
}

// WebsiteLTE applies the LTE predicate on the "Website" field.
func WebsiteLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldWebsite, v))
}

// WebsiteContains applies the Contains predicate on the "Website" field.
func WebsiteContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldWebsite, v))
}

// WebsiteHasPrefix applies the HasPrefix predicate on the "Website" field.
func WebsiteHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldWebsite, v))
}

// WebsiteHasSuffix applies the HasSuffix predicate on the "Website" field.
func WebsiteHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldWebsite, v))
}

// WebsiteIsNil applies the IsNil predicate on the "Website" field.
func WebsiteIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldWebsite))
}

// WebsiteNotNil applies the NotNil predicate on the "Website" field.
func WebsiteNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldWebsite))
}

// WebsiteEqualFold applies the EqualFold predicate on the "Website" field.
func WebsiteEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldWebsite, v))
}

// WebsiteContainsFold applies the ContainsFold predicate on the "Website" field.
func WebsiteContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldWebsite, v))
}

// TaxAdminEQ applies the EQ predicate on the "TaxAdmin" field.
func TaxAdminEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldTaxAdmin, v))
}

// TaxAdminNEQ applies the NEQ predicate on the "TaxAdmin" field.
func TaxAdminNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldTaxAdmin, v))
}

// TaxAdminIn applies the In predicate on the "TaxAdmin" field.
func TaxAdminIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldTaxAdmin, vs...))
}

// TaxAdminNotIn applies the NotIn predicate on the "TaxAdmin" field.
func TaxAdminNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldTaxAdmin, vs...))
}

// TaxAdminGT applies the GT predicate on the "TaxAdmin" field.
func TaxAdminGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldTaxAdmin, v))
}

// TaxAdminGTE applies the GTE predicate on the "TaxAdmin" field.
func TaxAdminGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldTaxAdmin, v))
}

// TaxAdminLT applies the LT predicate on the "TaxAdmin" field.
func TaxAdminLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldTaxAdmin, v))
}

// TaxAdminLTE applies the LTE predicate on the "TaxAdmin" field.
func TaxAdminLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldTaxAdmin, v))
}

// TaxAdminContains applies the Contains predicate on the "TaxAdmin" field.
func TaxAdminContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldTaxAdmin, v))
}

// TaxAdminHasPrefix applies the HasPrefix predicate on the "TaxAdmin" field.
func TaxAdminHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldTaxAdmin, v))
}

// TaxAdminHasSuffix applies the HasSuffix predicate on the "TaxAdmin" field.
func TaxAdminHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldTaxAdmin, v))
}

// TaxAdminIsNil applies the IsNil predicate on the "TaxAdmin" field.
func TaxAdminIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldTaxAdmin))
}

// TaxAdminNotNil applies the NotNil predicate on the "TaxAdmin" field.
func TaxAdminNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldTaxAdmin))
}

// TaxAdminEqualFold applies the EqualFold predicate on the "TaxAdmin" field.
func TaxAdminEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldTaxAdmin, v))
}

// TaxAdminContainsFold applies the ContainsFold predicate on the "TaxAdmin" field.
func TaxAdminContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldTaxAdmin, v))
}

// TaxNoEQ applies the EQ predicate on the "TaxNo" field.
func TaxNoEQ(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldTaxNo, v))
}

// TaxNoNEQ applies the NEQ predicate on the "TaxNo" field.
func TaxNoNEQ(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldTaxNo, v))
}

// TaxNoIn applies the In predicate on the "TaxNo" field.
func TaxNoIn(vs ...int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldTaxNo, vs...))
}

// TaxNoNotIn applies the NotIn predicate on the "TaxNo" field.
func TaxNoNotIn(vs ...int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldTaxNo, vs...))
}

// TaxNoGT applies the GT predicate on the "TaxNo" field.
func TaxNoGT(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldTaxNo, v))
}

// TaxNoGTE applies the GTE predicate on the "TaxNo" field.
func TaxNoGTE(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldTaxNo, v))
}

// TaxNoLT applies the LT predicate on the "TaxNo" field.
func TaxNoLT(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldTaxNo, v))
}

// TaxNoLTE applies the LTE predicate on the "TaxNo" field.
func TaxNoLTE(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldTaxNo, v))
}

// TaxNoIsNil applies the IsNil predicate on the "TaxNo" field.
func TaxNoIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldTaxNo))
}

// TaxNoNotNil applies the NotNil predicate on the "TaxNo" field.
func TaxNoNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldTaxNo))
}

// ChamberInfoEQ applies the EQ predicate on the "ChamberInfo" field.
func ChamberInfoEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldChamberInfo, v))
}

// ChamberInfoNEQ applies the NEQ predicate on the "ChamberInfo" field.
func ChamberInfoNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldChamberInfo, v))
}

// ChamberInfoIn applies the In predicate on the "ChamberInfo" field.
func ChamberInfoIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldChamberInfo, vs...))
}

// ChamberInfoNotIn applies the NotIn predicate on the "ChamberInfo" field.
func ChamberInfoNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldChamberInfo, vs...))
}

// ChamberInfoGT applies the GT predicate on the "ChamberInfo" field.
func ChamberInfoGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldChamberInfo, v))
}

// ChamberInfoGTE applies the GTE predicate on the "ChamberInfo" field.
func ChamberInfoGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldChamberInfo, v))
}

// ChamberInfoLT applies the LT predicate on the "ChamberInfo" field.
func ChamberInfoLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldChamberInfo, v))
}

// ChamberInfoLTE applies the LTE predicate on the "ChamberInfo" field.
func ChamberInfoLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldChamberInfo, v))
}

// ChamberInfoContains applies the Contains predicate on the "ChamberInfo" field.
func ChamberInfoContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldChamberInfo, v))
}

// ChamberInfoHasPrefix applies the HasPrefix predicate on the "ChamberInfo" field.
func ChamberInfoHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldChamberInfo, v))
}

// ChamberInfoHasSuffix applies the HasSuffix predicate on the "ChamberInfo" field.
func ChamberInfoHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldChamberInfo, v))
}

// ChamberInfoIsNil applies the IsNil predicate on the "ChamberInfo" field.
func ChamberInfoIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldChamberInfo))
}

// ChamberInfoNotNil applies the NotNil predicate on the "ChamberInfo" field.
func ChamberInfoNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldChamberInfo))
}

// ChamberInfoEqualFold applies the EqualFold predicate on the "ChamberInfo" field.
func ChamberInfoEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldChamberInfo, v))
}

// ChamberInfoContainsFold applies the ContainsFold predicate on the "ChamberInfo" field.
func ChamberInfoContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldChamberInfo, v))
}

// ChamberRegisterNoEQ applies the EQ predicate on the "ChamberRegisterNo" field.
func ChamberRegisterNoEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldChamberRegisterNo, v))
}

// ChamberRegisterNoNEQ applies the NEQ predicate on the "ChamberRegisterNo" field.
func ChamberRegisterNoNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldChamberRegisterNo, v))
}

// ChamberRegisterNoIn applies the In predicate on the "ChamberRegisterNo" field.
func ChamberRegisterNoIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldChamberRegisterNo, vs...))
}

// ChamberRegisterNoNotIn applies the NotIn predicate on the "ChamberRegisterNo" field.
func ChamberRegisterNoNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldChamberRegisterNo, vs...))
}

// ChamberRegisterNoGT applies the GT predicate on the "ChamberRegisterNo" field.
func ChamberRegisterNoGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldChamberRegisterNo, v))
}

// ChamberRegisterNoGTE applies the GTE predicate on the "ChamberRegisterNo" field.
func ChamberRegisterNoGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldChamberRegisterNo, v))
}

// ChamberRegisterNoLT applies the LT predicate on the "ChamberRegisterNo" field.
func ChamberRegisterNoLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldChamberRegisterNo, v))
}

// ChamberRegisterNoLTE applies the LTE predicate on the "ChamberRegisterNo" field.
func ChamberRegisterNoLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldChamberRegisterNo, v))
}

// ChamberRegisterNoContains applies the Contains predicate on the "ChamberRegisterNo" field.
func ChamberRegisterNoContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldChamberRegisterNo, v))
}

// ChamberRegisterNoHasPrefix applies the HasPrefix predicate on the "ChamberRegisterNo" field.
func ChamberRegisterNoHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldChamberRegisterNo, v))
}

// ChamberRegisterNoHasSuffix applies the HasSuffix predicate on the "ChamberRegisterNo" field.
func ChamberRegisterNoHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldChamberRegisterNo, v))
}

// ChamberRegisterNoIsNil applies the IsNil predicate on the "ChamberRegisterNo" field.
func ChamberRegisterNoIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldChamberRegisterNo))
}

// ChamberRegisterNoNotNil applies the NotNil predicate on the "ChamberRegisterNo" field.
func ChamberRegisterNoNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldChamberRegisterNo))
}

// ChamberRegisterNoEqualFold applies the EqualFold predicate on the "ChamberRegisterNo" field.
func ChamberRegisterNoEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldChamberRegisterNo, v))
}

// ChamberRegisterNoContainsFold applies the ContainsFold predicate on the "ChamberRegisterNo" field.
func ChamberRegisterNoContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldChamberRegisterNo, v))
}

// VisaDateEQ applies the EQ predicate on the "VisaDate" field.
func VisaDateEQ(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldVisaDate, v))
}

// VisaDateNEQ applies the NEQ predicate on the "VisaDate" field.
func VisaDateNEQ(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldVisaDate, v))
}

// VisaDateIn applies the In predicate on the "VisaDate" field.
func VisaDateIn(vs ...time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldVisaDate, vs...))
}

// VisaDateNotIn applies the NotIn predicate on the "VisaDate" field.
func VisaDateNotIn(vs ...time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldVisaDate, vs...))
}

// VisaDateGT applies the GT predicate on the "VisaDate" field.
func VisaDateGT(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldVisaDate, v))
}

// VisaDateGTE applies the GTE predicate on the "VisaDate" field.
func VisaDateGTE(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldVisaDate, v))
}

// VisaDateLT applies the LT predicate on the "VisaDate" field.
func VisaDateLT(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldVisaDate, v))
}

// VisaDateLTE applies the LTE predicate on the "VisaDate" field.
func VisaDateLTE(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldVisaDate, v))
}

// VisaDateIsNil applies the IsNil predicate on the "VisaDate" field.
func VisaDateIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldVisaDate))
}

// VisaDateNotNil applies the NotNil predicate on the "VisaDate" field.
func VisaDateNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldVisaDate))
}

// VisaEndDateEQ applies the EQ predicate on the "VisaEndDate" field.
func VisaEndDateEQ(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldVisaEndDate, v))
}

// VisaEndDateNEQ applies the NEQ predicate on the "VisaEndDate" field.
func VisaEndDateNEQ(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldVisaEndDate, v))
}

// VisaEndDateIn applies the In predicate on the "VisaEndDate" field.
func VisaEndDateIn(vs ...time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldVisaEndDate, vs...))
}

// VisaEndDateNotIn applies the NotIn predicate on the "VisaEndDate" field.
func VisaEndDateNotIn(vs ...time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldVisaEndDate, vs...))
}

// VisaEndDateGT applies the GT predicate on the "VisaEndDate" field.
func VisaEndDateGT(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldVisaEndDate, v))
}

// VisaEndDateGTE applies the GTE predicate on the "VisaEndDate" field.
func VisaEndDateGTE(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldVisaEndDate, v))
}

// VisaEndDateLT applies the LT predicate on the "VisaEndDate" field.
func VisaEndDateLT(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldVisaEndDate, v))
}

// VisaEndDateLTE applies the LTE predicate on the "VisaEndDate" field.
func VisaEndDateLTE(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldVisaEndDate, v))
}

// VisaEndDateIsNil applies the IsNil predicate on the "VisaEndDate" field.
func VisaEndDateIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldVisaEndDate))
}

// VisaEndDateNotNil applies the NotNil predicate on the "VisaEndDate" field.
func VisaEndDateNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldVisaEndDate))
}

// VisaFinishedFor90DaysEQ applies the EQ predicate on the "VisaFinishedFor90Days" field.
func VisaFinishedFor90DaysEQ(v bool) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldVisaFinishedFor90Days, v))
}

// VisaFinishedFor90DaysNEQ applies the NEQ predicate on the "VisaFinishedFor90Days" field.
func VisaFinishedFor90DaysNEQ(v bool) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldVisaFinishedFor90Days, v))
}

// VisaFinishedFor90DaysIsNil applies the IsNil predicate on the "VisaFinishedFor90Days" field.
func VisaFinishedFor90DaysIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldVisaFinishedFor90Days))
}

// VisaFinishedFor90DaysNotNil applies the NotNil predicate on the "VisaFinishedFor90Days" field.
func VisaFinishedFor90DaysNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldVisaFinishedFor90Days))
}

// CorePersonAbsent90DaysEQ applies the EQ predicate on the "CorePersonAbsent90Days" field.
func CorePersonAbsent90DaysEQ(v bool) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldCorePersonAbsent90Days, v))
}

// CorePersonAbsent90DaysNEQ applies the NEQ predicate on the "CorePersonAbsent90Days" field.
func CorePersonAbsent90DaysNEQ(v bool) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldCorePersonAbsent90Days, v))
}

// CorePersonAbsent90DaysIsNil applies the IsNil predicate on the "CorePersonAbsent90Days" field.
func CorePersonAbsent90DaysIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldCorePersonAbsent90Days))
}

// CorePersonAbsent90DaysNotNil applies the NotNil predicate on the "CorePersonAbsent90Days" field.
func CorePersonAbsent90DaysNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldCorePersonAbsent90Days))
}

// IsClosedEQ applies the EQ predicate on the "IsClosed" field.
func IsClosedEQ(v bool) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldIsClosed, v))
}

// IsClosedNEQ applies the NEQ predicate on the "IsClosed" field.
func IsClosedNEQ(v bool) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldIsClosed, v))
}

// OwnerNameEQ applies the EQ predicate on the "OwnerName" field.
func OwnerNameEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldOwnerName, v))
}

// OwnerNameNEQ applies the NEQ predicate on the "OwnerName" field.
func OwnerNameNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldOwnerName, v))
}

// OwnerNameIn applies the In predicate on the "OwnerName" field.
func OwnerNameIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldOwnerName, vs...))
}

// OwnerNameNotIn applies the NotIn predicate on the "OwnerName" field.
func OwnerNameNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldOwnerName, vs...))
}

// OwnerNameGT applies the GT predicate on the "OwnerName" field.
func OwnerNameGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldOwnerName, v))
}

// OwnerNameGTE applies the GTE predicate on the "OwnerName" field.
func OwnerNameGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldOwnerName, v))
}

// OwnerNameLT applies the LT predicate on the "OwnerName" field.
func OwnerNameLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldOwnerName, v))
}

// OwnerNameLTE applies the LTE predicate on the "OwnerName" field.
func OwnerNameLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldOwnerName, v))
}

// OwnerNameContains applies the Contains predicate on the "OwnerName" field.
func OwnerNameContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldOwnerName, v))
}

// OwnerNameHasPrefix applies the HasPrefix predicate on the "OwnerName" field.
func OwnerNameHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldOwnerName, v))
}

// OwnerNameHasSuffix applies the HasSuffix predicate on the "OwnerName" field.
func OwnerNameHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldOwnerName, v))
}

// OwnerNameIsNil applies the IsNil predicate on the "OwnerName" field.
func OwnerNameIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldOwnerName))
}

// OwnerNameNotNil applies the NotNil predicate on the "OwnerName" field.
func OwnerNameNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldOwnerName))
}

// OwnerNameEqualFold applies the EqualFold predicate on the "OwnerName" field.
func OwnerNameEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldOwnerName, v))
}

// OwnerNameContainsFold applies the ContainsFold predicate on the "OwnerName" field.
func OwnerNameContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldOwnerName, v))
}

// OwnerTcNoEQ applies the EQ predicate on the "OwnerTcNo" field.
func OwnerTcNoEQ(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldOwnerTcNo, v))
}

// OwnerTcNoNEQ applies the NEQ predicate on the "OwnerTcNo" field.
func OwnerTcNoNEQ(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldOwnerTcNo, v))
}

// OwnerTcNoIn applies the In predicate on the "OwnerTcNo" field.
func OwnerTcNoIn(vs ...int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldOwnerTcNo, vs...))
}

// OwnerTcNoNotIn applies the NotIn predicate on the "OwnerTcNo" field.
func OwnerTcNoNotIn(vs ...int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldOwnerTcNo, vs...))
}

// OwnerTcNoGT applies the GT predicate on the "OwnerTcNo" field.
func OwnerTcNoGT(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldOwnerTcNo, v))
}

// OwnerTcNoGTE applies the GTE predicate on the "OwnerTcNo" field.
func OwnerTcNoGTE(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldOwnerTcNo, v))
}

// OwnerTcNoLT applies the LT predicate on the "OwnerTcNo" field.
func OwnerTcNoLT(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldOwnerTcNo, v))
}

// OwnerTcNoLTE applies the LTE predicate on the "OwnerTcNo" field.
func OwnerTcNoLTE(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldOwnerTcNo, v))
}

// OwnerTcNoIsNil applies the IsNil predicate on the "OwnerTcNo" field.
func OwnerTcNoIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldOwnerTcNo))
}

// OwnerTcNoNotNil applies the NotNil predicate on the "OwnerTcNo" field.
func OwnerTcNoNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldOwnerTcNo))
}

// OwnerAddressEQ applies the EQ predicate on the "OwnerAddress" field.
func OwnerAddressEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldOwnerAddress, v))
}

// OwnerAddressNEQ applies the NEQ predicate on the "OwnerAddress" field.
func OwnerAddressNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldOwnerAddress, v))
}

// OwnerAddressIn applies the In predicate on the "OwnerAddress" field.
func OwnerAddressIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldOwnerAddress, vs...))
}

// OwnerAddressNotIn applies the NotIn predicate on the "OwnerAddress" field.
func OwnerAddressNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldOwnerAddress, vs...))
}

// OwnerAddressGT applies the GT predicate on the "OwnerAddress" field.
func OwnerAddressGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldOwnerAddress, v))
}

// OwnerAddressGTE applies the GTE predicate on the "OwnerAddress" field.
func OwnerAddressGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldOwnerAddress, v))
}

// OwnerAddressLT applies the LT predicate on the "OwnerAddress" field.
func OwnerAddressLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldOwnerAddress, v))
}

// OwnerAddressLTE applies the LTE predicate on the "OwnerAddress" field.
func OwnerAddressLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldOwnerAddress, v))
}

// OwnerAddressContains applies the Contains predicate on the "OwnerAddress" field.
func OwnerAddressContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldOwnerAddress, v))
}

// OwnerAddressHasPrefix applies the HasPrefix predicate on the "OwnerAddress" field.
func OwnerAddressHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldOwnerAddress, v))
}

// OwnerAddressHasSuffix applies the HasSuffix predicate on the "OwnerAddress" field.
func OwnerAddressHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldOwnerAddress, v))
}

// OwnerAddressIsNil applies the IsNil predicate on the "OwnerAddress" field.
func OwnerAddressIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldOwnerAddress))
}

// OwnerAddressNotNil applies the NotNil predicate on the "OwnerAddress" field.
func OwnerAddressNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldOwnerAddress))
}

// OwnerAddressEqualFold applies the EqualFold predicate on the "OwnerAddress" field.
func OwnerAddressEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldOwnerAddress, v))
}

// OwnerAddressContainsFold applies the ContainsFold predicate on the "OwnerAddress" field.
func OwnerAddressContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldOwnerAddress, v))
}

// OwnerPhoneEQ applies the EQ predicate on the "OwnerPhone" field.
func OwnerPhoneEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldOwnerPhone, v))
}

// OwnerPhoneNEQ applies the NEQ predicate on the "OwnerPhone" field.
func OwnerPhoneNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldOwnerPhone, v))
}

// OwnerPhoneIn applies the In predicate on the "OwnerPhone" field.
func OwnerPhoneIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldOwnerPhone, vs...))
}

// OwnerPhoneNotIn applies the NotIn predicate on the "OwnerPhone" field.
func OwnerPhoneNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldOwnerPhone, vs...))
}

// OwnerPhoneGT applies the GT predicate on the "OwnerPhone" field.
func OwnerPhoneGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldOwnerPhone, v))
}

// OwnerPhoneGTE applies the GTE predicate on the "OwnerPhone" field.
func OwnerPhoneGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldOwnerPhone, v))
}

// OwnerPhoneLT applies the LT predicate on the "OwnerPhone" field.
func OwnerPhoneLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldOwnerPhone, v))
}

// OwnerPhoneLTE applies the LTE predicate on the "OwnerPhone" field.
func OwnerPhoneLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldOwnerPhone, v))
}

// OwnerPhoneContains applies the Contains predicate on the "OwnerPhone" field.
func OwnerPhoneContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldOwnerPhone, v))
}

// OwnerPhoneHasPrefix applies the HasPrefix predicate on the "OwnerPhone" field.
func OwnerPhoneHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldOwnerPhone, v))
}

// OwnerPhoneHasSuffix applies the HasSuffix predicate on the "OwnerPhone" field.
func OwnerPhoneHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldOwnerPhone, v))
}

// OwnerPhoneIsNil applies the IsNil predicate on the "OwnerPhone" field.
func OwnerPhoneIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldOwnerPhone))
}

// OwnerPhoneNotNil applies the NotNil predicate on the "OwnerPhone" field.
func OwnerPhoneNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldOwnerPhone))
}

// OwnerPhoneEqualFold applies the EqualFold predicate on the "OwnerPhone" field.
func OwnerPhoneEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldOwnerPhone, v))
}

// OwnerPhoneContainsFold applies the ContainsFold predicate on the "OwnerPhone" field.
func OwnerPhoneContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldOwnerPhone, v))
}

// OwnerEmailEQ applies the EQ predicate on the "OwnerEmail" field.
func OwnerEmailEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldOwnerEmail, v))
}

// OwnerEmailNEQ applies the NEQ predicate on the "OwnerEmail" field.
func OwnerEmailNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldOwnerEmail, v))
}

// OwnerEmailIn applies the In predicate on the "OwnerEmail" field.
func OwnerEmailIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldOwnerEmail, vs...))
}

// OwnerEmailNotIn applies the NotIn predicate on the "OwnerEmail" field.
func OwnerEmailNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldOwnerEmail, vs...))
}

// OwnerEmailGT applies the GT predicate on the "OwnerEmail" field.
func OwnerEmailGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldOwnerEmail, v))
}

// OwnerEmailGTE applies the GTE predicate on the "OwnerEmail" field.
func OwnerEmailGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldOwnerEmail, v))
}

// OwnerEmailLT applies the LT predicate on the "OwnerEmail" field.
func OwnerEmailLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldOwnerEmail, v))
}

// OwnerEmailLTE applies the LTE predicate on the "OwnerEmail" field.
func OwnerEmailLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldOwnerEmail, v))
}

// OwnerEmailContains applies the Contains predicate on the "OwnerEmail" field.
func OwnerEmailContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldOwnerEmail, v))
}

// OwnerEmailHasPrefix applies the HasPrefix predicate on the "OwnerEmail" field.
func OwnerEmailHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldOwnerEmail, v))
}

// OwnerEmailHasSuffix applies the HasSuffix predicate on the "OwnerEmail" field.
func OwnerEmailHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldOwnerEmail, v))
}

// OwnerEmailIsNil applies the IsNil predicate on the "OwnerEmail" field.
func OwnerEmailIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldOwnerEmail))
}

// OwnerEmailNotNil applies the NotNil predicate on the "OwnerEmail" field.
func OwnerEmailNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldOwnerEmail))
}

// OwnerEmailEqualFold applies the EqualFold predicate on the "OwnerEmail" field.
func OwnerEmailEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldOwnerEmail, v))
}

// OwnerEmailContainsFold applies the ContainsFold predicate on the "OwnerEmail" field.
func OwnerEmailContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldOwnerEmail, v))
}

// OwnerRegisterNoEQ applies the EQ predicate on the "OwnerRegisterNo" field.
func OwnerRegisterNoEQ(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldOwnerRegisterNo, v))
}

// OwnerRegisterNoNEQ applies the NEQ predicate on the "OwnerRegisterNo" field.
func OwnerRegisterNoNEQ(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldOwnerRegisterNo, v))
}

// OwnerRegisterNoIn applies the In predicate on the "OwnerRegisterNo" field.
func OwnerRegisterNoIn(vs ...int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldOwnerRegisterNo, vs...))
}

// OwnerRegisterNoNotIn applies the NotIn predicate on the "OwnerRegisterNo" field.
func OwnerRegisterNoNotIn(vs ...int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldOwnerRegisterNo, vs...))
}

// OwnerRegisterNoGT applies the GT predicate on the "OwnerRegisterNo" field.
func OwnerRegisterNoGT(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldOwnerRegisterNo, v))
}

// OwnerRegisterNoGTE applies the GTE predicate on the "OwnerRegisterNo" field.
func OwnerRegisterNoGTE(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldOwnerRegisterNo, v))
}

// OwnerRegisterNoLT applies the LT predicate on the "OwnerRegisterNo" field.
func OwnerRegisterNoLT(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldOwnerRegisterNo, v))
}

// OwnerRegisterNoLTE applies the LTE predicate on the "OwnerRegisterNo" field.
func OwnerRegisterNoLTE(v int) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldOwnerRegisterNo, v))
}

// OwnerRegisterNoIsNil applies the IsNil predicate on the "OwnerRegisterNo" field.
func OwnerRegisterNoIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldOwnerRegisterNo))
}

// OwnerRegisterNoNotNil applies the NotNil predicate on the "OwnerRegisterNo" field.
func OwnerRegisterNoNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldOwnerRegisterNo))
}

// OwnerCareerEQ applies the EQ predicate on the "OwnerCareer" field.
func OwnerCareerEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldOwnerCareer, v))
}

// OwnerCareerNEQ applies the NEQ predicate on the "OwnerCareer" field.
func OwnerCareerNEQ(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldOwnerCareer, v))
}

// OwnerCareerIn applies the In predicate on the "OwnerCareer" field.
func OwnerCareerIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldOwnerCareer, vs...))
}

// OwnerCareerNotIn applies the NotIn predicate on the "OwnerCareer" field.
func OwnerCareerNotIn(vs ...string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldOwnerCareer, vs...))
}

// OwnerCareerGT applies the GT predicate on the "OwnerCareer" field.
func OwnerCareerGT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldOwnerCareer, v))
}

// OwnerCareerGTE applies the GTE predicate on the "OwnerCareer" field.
func OwnerCareerGTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldOwnerCareer, v))
}

// OwnerCareerLT applies the LT predicate on the "OwnerCareer" field.
func OwnerCareerLT(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldOwnerCareer, v))
}

// OwnerCareerLTE applies the LTE predicate on the "OwnerCareer" field.
func OwnerCareerLTE(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldOwnerCareer, v))
}

// OwnerCareerContains applies the Contains predicate on the "OwnerCareer" field.
func OwnerCareerContains(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContains(FieldOwnerCareer, v))
}

// OwnerCareerHasPrefix applies the HasPrefix predicate on the "OwnerCareer" field.
func OwnerCareerHasPrefix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasPrefix(FieldOwnerCareer, v))
}

// OwnerCareerHasSuffix applies the HasSuffix predicate on the "OwnerCareer" field.
func OwnerCareerHasSuffix(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldHasSuffix(FieldOwnerCareer, v))
}

// OwnerCareerIsNil applies the IsNil predicate on the "OwnerCareer" field.
func OwnerCareerIsNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIsNull(FieldOwnerCareer))
}

// OwnerCareerNotNil applies the NotNil predicate on the "OwnerCareer" field.
func OwnerCareerNotNil() predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotNull(FieldOwnerCareer))
}

// OwnerCareerEqualFold applies the EqualFold predicate on the "OwnerCareer" field.
func OwnerCareerEqualFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEqualFold(FieldOwnerCareer, v))
}

// OwnerCareerContainsFold applies the ContainsFold predicate on the "OwnerCareer" field.
func OwnerCareerContainsFold(v string) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldContainsFold(FieldOwnerCareer, v))
}

// CreatedAtEQ applies the EQ predicate on the "CreatedAt" field.
func CreatedAtEQ(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "CreatedAt" field.
func CreatedAtNEQ(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "CreatedAt" field.
func CreatedAtIn(vs ...time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "CreatedAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "CreatedAt" field.
func CreatedAtGT(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "CreatedAt" field.
func CreatedAtGTE(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "CreatedAt" field.
func CreatedAtLT(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "CreatedAt" field.
func CreatedAtLTE(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasJobs applies the HasEdge predicate on the "jobs" edge.
func HasJobs() predicate.CompanyDetail {
	return predicate.CompanyDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, JobsTable, JobsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobsWith applies the HasEdge predicate on the "jobs" edge with a given conditions (other predicates).
func HasJobsWith(preds ...predicate.JobDetail) predicate.CompanyDetail {
	return predicate.CompanyDetail(func(s *sql.Selector) {
		step := newJobsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.CompanyDetail {
	return predicate.CompanyDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.CompanyUser) predicate.CompanyDetail {
	return predicate.CompanyDetail(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTokens applies the HasEdge predicate on the "tokens" edge.
func HasTokens() predicate.CompanyDetail {
	return predicate.CompanyDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TokensTable, TokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTokensWith applies the HasEdge predicate on the "tokens" edge with a given conditions (other predicates).
func HasTokensWith(preds ...predicate.CompanyToken) predicate.CompanyDetail {
	return predicate.CompanyDetail(func(s *sql.Selector) {
		step := newTokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEngineers applies the HasEdge predicate on the "engineers" edge.
func HasEngineers() predicate.CompanyDetail {
	return predicate.CompanyDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EngineersTable, EngineersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEngineersWith applies the HasEdge predicate on the "engineers" edge with a given conditions (other predicates).
func HasEngineersWith(preds ...predicate.CompanyEngineer) predicate.CompanyDetail {
	return predicate.CompanyDetail(func(s *sql.Selector) {
		step := newEngineersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CompanyDetail) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CompanyDetail) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CompanyDetail) predicate.CompanyDetail {
	return predicate.CompanyDetail(sql.NotPredicates(p))
}
