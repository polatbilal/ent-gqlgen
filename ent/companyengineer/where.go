// Code generated by ent, DO NOT EDIT.

package companyengineer

import (
	"gqlgen-ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldName, v))
}

// TcNo applies equality check predicate on the "TcNo" field. It's identical to TcNoEQ.
func TcNo(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldTcNo, v))
}

// Phone applies equality check predicate on the "Phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldPhone, v))
}

// Email applies equality check predicate on the "Email" field. It's identical to EmailEQ.
func Email(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldEmail, v))
}

// Address applies equality check predicate on the "Address" field. It's identical to AddressEQ.
func Address(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldAddress, v))
}

// Career applies equality check predicate on the "Career" field. It's identical to CareerEQ.
func Career(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldCareer, v))
}

// Position applies equality check predicate on the "Position" field. It's identical to PositionEQ.
func Position(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldPosition, v))
}

// RegNo applies equality check predicate on the "RegNo" field. It's identical to RegNoEQ.
func RegNo(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldRegNo, v))
}

// CertNo applies equality check predicate on the "CertNo" field. It's identical to CertNoEQ.
func CertNo(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldCertNo, v))
}

// YdsID applies equality check predicate on the "yds_id" field. It's identical to YdsIDEQ.
func YdsID(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldYdsID, v))
}

// Employment applies equality check predicate on the "Employment" field. It's identical to EmploymentEQ.
func Employment(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldEmployment, v))
}

// Dismissal applies equality check predicate on the "Dismissal" field. It's identical to DismissalEQ.
func Dismissal(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldDismissal, v))
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldStatus, v))
}

// Note applies equality check predicate on the "Note" field. It's identical to NoteEQ.
func Note(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldNote, v))
}

// CreatedAt applies equality check predicate on the "CreatedAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldContainsFold(FieldName, v))
}

// TcNoEQ applies the EQ predicate on the "TcNo" field.
func TcNoEQ(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldTcNo, v))
}

// TcNoNEQ applies the NEQ predicate on the "TcNo" field.
func TcNoNEQ(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNEQ(FieldTcNo, v))
}

// TcNoIn applies the In predicate on the "TcNo" field.
func TcNoIn(vs ...int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIn(FieldTcNo, vs...))
}

// TcNoNotIn applies the NotIn predicate on the "TcNo" field.
func TcNoNotIn(vs ...int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotIn(FieldTcNo, vs...))
}

// TcNoGT applies the GT predicate on the "TcNo" field.
func TcNoGT(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGT(FieldTcNo, v))
}

// TcNoGTE applies the GTE predicate on the "TcNo" field.
func TcNoGTE(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGTE(FieldTcNo, v))
}

// TcNoLT applies the LT predicate on the "TcNo" field.
func TcNoLT(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLT(FieldTcNo, v))
}

// TcNoLTE applies the LTE predicate on the "TcNo" field.
func TcNoLTE(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLTE(FieldTcNo, v))
}

// TcNoIsNil applies the IsNil predicate on the "TcNo" field.
func TcNoIsNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIsNull(FieldTcNo))
}

// TcNoNotNil applies the NotNil predicate on the "TcNo" field.
func TcNoNotNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotNull(FieldTcNo))
}

// PhoneEQ applies the EQ predicate on the "Phone" field.
func PhoneEQ(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "Phone" field.
func PhoneNEQ(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "Phone" field.
func PhoneIn(vs ...string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "Phone" field.
func PhoneNotIn(vs ...string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "Phone" field.
func PhoneGT(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "Phone" field.
func PhoneGTE(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "Phone" field.
func PhoneLT(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "Phone" field.
func PhoneLTE(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "Phone" field.
func PhoneContains(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "Phone" field.
func PhoneHasPrefix(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "Phone" field.
func PhoneHasSuffix(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "Phone" field.
func PhoneIsNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "Phone" field.
func PhoneNotNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "Phone" field.
func PhoneEqualFold(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "Phone" field.
func PhoneContainsFold(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldContainsFold(FieldPhone, v))
}

// EmailEQ applies the EQ predicate on the "Email" field.
func EmailEQ(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "Email" field.
func EmailNEQ(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "Email" field.
func EmailIn(vs ...string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "Email" field.
func EmailNotIn(vs ...string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "Email" field.
func EmailGT(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "Email" field.
func EmailGTE(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "Email" field.
func EmailLT(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "Email" field.
func EmailLTE(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "Email" field.
func EmailContains(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "Email" field.
func EmailHasPrefix(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "Email" field.
func EmailHasSuffix(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "Email" field.
func EmailIsNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "Email" field.
func EmailNotNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "Email" field.
func EmailEqualFold(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "Email" field.
func EmailContainsFold(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldContainsFold(FieldEmail, v))
}

// AddressEQ applies the EQ predicate on the "Address" field.
func AddressEQ(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "Address" field.
func AddressNEQ(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "Address" field.
func AddressIn(vs ...string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "Address" field.
func AddressNotIn(vs ...string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "Address" field.
func AddressGT(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "Address" field.
func AddressGTE(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "Address" field.
func AddressLT(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "Address" field.
func AddressLTE(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "Address" field.
func AddressContains(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "Address" field.
func AddressHasPrefix(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "Address" field.
func AddressHasSuffix(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "Address" field.
func AddressIsNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "Address" field.
func AddressNotNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "Address" field.
func AddressEqualFold(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "Address" field.
func AddressContainsFold(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldContainsFold(FieldAddress, v))
}

// CareerEQ applies the EQ predicate on the "Career" field.
func CareerEQ(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldCareer, v))
}

// CareerNEQ applies the NEQ predicate on the "Career" field.
func CareerNEQ(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNEQ(FieldCareer, v))
}

// CareerIn applies the In predicate on the "Career" field.
func CareerIn(vs ...string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIn(FieldCareer, vs...))
}

// CareerNotIn applies the NotIn predicate on the "Career" field.
func CareerNotIn(vs ...string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotIn(FieldCareer, vs...))
}

// CareerGT applies the GT predicate on the "Career" field.
func CareerGT(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGT(FieldCareer, v))
}

// CareerGTE applies the GTE predicate on the "Career" field.
func CareerGTE(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGTE(FieldCareer, v))
}

// CareerLT applies the LT predicate on the "Career" field.
func CareerLT(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLT(FieldCareer, v))
}

// CareerLTE applies the LTE predicate on the "Career" field.
func CareerLTE(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLTE(FieldCareer, v))
}

// CareerContains applies the Contains predicate on the "Career" field.
func CareerContains(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldContains(FieldCareer, v))
}

// CareerHasPrefix applies the HasPrefix predicate on the "Career" field.
func CareerHasPrefix(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldHasPrefix(FieldCareer, v))
}

// CareerHasSuffix applies the HasSuffix predicate on the "Career" field.
func CareerHasSuffix(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldHasSuffix(FieldCareer, v))
}

// CareerIsNil applies the IsNil predicate on the "Career" field.
func CareerIsNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIsNull(FieldCareer))
}

// CareerNotNil applies the NotNil predicate on the "Career" field.
func CareerNotNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotNull(FieldCareer))
}

// CareerEqualFold applies the EqualFold predicate on the "Career" field.
func CareerEqualFold(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEqualFold(FieldCareer, v))
}

// CareerContainsFold applies the ContainsFold predicate on the "Career" field.
func CareerContainsFold(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldContainsFold(FieldCareer, v))
}

// PositionEQ applies the EQ predicate on the "Position" field.
func PositionEQ(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "Position" field.
func PositionNEQ(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "Position" field.
func PositionIn(vs ...string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "Position" field.
func PositionNotIn(vs ...string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "Position" field.
func PositionGT(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "Position" field.
func PositionGTE(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "Position" field.
func PositionLT(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "Position" field.
func PositionLTE(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLTE(FieldPosition, v))
}

// PositionContains applies the Contains predicate on the "Position" field.
func PositionContains(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldContains(FieldPosition, v))
}

// PositionHasPrefix applies the HasPrefix predicate on the "Position" field.
func PositionHasPrefix(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldHasPrefix(FieldPosition, v))
}

// PositionHasSuffix applies the HasSuffix predicate on the "Position" field.
func PositionHasSuffix(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldHasSuffix(FieldPosition, v))
}

// PositionIsNil applies the IsNil predicate on the "Position" field.
func PositionIsNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIsNull(FieldPosition))
}

// PositionNotNil applies the NotNil predicate on the "Position" field.
func PositionNotNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotNull(FieldPosition))
}

// PositionEqualFold applies the EqualFold predicate on the "Position" field.
func PositionEqualFold(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEqualFold(FieldPosition, v))
}

// PositionContainsFold applies the ContainsFold predicate on the "Position" field.
func PositionContainsFold(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldContainsFold(FieldPosition, v))
}

// RegNoEQ applies the EQ predicate on the "RegNo" field.
func RegNoEQ(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldRegNo, v))
}

// RegNoNEQ applies the NEQ predicate on the "RegNo" field.
func RegNoNEQ(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNEQ(FieldRegNo, v))
}

// RegNoIn applies the In predicate on the "RegNo" field.
func RegNoIn(vs ...int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIn(FieldRegNo, vs...))
}

// RegNoNotIn applies the NotIn predicate on the "RegNo" field.
func RegNoNotIn(vs ...int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotIn(FieldRegNo, vs...))
}

// RegNoGT applies the GT predicate on the "RegNo" field.
func RegNoGT(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGT(FieldRegNo, v))
}

// RegNoGTE applies the GTE predicate on the "RegNo" field.
func RegNoGTE(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGTE(FieldRegNo, v))
}

// RegNoLT applies the LT predicate on the "RegNo" field.
func RegNoLT(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLT(FieldRegNo, v))
}

// RegNoLTE applies the LTE predicate on the "RegNo" field.
func RegNoLTE(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLTE(FieldRegNo, v))
}

// RegNoIsNil applies the IsNil predicate on the "RegNo" field.
func RegNoIsNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIsNull(FieldRegNo))
}

// RegNoNotNil applies the NotNil predicate on the "RegNo" field.
func RegNoNotNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotNull(FieldRegNo))
}

// CertNoEQ applies the EQ predicate on the "CertNo" field.
func CertNoEQ(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldCertNo, v))
}

// CertNoNEQ applies the NEQ predicate on the "CertNo" field.
func CertNoNEQ(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNEQ(FieldCertNo, v))
}

// CertNoIn applies the In predicate on the "CertNo" field.
func CertNoIn(vs ...int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIn(FieldCertNo, vs...))
}

// CertNoNotIn applies the NotIn predicate on the "CertNo" field.
func CertNoNotIn(vs ...int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotIn(FieldCertNo, vs...))
}

// CertNoGT applies the GT predicate on the "CertNo" field.
func CertNoGT(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGT(FieldCertNo, v))
}

// CertNoGTE applies the GTE predicate on the "CertNo" field.
func CertNoGTE(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGTE(FieldCertNo, v))
}

// CertNoLT applies the LT predicate on the "CertNo" field.
func CertNoLT(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLT(FieldCertNo, v))
}

// CertNoLTE applies the LTE predicate on the "CertNo" field.
func CertNoLTE(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLTE(FieldCertNo, v))
}

// CertNoIsNil applies the IsNil predicate on the "CertNo" field.
func CertNoIsNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIsNull(FieldCertNo))
}

// CertNoNotNil applies the NotNil predicate on the "CertNo" field.
func CertNoNotNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotNull(FieldCertNo))
}

// YdsIDEQ applies the EQ predicate on the "yds_id" field.
func YdsIDEQ(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldYdsID, v))
}

// YdsIDNEQ applies the NEQ predicate on the "yds_id" field.
func YdsIDNEQ(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNEQ(FieldYdsID, v))
}

// YdsIDIn applies the In predicate on the "yds_id" field.
func YdsIDIn(vs ...int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIn(FieldYdsID, vs...))
}

// YdsIDNotIn applies the NotIn predicate on the "yds_id" field.
func YdsIDNotIn(vs ...int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotIn(FieldYdsID, vs...))
}

// YdsIDGT applies the GT predicate on the "yds_id" field.
func YdsIDGT(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGT(FieldYdsID, v))
}

// YdsIDGTE applies the GTE predicate on the "yds_id" field.
func YdsIDGTE(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGTE(FieldYdsID, v))
}

// YdsIDLT applies the LT predicate on the "yds_id" field.
func YdsIDLT(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLT(FieldYdsID, v))
}

// YdsIDLTE applies the LTE predicate on the "yds_id" field.
func YdsIDLTE(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLTE(FieldYdsID, v))
}

// YdsIDIsNil applies the IsNil predicate on the "yds_id" field.
func YdsIDIsNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIsNull(FieldYdsID))
}

// YdsIDNotNil applies the NotNil predicate on the "yds_id" field.
func YdsIDNotNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotNull(FieldYdsID))
}

// EmploymentEQ applies the EQ predicate on the "Employment" field.
func EmploymentEQ(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldEmployment, v))
}

// EmploymentNEQ applies the NEQ predicate on the "Employment" field.
func EmploymentNEQ(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNEQ(FieldEmployment, v))
}

// EmploymentIn applies the In predicate on the "Employment" field.
func EmploymentIn(vs ...time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIn(FieldEmployment, vs...))
}

// EmploymentNotIn applies the NotIn predicate on the "Employment" field.
func EmploymentNotIn(vs ...time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotIn(FieldEmployment, vs...))
}

// EmploymentGT applies the GT predicate on the "Employment" field.
func EmploymentGT(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGT(FieldEmployment, v))
}

// EmploymentGTE applies the GTE predicate on the "Employment" field.
func EmploymentGTE(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGTE(FieldEmployment, v))
}

// EmploymentLT applies the LT predicate on the "Employment" field.
func EmploymentLT(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLT(FieldEmployment, v))
}

// EmploymentLTE applies the LTE predicate on the "Employment" field.
func EmploymentLTE(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLTE(FieldEmployment, v))
}

// EmploymentIsNil applies the IsNil predicate on the "Employment" field.
func EmploymentIsNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIsNull(FieldEmployment))
}

// EmploymentNotNil applies the NotNil predicate on the "Employment" field.
func EmploymentNotNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotNull(FieldEmployment))
}

// DismissalEQ applies the EQ predicate on the "Dismissal" field.
func DismissalEQ(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldDismissal, v))
}

// DismissalNEQ applies the NEQ predicate on the "Dismissal" field.
func DismissalNEQ(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNEQ(FieldDismissal, v))
}

// DismissalIn applies the In predicate on the "Dismissal" field.
func DismissalIn(vs ...time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIn(FieldDismissal, vs...))
}

// DismissalNotIn applies the NotIn predicate on the "Dismissal" field.
func DismissalNotIn(vs ...time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotIn(FieldDismissal, vs...))
}

// DismissalGT applies the GT predicate on the "Dismissal" field.
func DismissalGT(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGT(FieldDismissal, v))
}

// DismissalGTE applies the GTE predicate on the "Dismissal" field.
func DismissalGTE(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGTE(FieldDismissal, v))
}

// DismissalLT applies the LT predicate on the "Dismissal" field.
func DismissalLT(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLT(FieldDismissal, v))
}

// DismissalLTE applies the LTE predicate on the "Dismissal" field.
func DismissalLTE(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLTE(FieldDismissal, v))
}

// DismissalIsNil applies the IsNil predicate on the "Dismissal" field.
func DismissalIsNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIsNull(FieldDismissal))
}

// DismissalNotNil applies the NotNil predicate on the "Dismissal" field.
func DismissalNotNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotNull(FieldDismissal))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "Status" field.
func StatusGT(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "Status" field.
func StatusGTE(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "Status" field.
func StatusLT(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "Status" field.
func StatusLTE(v int) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLTE(FieldStatus, v))
}

// NoteEQ applies the EQ predicate on the "Note" field.
func NoteEQ(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldNote, v))
}

// NoteNEQ applies the NEQ predicate on the "Note" field.
func NoteNEQ(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNEQ(FieldNote, v))
}

// NoteIn applies the In predicate on the "Note" field.
func NoteIn(vs ...string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIn(FieldNote, vs...))
}

// NoteNotIn applies the NotIn predicate on the "Note" field.
func NoteNotIn(vs ...string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotIn(FieldNote, vs...))
}

// NoteGT applies the GT predicate on the "Note" field.
func NoteGT(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGT(FieldNote, v))
}

// NoteGTE applies the GTE predicate on the "Note" field.
func NoteGTE(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGTE(FieldNote, v))
}

// NoteLT applies the LT predicate on the "Note" field.
func NoteLT(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLT(FieldNote, v))
}

// NoteLTE applies the LTE predicate on the "Note" field.
func NoteLTE(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLTE(FieldNote, v))
}

// NoteContains applies the Contains predicate on the "Note" field.
func NoteContains(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldContains(FieldNote, v))
}

// NoteHasPrefix applies the HasPrefix predicate on the "Note" field.
func NoteHasPrefix(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldHasPrefix(FieldNote, v))
}

// NoteHasSuffix applies the HasSuffix predicate on the "Note" field.
func NoteHasSuffix(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldHasSuffix(FieldNote, v))
}

// NoteIsNil applies the IsNil predicate on the "Note" field.
func NoteIsNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIsNull(FieldNote))
}

// NoteNotNil applies the NotNil predicate on the "Note" field.
func NoteNotNil() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotNull(FieldNote))
}

// NoteEqualFold applies the EqualFold predicate on the "Note" field.
func NoteEqualFold(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEqualFold(FieldNote, v))
}

// NoteContainsFold applies the ContainsFold predicate on the "Note" field.
func NoteContainsFold(v string) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldContainsFold(FieldNote, v))
}

// CreatedAtEQ applies the EQ predicate on the "CreatedAt" field.
func CreatedAtEQ(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "CreatedAt" field.
func CreatedAtNEQ(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "CreatedAt" field.
func CreatedAtIn(vs ...time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "CreatedAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "CreatedAt" field.
func CreatedAtGT(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "CreatedAt" field.
func CreatedAtGTE(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "CreatedAt" field.
func CreatedAtLT(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "CreatedAt" field.
func CreatedAtLTE(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.CompanyDetail) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(func(s *sql.Selector) {
		step := newCompanyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInspectors applies the HasEdge predicate on the "inspectors" edge.
func HasInspectors() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InspectorsTable, InspectorsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInspectorsWith applies the HasEdge predicate on the "inspectors" edge with a given conditions (other predicates).
func HasInspectorsWith(preds ...predicate.JobDetail) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(func(s *sql.Selector) {
		step := newInspectorsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasArchitects applies the HasEdge predicate on the "architects" edge.
func HasArchitects() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ArchitectsTable, ArchitectsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArchitectsWith applies the HasEdge predicate on the "architects" edge with a given conditions (other predicates).
func HasArchitectsWith(preds ...predicate.JobDetail) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(func(s *sql.Selector) {
		step := newArchitectsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatics applies the HasEdge predicate on the "statics" edge.
func HasStatics() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StaticsTable, StaticsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStaticsWith applies the HasEdge predicate on the "statics" edge with a given conditions (other predicates).
func HasStaticsWith(preds ...predicate.JobDetail) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(func(s *sql.Selector) {
		step := newStaticsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMechanics applies the HasEdge predicate on the "mechanics" edge.
func HasMechanics() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MechanicsTable, MechanicsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMechanicsWith applies the HasEdge predicate on the "mechanics" edge with a given conditions (other predicates).
func HasMechanicsWith(preds ...predicate.JobDetail) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(func(s *sql.Selector) {
		step := newMechanicsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasElectrics applies the HasEdge predicate on the "electrics" edge.
func HasElectrics() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ElectricsTable, ElectricsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasElectricsWith applies the HasEdge predicate on the "electrics" edge with a given conditions (other predicates).
func HasElectricsWith(preds ...predicate.JobDetail) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(func(s *sql.Selector) {
		step := newElectricsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasControllers applies the HasEdge predicate on the "controllers" edge.
func HasControllers() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ControllersTable, ControllersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasControllersWith applies the HasEdge predicate on the "controllers" edge with a given conditions (other predicates).
func HasControllersWith(preds ...predicate.JobDetail) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(func(s *sql.Selector) {
		step := newControllersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMechaniccontrollers applies the HasEdge predicate on the "mechaniccontrollers" edge.
func HasMechaniccontrollers() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MechaniccontrollersTable, MechaniccontrollersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMechaniccontrollersWith applies the HasEdge predicate on the "mechaniccontrollers" edge with a given conditions (other predicates).
func HasMechaniccontrollersWith(preds ...predicate.JobDetail) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(func(s *sql.Selector) {
		step := newMechaniccontrollersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasElectriccontrollers applies the HasEdge predicate on the "electriccontrollers" edge.
func HasElectriccontrollers() predicate.CompanyEngineer {
	return predicate.CompanyEngineer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ElectriccontrollersTable, ElectriccontrollersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasElectriccontrollersWith applies the HasEdge predicate on the "electriccontrollers" edge with a given conditions (other predicates).
func HasElectriccontrollersWith(preds ...predicate.JobDetail) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(func(s *sql.Selector) {
		step := newElectriccontrollersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CompanyEngineer) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CompanyEngineer) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CompanyEngineer) predicate.CompanyEngineer {
	return predicate.CompanyEngineer(sql.NotPredicates(p))
}
