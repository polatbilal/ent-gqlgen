// Code generated by ent, DO NOT EDIT.

package companyengineer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the companyengineer type in the database.
	Label = "company_engineer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldTcNo holds the string denoting the tcno field in the database.
	FieldTcNo = "tc_no"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldRegNo holds the string denoting the regno field in the database.
	FieldRegNo = "reg_no"
	// FieldCertNo holds the string denoting the certno field in the database.
	FieldCertNo = "cert_no"
	// FieldCareer holds the string denoting the career field in the database.
	FieldCareer = "career"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"
	// FieldEmployment holds the string denoting the employment field in the database.
	FieldEmployment = "employment"
	// FieldDismissal holds the string denoting the dismissal field in the database.
	FieldDismissal = "dismissal"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeCompanyOwners holds the string denoting the companyowners edge name in mutations.
	EdgeCompanyOwners = "companyOwners"
	// EdgeInspectors holds the string denoting the inspectors edge name in mutations.
	EdgeInspectors = "inspectors"
	// EdgeArchitects holds the string denoting the architects edge name in mutations.
	EdgeArchitects = "architects"
	// EdgeStatics holds the string denoting the statics edge name in mutations.
	EdgeStatics = "statics"
	// EdgeMechanics holds the string denoting the mechanics edge name in mutations.
	EdgeMechanics = "mechanics"
	// EdgeElectrics holds the string denoting the electrics edge name in mutations.
	EdgeElectrics = "electrics"
	// EdgeControllers holds the string denoting the controllers edge name in mutations.
	EdgeControllers = "controllers"
	// EdgeMechaniccontrollers holds the string denoting the mechaniccontrollers edge name in mutations.
	EdgeMechaniccontrollers = "mechaniccontrollers"
	// EdgeElectriccontrollers holds the string denoting the electriccontrollers edge name in mutations.
	EdgeElectriccontrollers = "electriccontrollers"
	// Table holds the table name of the companyengineer in the database.
	Table = "company_engineers"
	// CompanyOwnersTable is the table that holds the companyOwners relation/edge.
	CompanyOwnersTable = "company_details"
	// CompanyOwnersInverseTable is the table name for the CompanyDetail entity.
	// It exists in this package in order to avoid circular dependency with the "companydetail" package.
	CompanyOwnersInverseTable = "company_details"
	// CompanyOwnersColumn is the table column denoting the companyOwners relation/edge.
	CompanyOwnersColumn = "owner_id"
	// InspectorsTable is the table that holds the inspectors relation/edge.
	InspectorsTable = "job_details"
	// InspectorsInverseTable is the table name for the JobDetail entity.
	// It exists in this package in order to avoid circular dependency with the "jobdetail" package.
	InspectorsInverseTable = "job_details"
	// InspectorsColumn is the table column denoting the inspectors relation/edge.
	InspectorsColumn = "inspector_id"
	// ArchitectsTable is the table that holds the architects relation/edge.
	ArchitectsTable = "job_details"
	// ArchitectsInverseTable is the table name for the JobDetail entity.
	// It exists in this package in order to avoid circular dependency with the "jobdetail" package.
	ArchitectsInverseTable = "job_details"
	// ArchitectsColumn is the table column denoting the architects relation/edge.
	ArchitectsColumn = "architect_id"
	// StaticsTable is the table that holds the statics relation/edge.
	StaticsTable = "job_details"
	// StaticsInverseTable is the table name for the JobDetail entity.
	// It exists in this package in order to avoid circular dependency with the "jobdetail" package.
	StaticsInverseTable = "job_details"
	// StaticsColumn is the table column denoting the statics relation/edge.
	StaticsColumn = "static_id"
	// MechanicsTable is the table that holds the mechanics relation/edge.
	MechanicsTable = "job_details"
	// MechanicsInverseTable is the table name for the JobDetail entity.
	// It exists in this package in order to avoid circular dependency with the "jobdetail" package.
	MechanicsInverseTable = "job_details"
	// MechanicsColumn is the table column denoting the mechanics relation/edge.
	MechanicsColumn = "mechanic_id"
	// ElectricsTable is the table that holds the electrics relation/edge.
	ElectricsTable = "job_details"
	// ElectricsInverseTable is the table name for the JobDetail entity.
	// It exists in this package in order to avoid circular dependency with the "jobdetail" package.
	ElectricsInverseTable = "job_details"
	// ElectricsColumn is the table column denoting the electrics relation/edge.
	ElectricsColumn = "electric_id"
	// ControllersTable is the table that holds the controllers relation/edge.
	ControllersTable = "job_details"
	// ControllersInverseTable is the table name for the JobDetail entity.
	// It exists in this package in order to avoid circular dependency with the "jobdetail" package.
	ControllersInverseTable = "job_details"
	// ControllersColumn is the table column denoting the controllers relation/edge.
	ControllersColumn = "controller_id"
	// MechaniccontrollersTable is the table that holds the mechaniccontrollers relation/edge.
	MechaniccontrollersTable = "job_details"
	// MechaniccontrollersInverseTable is the table name for the JobDetail entity.
	// It exists in this package in order to avoid circular dependency with the "jobdetail" package.
	MechaniccontrollersInverseTable = "job_details"
	// MechaniccontrollersColumn is the table column denoting the mechaniccontrollers relation/edge.
	MechaniccontrollersColumn = "mechaniccontroller_id"
	// ElectriccontrollersTable is the table that holds the electriccontrollers relation/edge.
	ElectriccontrollersTable = "job_details"
	// ElectriccontrollersInverseTable is the table name for the JobDetail entity.
	// It exists in this package in order to avoid circular dependency with the "jobdetail" package.
	ElectriccontrollersInverseTable = "job_details"
	// ElectriccontrollersColumn is the table column denoting the electriccontrollers relation/edge.
	ElectriccontrollersColumn = "electriccontroller_id"
)

// Columns holds all SQL columns for companyengineer fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAddress,
	FieldEmail,
	FieldTcNo,
	FieldPhone,
	FieldRegNo,
	FieldCertNo,
	FieldCareer,
	FieldPosition,
	FieldNote,
	FieldStatus,
	FieldDeleted,
	FieldEmployment,
	FieldDismissal,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "Name" field.
	DefaultName string
	// DefaultStatus holds the default value on creation for the "Status" field.
	DefaultStatus int
	// DefaultDeleted holds the default value on creation for the "Deleted" field.
	DefaultDeleted int
	// DefaultCreatedAt holds the default value on creation for the "CreatedAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "UpdatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "UpdatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the CompanyEngineer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the Name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAddress orders the results by the Address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByEmail orders the results by the Email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByTcNo orders the results by the TcNo field.
func ByTcNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTcNo, opts...).ToFunc()
}

// ByPhone orders the results by the Phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByRegNo orders the results by the RegNo field.
func ByRegNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegNo, opts...).ToFunc()
}

// ByCertNo orders the results by the CertNo field.
func ByCertNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCertNo, opts...).ToFunc()
}

// ByCareer orders the results by the Career field.
func ByCareer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCareer, opts...).ToFunc()
}

// ByPosition orders the results by the Position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByNote orders the results by the Note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDeleted orders the results by the Deleted field.
func ByDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleted, opts...).ToFunc()
}

// ByEmployment orders the results by the Employment field.
func ByEmployment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployment, opts...).ToFunc()
}

// ByDismissal orders the results by the Dismissal field.
func ByDismissal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDismissal, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCompanyOwnersCount orders the results by companyOwners count.
func ByCompanyOwnersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCompanyOwnersStep(), opts...)
	}
}

// ByCompanyOwners orders the results by companyOwners terms.
func ByCompanyOwners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyOwnersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInspectorsCount orders the results by inspectors count.
func ByInspectorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInspectorsStep(), opts...)
	}
}

// ByInspectors orders the results by inspectors terms.
func ByInspectors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInspectorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByArchitectsCount orders the results by architects count.
func ByArchitectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newArchitectsStep(), opts...)
	}
}

// ByArchitects orders the results by architects terms.
func ByArchitects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArchitectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStaticsCount orders the results by statics count.
func ByStaticsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStaticsStep(), opts...)
	}
}

// ByStatics orders the results by statics terms.
func ByStatics(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStaticsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMechanicsCount orders the results by mechanics count.
func ByMechanicsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMechanicsStep(), opts...)
	}
}

// ByMechanics orders the results by mechanics terms.
func ByMechanics(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMechanicsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByElectricsCount orders the results by electrics count.
func ByElectricsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newElectricsStep(), opts...)
	}
}

// ByElectrics orders the results by electrics terms.
func ByElectrics(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newElectricsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByControllersCount orders the results by controllers count.
func ByControllersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControllersStep(), opts...)
	}
}

// ByControllers orders the results by controllers terms.
func ByControllers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControllersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMechaniccontrollersCount orders the results by mechaniccontrollers count.
func ByMechaniccontrollersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMechaniccontrollersStep(), opts...)
	}
}

// ByMechaniccontrollers orders the results by mechaniccontrollers terms.
func ByMechaniccontrollers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMechaniccontrollersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByElectriccontrollersCount orders the results by electriccontrollers count.
func ByElectriccontrollersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newElectriccontrollersStep(), opts...)
	}
}

// ByElectriccontrollers orders the results by electriccontrollers terms.
func ByElectriccontrollers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newElectriccontrollersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCompanyOwnersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyOwnersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CompanyOwnersTable, CompanyOwnersColumn),
	)
}
func newInspectorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InspectorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InspectorsTable, InspectorsColumn),
	)
}
func newArchitectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArchitectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ArchitectsTable, ArchitectsColumn),
	)
}
func newStaticsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StaticsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StaticsTable, StaticsColumn),
	)
}
func newMechanicsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MechanicsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MechanicsTable, MechanicsColumn),
	)
}
func newElectricsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ElectricsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ElectricsTable, ElectricsColumn),
	)
}
func newControllersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControllersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ControllersTable, ControllersColumn),
	)
}
func newMechaniccontrollersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MechaniccontrollersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MechaniccontrollersTable, MechaniccontrollersColumn),
	)
}
func newElectriccontrollersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ElectriccontrollersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ElectriccontrollersTable, ElectriccontrollersColumn),
	)
}
