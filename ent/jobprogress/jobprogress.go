// Code generated by ent, DO NOT EDIT.

package jobprogress

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the jobprogress type in the database.
	Label = "job_progress"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldYibfNo holds the string denoting the yibfno field in the database.
	FieldYibfNo = "yibf_no"
	// FieldOne holds the string denoting the one field in the database.
	FieldOne = "one"
	// FieldTwo holds the string denoting the two field in the database.
	FieldTwo = "two"
	// FieldThree holds the string denoting the three field in the database.
	FieldThree = "three"
	// FieldFour holds the string denoting the four field in the database.
	FieldFour = "four"
	// FieldFive holds the string denoting the five field in the database.
	FieldFive = "five"
	// FieldSix holds the string denoting the six field in the database.
	FieldSix = "six"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeProgress holds the string denoting the progress edge name in mutations.
	EdgeProgress = "progress"
	// Table holds the table name of the jobprogress in the database.
	Table = "job_progresses"
	// ProgressTable is the table that holds the progress relation/edge.
	ProgressTable = "job_relations"
	// ProgressInverseTable is the table name for the JobRelations entity.
	// It exists in this package in order to avoid circular dependency with the "jobrelations" package.
	ProgressInverseTable = "job_relations"
	// ProgressColumn is the table column denoting the progress relation/edge.
	ProgressColumn = "progress_id"
)

// Columns holds all SQL columns for jobprogress fields.
var Columns = []string{
	FieldID,
	FieldYibfNo,
	FieldOne,
	FieldTwo,
	FieldThree,
	FieldFour,
	FieldFive,
	FieldSix,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultOne holds the default value on creation for the "One" field.
	DefaultOne int
	// DefaultTwo holds the default value on creation for the "Two" field.
	DefaultTwo int
	// DefaultThree holds the default value on creation for the "Three" field.
	DefaultThree int
	// DefaultFour holds the default value on creation for the "Four" field.
	DefaultFour int
	// DefaultFive holds the default value on creation for the "Five" field.
	DefaultFive int
	// DefaultSix holds the default value on creation for the "Six" field.
	DefaultSix int
	// DefaultCreatedAt holds the default value on creation for the "CreatedAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "UpdatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "UpdatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the JobProgress queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByYibfNo orders the results by the yibfNo field.
func ByYibfNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYibfNo, opts...).ToFunc()
}

// ByOne orders the results by the One field.
func ByOne(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOne, opts...).ToFunc()
}

// ByTwo orders the results by the Two field.
func ByTwo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTwo, opts...).ToFunc()
}

// ByThree orders the results by the Three field.
func ByThree(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThree, opts...).ToFunc()
}

// ByFour orders the results by the Four field.
func ByFour(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFour, opts...).ToFunc()
}

// ByFive orders the results by the Five field.
func ByFive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFive, opts...).ToFunc()
}

// BySix orders the results by the Six field.
func BySix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSix, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProgressCount orders the results by progress count.
func ByProgressCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgressStep(), opts...)
	}
}

// ByProgress orders the results by progress terms.
func ByProgress(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgressStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProgressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProgressTable, ProgressColumn),
	)
}
