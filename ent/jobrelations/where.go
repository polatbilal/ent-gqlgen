// Code generated by ent, DO NOT EDIT.

package jobrelations

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/polatbilal/gqlgen-ent/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldLTE(FieldID, id))
}

// YibfNo applies equality check predicate on the "yibfNo" field. It's identical to YibfNoEQ.
func YibfNo(v int) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldEQ(FieldYibfNo, v))
}

// CreatedAt applies equality check predicate on the "CreatedAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldEQ(FieldUpdatedAt, v))
}

// YibfNoEQ applies the EQ predicate on the "yibfNo" field.
func YibfNoEQ(v int) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldEQ(FieldYibfNo, v))
}

// YibfNoNEQ applies the NEQ predicate on the "yibfNo" field.
func YibfNoNEQ(v int) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldNEQ(FieldYibfNo, v))
}

// YibfNoIn applies the In predicate on the "yibfNo" field.
func YibfNoIn(vs ...int) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldIn(FieldYibfNo, vs...))
}

// YibfNoNotIn applies the NotIn predicate on the "yibfNo" field.
func YibfNoNotIn(vs ...int) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldNotIn(FieldYibfNo, vs...))
}

// YibfNoGT applies the GT predicate on the "yibfNo" field.
func YibfNoGT(v int) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldGT(FieldYibfNo, v))
}

// YibfNoGTE applies the GTE predicate on the "yibfNo" field.
func YibfNoGTE(v int) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldGTE(FieldYibfNo, v))
}

// YibfNoLT applies the LT predicate on the "yibfNo" field.
func YibfNoLT(v int) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldLT(FieldYibfNo, v))
}

// YibfNoLTE applies the LTE predicate on the "yibfNo" field.
func YibfNoLTE(v int) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldLTE(FieldYibfNo, v))
}

// CreatedAtEQ applies the EQ predicate on the "CreatedAt" field.
func CreatedAtEQ(v time.Time) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "CreatedAt" field.
func CreatedAtNEQ(v time.Time) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "CreatedAt" field.
func CreatedAtIn(vs ...time.Time) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "CreatedAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "CreatedAt" field.
func CreatedAtGT(v time.Time) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "CreatedAt" field.
func CreatedAtGTE(v time.Time) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "CreatedAt" field.
func CreatedAtLT(v time.Time) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "CreatedAt" field.
func CreatedAtLTE(v time.Time) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.JobRelations {
	return predicate.JobRelations(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasJob applies the HasEdge predicate on the "job" edge.
func HasJob() predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, JobTable, JobColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobWith applies the HasEdge predicate on the "job" edge with a given conditions (other predicates).
func HasJobWith(preds ...predicate.JobDetail) predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := newJobStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.JobOwner) predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAuthor applies the HasEdge predicate on the "author" edge.
func HasAuthor() predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorWith applies the HasEdge predicate on the "author" edge with a given conditions (other predicates).
func HasAuthorWith(preds ...predicate.JobAuthor) predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := newAuthorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.CompanyDetail) predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := newCompanyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProgress applies the HasEdge predicate on the "progress" edge.
func HasProgress() predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProgressTable, ProgressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgressWith applies the HasEdge predicate on the "progress" edge with a given conditions (other predicates).
func HasProgressWith(preds ...predicate.JobProgress) predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := newProgressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContractor applies the HasEdge predicate on the "contractor" edge.
func HasContractor() predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ContractorTable, ContractorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContractorWith applies the HasEdge predicate on the "contractor" edge with a given conditions (other predicates).
func HasContractorWith(preds ...predicate.JobContractor) predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := newContractorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSupervisor applies the HasEdge predicate on the "supervisor" edge.
func HasSupervisor() predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SupervisorTable, SupervisorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSupervisorWith applies the HasEdge predicate on the "supervisor" edge with a given conditions (other predicates).
func HasSupervisorWith(preds ...predicate.JobSupervisor) predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := newSupervisorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatic applies the HasEdge predicate on the "static" edge.
func HasStatic() predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StaticTable, StaticColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStaticWith applies the HasEdge predicate on the "static" edge with a given conditions (other predicates).
func HasStaticWith(preds ...predicate.CompanyEngineer) predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := newStaticStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMechanic applies the HasEdge predicate on the "mechanic" edge.
func HasMechanic() predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MechanicTable, MechanicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMechanicWith applies the HasEdge predicate on the "mechanic" edge with a given conditions (other predicates).
func HasMechanicWith(preds ...predicate.CompanyEngineer) predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := newMechanicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasElectric applies the HasEdge predicate on the "electric" edge.
func HasElectric() predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ElectricTable, ElectricColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasElectricWith applies the HasEdge predicate on the "electric" edge with a given conditions (other predicates).
func HasElectricWith(preds ...predicate.CompanyEngineer) predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := newElectricStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInspector applies the HasEdge predicate on the "inspector" edge.
func HasInspector() predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InspectorTable, InspectorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInspectorWith applies the HasEdge predicate on the "inspector" edge with a given conditions (other predicates).
func HasInspectorWith(preds ...predicate.CompanyEngineer) predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := newInspectorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasArchitect applies the HasEdge predicate on the "architect" edge.
func HasArchitect() predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ArchitectTable, ArchitectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArchitectWith applies the HasEdge predicate on the "architect" edge with a given conditions (other predicates).
func HasArchitectWith(preds ...predicate.CompanyEngineer) predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := newArchitectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasController applies the HasEdge predicate on the "controller" edge.
func HasController() predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ControllerTable, ControllerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasControllerWith applies the HasEdge predicate on the "controller" edge with a given conditions (other predicates).
func HasControllerWith(preds ...predicate.CompanyEngineer) predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := newControllerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMechaniccontroller applies the HasEdge predicate on the "mechaniccontroller" edge.
func HasMechaniccontroller() predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MechaniccontrollerTable, MechaniccontrollerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMechaniccontrollerWith applies the HasEdge predicate on the "mechaniccontroller" edge with a given conditions (other predicates).
func HasMechaniccontrollerWith(preds ...predicate.CompanyEngineer) predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := newMechaniccontrollerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasElectriccontroller applies the HasEdge predicate on the "electriccontroller" edge.
func HasElectriccontroller() predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ElectriccontrollerTable, ElectriccontrollerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasElectriccontrollerWith applies the HasEdge predicate on the "electriccontroller" edge with a given conditions (other predicates).
func HasElectriccontrollerWith(preds ...predicate.CompanyEngineer) predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := newElectriccontrollerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLayers applies the HasEdge predicate on the "layers" edge.
func HasLayers() predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LayersTable, LayersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLayersWith applies the HasEdge predicate on the "layers" edge with a given conditions (other predicates).
func HasLayersWith(preds ...predicate.JobLayer) predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := newLayersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPayments applies the HasEdge predicate on the "payments" edge.
func HasPayments() predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PaymentsTable, PaymentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentsWith applies the HasEdge predicate on the "payments" edge with a given conditions (other predicates).
func HasPaymentsWith(preds ...predicate.JobPayments) predicate.JobRelations {
	return predicate.JobRelations(func(s *sql.Selector) {
		step := newPaymentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JobRelations) predicate.JobRelations {
	return predicate.JobRelations(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JobRelations) predicate.JobRelations {
	return predicate.JobRelations(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JobRelations) predicate.JobRelations {
	return predicate.JobRelations(sql.NotPredicates(p))
}
