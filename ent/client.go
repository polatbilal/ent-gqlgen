// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"gqlgen-ent/ent/migrate"

	"gqlgen-ent/ent/companydetail"
	"gqlgen-ent/ent/companyengineer"
	"gqlgen-ent/ent/companyuser"
	"gqlgen-ent/ent/jobauthor"
	"gqlgen-ent/ent/jobcontractor"
	"gqlgen-ent/ent/jobdetail"
	"gqlgen-ent/ent/joblayer"
	"gqlgen-ent/ent/jobowner"
	"gqlgen-ent/ent/jobpayments"
	"gqlgen-ent/ent/jobprogress"
	"gqlgen-ent/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CompanyDetail is the client for interacting with the CompanyDetail builders.
	CompanyDetail *CompanyDetailClient
	// CompanyEngineer is the client for interacting with the CompanyEngineer builders.
	CompanyEngineer *CompanyEngineerClient
	// CompanyUser is the client for interacting with the CompanyUser builders.
	CompanyUser *CompanyUserClient
	// JobAuthor is the client for interacting with the JobAuthor builders.
	JobAuthor *JobAuthorClient
	// JobContractor is the client for interacting with the JobContractor builders.
	JobContractor *JobContractorClient
	// JobDetail is the client for interacting with the JobDetail builders.
	JobDetail *JobDetailClient
	// JobLayer is the client for interacting with the JobLayer builders.
	JobLayer *JobLayerClient
	// JobOwner is the client for interacting with the JobOwner builders.
	JobOwner *JobOwnerClient
	// JobPayments is the client for interacting with the JobPayments builders.
	JobPayments *JobPaymentsClient
	// JobProgress is the client for interacting with the JobProgress builders.
	JobProgress *JobProgressClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CompanyDetail = NewCompanyDetailClient(c.config)
	c.CompanyEngineer = NewCompanyEngineerClient(c.config)
	c.CompanyUser = NewCompanyUserClient(c.config)
	c.JobAuthor = NewJobAuthorClient(c.config)
	c.JobContractor = NewJobContractorClient(c.config)
	c.JobDetail = NewJobDetailClient(c.config)
	c.JobLayer = NewJobLayerClient(c.config)
	c.JobOwner = NewJobOwnerClient(c.config)
	c.JobPayments = NewJobPaymentsClient(c.config)
	c.JobProgress = NewJobProgressClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		CompanyDetail:   NewCompanyDetailClient(cfg),
		CompanyEngineer: NewCompanyEngineerClient(cfg),
		CompanyUser:     NewCompanyUserClient(cfg),
		JobAuthor:       NewJobAuthorClient(cfg),
		JobContractor:   NewJobContractorClient(cfg),
		JobDetail:       NewJobDetailClient(cfg),
		JobLayer:        NewJobLayerClient(cfg),
		JobOwner:        NewJobOwnerClient(cfg),
		JobPayments:     NewJobPaymentsClient(cfg),
		JobProgress:     NewJobProgressClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		CompanyDetail:   NewCompanyDetailClient(cfg),
		CompanyEngineer: NewCompanyEngineerClient(cfg),
		CompanyUser:     NewCompanyUserClient(cfg),
		JobAuthor:       NewJobAuthorClient(cfg),
		JobContractor:   NewJobContractorClient(cfg),
		JobDetail:       NewJobDetailClient(cfg),
		JobLayer:        NewJobLayerClient(cfg),
		JobOwner:        NewJobOwnerClient(cfg),
		JobPayments:     NewJobPaymentsClient(cfg),
		JobProgress:     NewJobProgressClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CompanyDetail.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.CompanyDetail, c.CompanyEngineer, c.CompanyUser, c.JobAuthor, c.JobContractor,
		c.JobDetail, c.JobLayer, c.JobOwner, c.JobPayments, c.JobProgress, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.CompanyDetail, c.CompanyEngineer, c.CompanyUser, c.JobAuthor, c.JobContractor,
		c.JobDetail, c.JobLayer, c.JobOwner, c.JobPayments, c.JobProgress, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CompanyDetailMutation:
		return c.CompanyDetail.mutate(ctx, m)
	case *CompanyEngineerMutation:
		return c.CompanyEngineer.mutate(ctx, m)
	case *CompanyUserMutation:
		return c.CompanyUser.mutate(ctx, m)
	case *JobAuthorMutation:
		return c.JobAuthor.mutate(ctx, m)
	case *JobContractorMutation:
		return c.JobContractor.mutate(ctx, m)
	case *JobDetailMutation:
		return c.JobDetail.mutate(ctx, m)
	case *JobLayerMutation:
		return c.JobLayer.mutate(ctx, m)
	case *JobOwnerMutation:
		return c.JobOwner.mutate(ctx, m)
	case *JobPaymentsMutation:
		return c.JobPayments.mutate(ctx, m)
	case *JobProgressMutation:
		return c.JobProgress.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CompanyDetailClient is a client for the CompanyDetail schema.
type CompanyDetailClient struct {
	config
}

// NewCompanyDetailClient returns a client for the CompanyDetail from the given config.
func NewCompanyDetailClient(c config) *CompanyDetailClient {
	return &CompanyDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `companydetail.Hooks(f(g(h())))`.
func (c *CompanyDetailClient) Use(hooks ...Hook) {
	c.hooks.CompanyDetail = append(c.hooks.CompanyDetail, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `companydetail.Intercept(f(g(h())))`.
func (c *CompanyDetailClient) Intercept(interceptors ...Interceptor) {
	c.inters.CompanyDetail = append(c.inters.CompanyDetail, interceptors...)
}

// Create returns a builder for creating a CompanyDetail entity.
func (c *CompanyDetailClient) Create() *CompanyDetailCreate {
	mutation := newCompanyDetailMutation(c.config, OpCreate)
	return &CompanyDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CompanyDetail entities.
func (c *CompanyDetailClient) CreateBulk(builders ...*CompanyDetailCreate) *CompanyDetailCreateBulk {
	return &CompanyDetailCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CompanyDetailClient) MapCreateBulk(slice any, setFunc func(*CompanyDetailCreate, int)) *CompanyDetailCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CompanyDetailCreateBulk{err: fmt.Errorf("calling to CompanyDetailClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CompanyDetailCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CompanyDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CompanyDetail.
func (c *CompanyDetailClient) Update() *CompanyDetailUpdate {
	mutation := newCompanyDetailMutation(c.config, OpUpdate)
	return &CompanyDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompanyDetailClient) UpdateOne(cd *CompanyDetail) *CompanyDetailUpdateOne {
	mutation := newCompanyDetailMutation(c.config, OpUpdateOne, withCompanyDetail(cd))
	return &CompanyDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompanyDetailClient) UpdateOneID(id int) *CompanyDetailUpdateOne {
	mutation := newCompanyDetailMutation(c.config, OpUpdateOne, withCompanyDetailID(id))
	return &CompanyDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CompanyDetail.
func (c *CompanyDetailClient) Delete() *CompanyDetailDelete {
	mutation := newCompanyDetailMutation(c.config, OpDelete)
	return &CompanyDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CompanyDetailClient) DeleteOne(cd *CompanyDetail) *CompanyDetailDeleteOne {
	return c.DeleteOneID(cd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CompanyDetailClient) DeleteOneID(id int) *CompanyDetailDeleteOne {
	builder := c.Delete().Where(companydetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompanyDetailDeleteOne{builder}
}

// Query returns a query builder for CompanyDetail.
func (c *CompanyDetailClient) Query() *CompanyDetailQuery {
	return &CompanyDetailQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCompanyDetail},
		inters: c.Interceptors(),
	}
}

// Get returns a CompanyDetail entity by its id.
func (c *CompanyDetailClient) Get(ctx context.Context, id int) (*CompanyDetail, error) {
	return c.Query().Where(companydetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompanyDetailClient) GetX(ctx context.Context, id int) *CompanyDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCompanyOwner queries the companyOwner edge of a CompanyDetail.
func (c *CompanyDetailClient) QueryCompanyOwner(cd *CompanyDetail) *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(companydetail.Table, companydetail.FieldID, id),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, companydetail.CompanyOwnerTable, companydetail.CompanyOwnerColumn),
		)
		fromV = sqlgraph.Neighbors(cd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEngineers queries the engineers edge of a CompanyDetail.
func (c *CompanyDetailClient) QueryEngineers(cd *CompanyDetail) *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(companydetail.Table, companydetail.FieldID, id),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companydetail.EngineersTable, companydetail.EngineersColumn),
		)
		fromV = sqlgraph.Neighbors(cd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a CompanyDetail.
func (c *CompanyDetailClient) QueryUsers(cd *CompanyDetail) *CompanyUserQuery {
	query := (&CompanyUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(companydetail.Table, companydetail.FieldID, id),
			sqlgraph.To(companyuser.Table, companyuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companydetail.UsersTable, companydetail.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(cd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobs queries the jobs edge of a CompanyDetail.
func (c *CompanyDetailClient) QueryJobs(cd *CompanyDetail) *JobDetailQuery {
	query := (&JobDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(companydetail.Table, companydetail.FieldID, id),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companydetail.JobsTable, companydetail.JobsColumn),
		)
		fromV = sqlgraph.Neighbors(cd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CompanyDetailClient) Hooks() []Hook {
	return c.hooks.CompanyDetail
}

// Interceptors returns the client interceptors.
func (c *CompanyDetailClient) Interceptors() []Interceptor {
	return c.inters.CompanyDetail
}

func (c *CompanyDetailClient) mutate(ctx context.Context, m *CompanyDetailMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CompanyDetailCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CompanyDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CompanyDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CompanyDetailDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CompanyDetail mutation op: %q", m.Op())
	}
}

// CompanyEngineerClient is a client for the CompanyEngineer schema.
type CompanyEngineerClient struct {
	config
}

// NewCompanyEngineerClient returns a client for the CompanyEngineer from the given config.
func NewCompanyEngineerClient(c config) *CompanyEngineerClient {
	return &CompanyEngineerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `companyengineer.Hooks(f(g(h())))`.
func (c *CompanyEngineerClient) Use(hooks ...Hook) {
	c.hooks.CompanyEngineer = append(c.hooks.CompanyEngineer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `companyengineer.Intercept(f(g(h())))`.
func (c *CompanyEngineerClient) Intercept(interceptors ...Interceptor) {
	c.inters.CompanyEngineer = append(c.inters.CompanyEngineer, interceptors...)
}

// Create returns a builder for creating a CompanyEngineer entity.
func (c *CompanyEngineerClient) Create() *CompanyEngineerCreate {
	mutation := newCompanyEngineerMutation(c.config, OpCreate)
	return &CompanyEngineerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CompanyEngineer entities.
func (c *CompanyEngineerClient) CreateBulk(builders ...*CompanyEngineerCreate) *CompanyEngineerCreateBulk {
	return &CompanyEngineerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CompanyEngineerClient) MapCreateBulk(slice any, setFunc func(*CompanyEngineerCreate, int)) *CompanyEngineerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CompanyEngineerCreateBulk{err: fmt.Errorf("calling to CompanyEngineerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CompanyEngineerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CompanyEngineerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CompanyEngineer.
func (c *CompanyEngineerClient) Update() *CompanyEngineerUpdate {
	mutation := newCompanyEngineerMutation(c.config, OpUpdate)
	return &CompanyEngineerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompanyEngineerClient) UpdateOne(ce *CompanyEngineer) *CompanyEngineerUpdateOne {
	mutation := newCompanyEngineerMutation(c.config, OpUpdateOne, withCompanyEngineer(ce))
	return &CompanyEngineerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompanyEngineerClient) UpdateOneID(id int) *CompanyEngineerUpdateOne {
	mutation := newCompanyEngineerMutation(c.config, OpUpdateOne, withCompanyEngineerID(id))
	return &CompanyEngineerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CompanyEngineer.
func (c *CompanyEngineerClient) Delete() *CompanyEngineerDelete {
	mutation := newCompanyEngineerMutation(c.config, OpDelete)
	return &CompanyEngineerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CompanyEngineerClient) DeleteOne(ce *CompanyEngineer) *CompanyEngineerDeleteOne {
	return c.DeleteOneID(ce.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CompanyEngineerClient) DeleteOneID(id int) *CompanyEngineerDeleteOne {
	builder := c.Delete().Where(companyengineer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompanyEngineerDeleteOne{builder}
}

// Query returns a query builder for CompanyEngineer.
func (c *CompanyEngineerClient) Query() *CompanyEngineerQuery {
	return &CompanyEngineerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCompanyEngineer},
		inters: c.Interceptors(),
	}
}

// Get returns a CompanyEngineer entity by its id.
func (c *CompanyEngineerClient) Get(ctx context.Context, id int) (*CompanyEngineer, error) {
	return c.Query().Where(companyengineer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompanyEngineerClient) GetX(ctx context.Context, id int) *CompanyEngineer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCompany queries the company edge of a CompanyEngineer.
func (c *CompanyEngineerClient) QueryCompany(ce *CompanyEngineer) *CompanyDetailQuery {
	query := (&CompanyDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(companyengineer.Table, companyengineer.FieldID, id),
			sqlgraph.To(companydetail.Table, companydetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, companyengineer.CompanyTable, companyengineer.CompanyColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompanyOwners queries the companyOwners edge of a CompanyEngineer.
func (c *CompanyEngineerClient) QueryCompanyOwners(ce *CompanyEngineer) *CompanyDetailQuery {
	query := (&CompanyDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(companyengineer.Table, companyengineer.FieldID, id),
			sqlgraph.To(companydetail.Table, companydetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companyengineer.CompanyOwnersTable, companyengineer.CompanyOwnersColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInspectors queries the inspectors edge of a CompanyEngineer.
func (c *CompanyEngineerClient) QueryInspectors(ce *CompanyEngineer) *JobDetailQuery {
	query := (&JobDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(companyengineer.Table, companyengineer.FieldID, id),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companyengineer.InspectorsTable, companyengineer.InspectorsColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArchitects queries the architects edge of a CompanyEngineer.
func (c *CompanyEngineerClient) QueryArchitects(ce *CompanyEngineer) *JobDetailQuery {
	query := (&JobDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(companyengineer.Table, companyengineer.FieldID, id),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companyengineer.ArchitectsTable, companyengineer.ArchitectsColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatics queries the statics edge of a CompanyEngineer.
func (c *CompanyEngineerClient) QueryStatics(ce *CompanyEngineer) *JobDetailQuery {
	query := (&JobDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(companyengineer.Table, companyengineer.FieldID, id),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companyengineer.StaticsTable, companyengineer.StaticsColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMechanics queries the mechanics edge of a CompanyEngineer.
func (c *CompanyEngineerClient) QueryMechanics(ce *CompanyEngineer) *JobDetailQuery {
	query := (&JobDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(companyengineer.Table, companyengineer.FieldID, id),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companyengineer.MechanicsTable, companyengineer.MechanicsColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryElectrics queries the electrics edge of a CompanyEngineer.
func (c *CompanyEngineerClient) QueryElectrics(ce *CompanyEngineer) *JobDetailQuery {
	query := (&JobDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(companyengineer.Table, companyengineer.FieldID, id),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companyengineer.ElectricsTable, companyengineer.ElectricsColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryControllers queries the controllers edge of a CompanyEngineer.
func (c *CompanyEngineerClient) QueryControllers(ce *CompanyEngineer) *JobDetailQuery {
	query := (&JobDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(companyengineer.Table, companyengineer.FieldID, id),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companyengineer.ControllersTable, companyengineer.ControllersColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMechaniccontrollers queries the mechaniccontrollers edge of a CompanyEngineer.
func (c *CompanyEngineerClient) QueryMechaniccontrollers(ce *CompanyEngineer) *JobDetailQuery {
	query := (&JobDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(companyengineer.Table, companyengineer.FieldID, id),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companyengineer.MechaniccontrollersTable, companyengineer.MechaniccontrollersColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryElectriccontrollers queries the electriccontrollers edge of a CompanyEngineer.
func (c *CompanyEngineerClient) QueryElectriccontrollers(ce *CompanyEngineer) *JobDetailQuery {
	query := (&JobDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(companyengineer.Table, companyengineer.FieldID, id),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companyengineer.ElectriccontrollersTable, companyengineer.ElectriccontrollersColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CompanyEngineerClient) Hooks() []Hook {
	return c.hooks.CompanyEngineer
}

// Interceptors returns the client interceptors.
func (c *CompanyEngineerClient) Interceptors() []Interceptor {
	return c.inters.CompanyEngineer
}

func (c *CompanyEngineerClient) mutate(ctx context.Context, m *CompanyEngineerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CompanyEngineerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CompanyEngineerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CompanyEngineerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CompanyEngineerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CompanyEngineer mutation op: %q", m.Op())
	}
}

// CompanyUserClient is a client for the CompanyUser schema.
type CompanyUserClient struct {
	config
}

// NewCompanyUserClient returns a client for the CompanyUser from the given config.
func NewCompanyUserClient(c config) *CompanyUserClient {
	return &CompanyUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `companyuser.Hooks(f(g(h())))`.
func (c *CompanyUserClient) Use(hooks ...Hook) {
	c.hooks.CompanyUser = append(c.hooks.CompanyUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `companyuser.Intercept(f(g(h())))`.
func (c *CompanyUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.CompanyUser = append(c.inters.CompanyUser, interceptors...)
}

// Create returns a builder for creating a CompanyUser entity.
func (c *CompanyUserClient) Create() *CompanyUserCreate {
	mutation := newCompanyUserMutation(c.config, OpCreate)
	return &CompanyUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CompanyUser entities.
func (c *CompanyUserClient) CreateBulk(builders ...*CompanyUserCreate) *CompanyUserCreateBulk {
	return &CompanyUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CompanyUserClient) MapCreateBulk(slice any, setFunc func(*CompanyUserCreate, int)) *CompanyUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CompanyUserCreateBulk{err: fmt.Errorf("calling to CompanyUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CompanyUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CompanyUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CompanyUser.
func (c *CompanyUserClient) Update() *CompanyUserUpdate {
	mutation := newCompanyUserMutation(c.config, OpUpdate)
	return &CompanyUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompanyUserClient) UpdateOne(cu *CompanyUser) *CompanyUserUpdateOne {
	mutation := newCompanyUserMutation(c.config, OpUpdateOne, withCompanyUser(cu))
	return &CompanyUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompanyUserClient) UpdateOneID(id int) *CompanyUserUpdateOne {
	mutation := newCompanyUserMutation(c.config, OpUpdateOne, withCompanyUserID(id))
	return &CompanyUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CompanyUser.
func (c *CompanyUserClient) Delete() *CompanyUserDelete {
	mutation := newCompanyUserMutation(c.config, OpDelete)
	return &CompanyUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CompanyUserClient) DeleteOne(cu *CompanyUser) *CompanyUserDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CompanyUserClient) DeleteOneID(id int) *CompanyUserDeleteOne {
	builder := c.Delete().Where(companyuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompanyUserDeleteOne{builder}
}

// Query returns a query builder for CompanyUser.
func (c *CompanyUserClient) Query() *CompanyUserQuery {
	return &CompanyUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCompanyUser},
		inters: c.Interceptors(),
	}
}

// Get returns a CompanyUser entity by its id.
func (c *CompanyUserClient) Get(ctx context.Context, id int) (*CompanyUser, error) {
	return c.Query().Where(companyuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompanyUserClient) GetX(ctx context.Context, id int) *CompanyUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCompany queries the company edge of a CompanyUser.
func (c *CompanyUserClient) QueryCompany(cu *CompanyUser) *CompanyDetailQuery {
	query := (&CompanyDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(companyuser.Table, companyuser.FieldID, id),
			sqlgraph.To(companydetail.Table, companydetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, companyuser.CompanyTable, companyuser.CompanyColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a CompanyUser.
func (c *CompanyUserClient) QueryUser(cu *CompanyUser) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(companyuser.Table, companyuser.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, companyuser.UserTable, companyuser.UserColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CompanyUserClient) Hooks() []Hook {
	return c.hooks.CompanyUser
}

// Interceptors returns the client interceptors.
func (c *CompanyUserClient) Interceptors() []Interceptor {
	return c.inters.CompanyUser
}

func (c *CompanyUserClient) mutate(ctx context.Context, m *CompanyUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CompanyUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CompanyUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CompanyUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CompanyUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CompanyUser mutation op: %q", m.Op())
	}
}

// JobAuthorClient is a client for the JobAuthor schema.
type JobAuthorClient struct {
	config
}

// NewJobAuthorClient returns a client for the JobAuthor from the given config.
func NewJobAuthorClient(c config) *JobAuthorClient {
	return &JobAuthorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobauthor.Hooks(f(g(h())))`.
func (c *JobAuthorClient) Use(hooks ...Hook) {
	c.hooks.JobAuthor = append(c.hooks.JobAuthor, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobauthor.Intercept(f(g(h())))`.
func (c *JobAuthorClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobAuthor = append(c.inters.JobAuthor, interceptors...)
}

// Create returns a builder for creating a JobAuthor entity.
func (c *JobAuthorClient) Create() *JobAuthorCreate {
	mutation := newJobAuthorMutation(c.config, OpCreate)
	return &JobAuthorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobAuthor entities.
func (c *JobAuthorClient) CreateBulk(builders ...*JobAuthorCreate) *JobAuthorCreateBulk {
	return &JobAuthorCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobAuthorClient) MapCreateBulk(slice any, setFunc func(*JobAuthorCreate, int)) *JobAuthorCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobAuthorCreateBulk{err: fmt.Errorf("calling to JobAuthorClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobAuthorCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobAuthorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobAuthor.
func (c *JobAuthorClient) Update() *JobAuthorUpdate {
	mutation := newJobAuthorMutation(c.config, OpUpdate)
	return &JobAuthorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobAuthorClient) UpdateOne(ja *JobAuthor) *JobAuthorUpdateOne {
	mutation := newJobAuthorMutation(c.config, OpUpdateOne, withJobAuthor(ja))
	return &JobAuthorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobAuthorClient) UpdateOneID(id int) *JobAuthorUpdateOne {
	mutation := newJobAuthorMutation(c.config, OpUpdateOne, withJobAuthorID(id))
	return &JobAuthorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobAuthor.
func (c *JobAuthorClient) Delete() *JobAuthorDelete {
	mutation := newJobAuthorMutation(c.config, OpDelete)
	return &JobAuthorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobAuthorClient) DeleteOne(ja *JobAuthor) *JobAuthorDeleteOne {
	return c.DeleteOneID(ja.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobAuthorClient) DeleteOneID(id int) *JobAuthorDeleteOne {
	builder := c.Delete().Where(jobauthor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobAuthorDeleteOne{builder}
}

// Query returns a query builder for JobAuthor.
func (c *JobAuthorClient) Query() *JobAuthorQuery {
	return &JobAuthorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobAuthor},
		inters: c.Interceptors(),
	}
}

// Get returns a JobAuthor entity by its id.
func (c *JobAuthorClient) Get(ctx context.Context, id int) (*JobAuthor, error) {
	return c.Query().Where(jobauthor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobAuthorClient) GetX(ctx context.Context, id int) *JobAuthor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuthors queries the authors edge of a JobAuthor.
func (c *JobAuthorClient) QueryAuthors(ja *JobAuthor) *JobDetailQuery {
	query := (&JobDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ja.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobauthor.Table, jobauthor.FieldID, id),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobauthor.AuthorsTable, jobauthor.AuthorsColumn),
		)
		fromV = sqlgraph.Neighbors(ja.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobAuthorClient) Hooks() []Hook {
	return c.hooks.JobAuthor
}

// Interceptors returns the client interceptors.
func (c *JobAuthorClient) Interceptors() []Interceptor {
	return c.inters.JobAuthor
}

func (c *JobAuthorClient) mutate(ctx context.Context, m *JobAuthorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobAuthorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobAuthorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobAuthorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobAuthorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobAuthor mutation op: %q", m.Op())
	}
}

// JobContractorClient is a client for the JobContractor schema.
type JobContractorClient struct {
	config
}

// NewJobContractorClient returns a client for the JobContractor from the given config.
func NewJobContractorClient(c config) *JobContractorClient {
	return &JobContractorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobcontractor.Hooks(f(g(h())))`.
func (c *JobContractorClient) Use(hooks ...Hook) {
	c.hooks.JobContractor = append(c.hooks.JobContractor, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobcontractor.Intercept(f(g(h())))`.
func (c *JobContractorClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobContractor = append(c.inters.JobContractor, interceptors...)
}

// Create returns a builder for creating a JobContractor entity.
func (c *JobContractorClient) Create() *JobContractorCreate {
	mutation := newJobContractorMutation(c.config, OpCreate)
	return &JobContractorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobContractor entities.
func (c *JobContractorClient) CreateBulk(builders ...*JobContractorCreate) *JobContractorCreateBulk {
	return &JobContractorCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobContractorClient) MapCreateBulk(slice any, setFunc func(*JobContractorCreate, int)) *JobContractorCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobContractorCreateBulk{err: fmt.Errorf("calling to JobContractorClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobContractorCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobContractorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobContractor.
func (c *JobContractorClient) Update() *JobContractorUpdate {
	mutation := newJobContractorMutation(c.config, OpUpdate)
	return &JobContractorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobContractorClient) UpdateOne(jc *JobContractor) *JobContractorUpdateOne {
	mutation := newJobContractorMutation(c.config, OpUpdateOne, withJobContractor(jc))
	return &JobContractorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobContractorClient) UpdateOneID(id int) *JobContractorUpdateOne {
	mutation := newJobContractorMutation(c.config, OpUpdateOne, withJobContractorID(id))
	return &JobContractorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobContractor.
func (c *JobContractorClient) Delete() *JobContractorDelete {
	mutation := newJobContractorMutation(c.config, OpDelete)
	return &JobContractorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobContractorClient) DeleteOne(jc *JobContractor) *JobContractorDeleteOne {
	return c.DeleteOneID(jc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobContractorClient) DeleteOneID(id int) *JobContractorDeleteOne {
	builder := c.Delete().Where(jobcontractor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobContractorDeleteOne{builder}
}

// Query returns a query builder for JobContractor.
func (c *JobContractorClient) Query() *JobContractorQuery {
	return &JobContractorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobContractor},
		inters: c.Interceptors(),
	}
}

// Get returns a JobContractor entity by its id.
func (c *JobContractorClient) Get(ctx context.Context, id int) (*JobContractor, error) {
	return c.Query().Where(jobcontractor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobContractorClient) GetX(ctx context.Context, id int) *JobContractor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryContractors queries the contractors edge of a JobContractor.
func (c *JobContractorClient) QueryContractors(jc *JobContractor) *JobDetailQuery {
	query := (&JobDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobcontractor.Table, jobcontractor.FieldID, id),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobcontractor.ContractorsTable, jobcontractor.ContractorsColumn),
		)
		fromV = sqlgraph.Neighbors(jc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobContractorClient) Hooks() []Hook {
	return c.hooks.JobContractor
}

// Interceptors returns the client interceptors.
func (c *JobContractorClient) Interceptors() []Interceptor {
	return c.inters.JobContractor
}

func (c *JobContractorClient) mutate(ctx context.Context, m *JobContractorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobContractorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobContractorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobContractorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobContractorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobContractor mutation op: %q", m.Op())
	}
}

// JobDetailClient is a client for the JobDetail schema.
type JobDetailClient struct {
	config
}

// NewJobDetailClient returns a client for the JobDetail from the given config.
func NewJobDetailClient(c config) *JobDetailClient {
	return &JobDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobdetail.Hooks(f(g(h())))`.
func (c *JobDetailClient) Use(hooks ...Hook) {
	c.hooks.JobDetail = append(c.hooks.JobDetail, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobdetail.Intercept(f(g(h())))`.
func (c *JobDetailClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobDetail = append(c.inters.JobDetail, interceptors...)
}

// Create returns a builder for creating a JobDetail entity.
func (c *JobDetailClient) Create() *JobDetailCreate {
	mutation := newJobDetailMutation(c.config, OpCreate)
	return &JobDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobDetail entities.
func (c *JobDetailClient) CreateBulk(builders ...*JobDetailCreate) *JobDetailCreateBulk {
	return &JobDetailCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobDetailClient) MapCreateBulk(slice any, setFunc func(*JobDetailCreate, int)) *JobDetailCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobDetailCreateBulk{err: fmt.Errorf("calling to JobDetailClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobDetailCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobDetail.
func (c *JobDetailClient) Update() *JobDetailUpdate {
	mutation := newJobDetailMutation(c.config, OpUpdate)
	return &JobDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobDetailClient) UpdateOne(jd *JobDetail) *JobDetailUpdateOne {
	mutation := newJobDetailMutation(c.config, OpUpdateOne, withJobDetail(jd))
	return &JobDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobDetailClient) UpdateOneID(id int) *JobDetailUpdateOne {
	mutation := newJobDetailMutation(c.config, OpUpdateOne, withJobDetailID(id))
	return &JobDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobDetail.
func (c *JobDetailClient) Delete() *JobDetailDelete {
	mutation := newJobDetailMutation(c.config, OpDelete)
	return &JobDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobDetailClient) DeleteOne(jd *JobDetail) *JobDetailDeleteOne {
	return c.DeleteOneID(jd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobDetailClient) DeleteOneID(id int) *JobDetailDeleteOne {
	builder := c.Delete().Where(jobdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobDetailDeleteOne{builder}
}

// Query returns a query builder for JobDetail.
func (c *JobDetailClient) Query() *JobDetailQuery {
	return &JobDetailQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobDetail},
		inters: c.Interceptors(),
	}
}

// Get returns a JobDetail entity by its id.
func (c *JobDetailClient) Get(ctx context.Context, id int) (*JobDetail, error) {
	return c.Query().Where(jobdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobDetailClient) GetX(ctx context.Context, id int) *JobDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a JobDetail.
func (c *JobDetailClient) QueryOwner(jd *JobDetail) *JobOwnerQuery {
	query := (&JobOwnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, id),
			sqlgraph.To(jobowner.Table, jobowner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.OwnerTable, jobdetail.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(jd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContractor queries the contractor edge of a JobDetail.
func (c *JobDetailClient) QueryContractor(jd *JobDetail) *JobContractorQuery {
	query := (&JobContractorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, id),
			sqlgraph.To(jobcontractor.Table, jobcontractor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.ContractorTable, jobdetail.ContractorColumn),
		)
		fromV = sqlgraph.Neighbors(jd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuthor queries the author edge of a JobDetail.
func (c *JobDetailClient) QueryAuthor(jd *JobDetail) *JobAuthorQuery {
	query := (&JobAuthorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, id),
			sqlgraph.To(jobauthor.Table, jobauthor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.AuthorTable, jobdetail.AuthorColumn),
		)
		fromV = sqlgraph.Neighbors(jd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProgress queries the progress edge of a JobDetail.
func (c *JobDetailClient) QueryProgress(jd *JobDetail) *JobProgressQuery {
	query := (&JobProgressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, id),
			sqlgraph.To(jobprogress.Table, jobprogress.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.ProgressTable, jobdetail.ProgressColumn),
		)
		fromV = sqlgraph.Neighbors(jd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInspector queries the inspector edge of a JobDetail.
func (c *JobDetailClient) QueryInspector(jd *JobDetail) *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, id),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.InspectorTable, jobdetail.InspectorColumn),
		)
		fromV = sqlgraph.Neighbors(jd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArchitect queries the architect edge of a JobDetail.
func (c *JobDetailClient) QueryArchitect(jd *JobDetail) *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, id),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.ArchitectTable, jobdetail.ArchitectColumn),
		)
		fromV = sqlgraph.Neighbors(jd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatic queries the static edge of a JobDetail.
func (c *JobDetailClient) QueryStatic(jd *JobDetail) *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, id),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.StaticTable, jobdetail.StaticColumn),
		)
		fromV = sqlgraph.Neighbors(jd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMechanic queries the mechanic edge of a JobDetail.
func (c *JobDetailClient) QueryMechanic(jd *JobDetail) *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, id),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.MechanicTable, jobdetail.MechanicColumn),
		)
		fromV = sqlgraph.Neighbors(jd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryElectric queries the electric edge of a JobDetail.
func (c *JobDetailClient) QueryElectric(jd *JobDetail) *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, id),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.ElectricTable, jobdetail.ElectricColumn),
		)
		fromV = sqlgraph.Neighbors(jd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryController queries the controller edge of a JobDetail.
func (c *JobDetailClient) QueryController(jd *JobDetail) *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, id),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.ControllerTable, jobdetail.ControllerColumn),
		)
		fromV = sqlgraph.Neighbors(jd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMechaniccontroller queries the mechaniccontroller edge of a JobDetail.
func (c *JobDetailClient) QueryMechaniccontroller(jd *JobDetail) *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, id),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.MechaniccontrollerTable, jobdetail.MechaniccontrollerColumn),
		)
		fromV = sqlgraph.Neighbors(jd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryElectriccontroller queries the electriccontroller edge of a JobDetail.
func (c *JobDetailClient) QueryElectriccontroller(jd *JobDetail) *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, id),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.ElectriccontrollerTable, jobdetail.ElectriccontrollerColumn),
		)
		fromV = sqlgraph.Neighbors(jd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLayers queries the layers edge of a JobDetail.
func (c *JobDetailClient) QueryLayers(jd *JobDetail) *JobLayerQuery {
	query := (&JobLayerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, id),
			sqlgraph.To(joblayer.Table, joblayer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobdetail.LayersTable, jobdetail.LayersColumn),
		)
		fromV = sqlgraph.Neighbors(jd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPayments queries the payments edge of a JobDetail.
func (c *JobDetailClient) QueryPayments(jd *JobDetail) *JobPaymentsQuery {
	query := (&JobPaymentsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, id),
			sqlgraph.To(jobpayments.Table, jobpayments.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobdetail.PaymentsTable, jobdetail.PaymentsColumn),
		)
		fromV = sqlgraph.Neighbors(jd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompany queries the company edge of a JobDetail.
func (c *JobDetailClient) QueryCompany(jd *JobDetail) *CompanyDetailQuery {
	query := (&CompanyDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, id),
			sqlgraph.To(companydetail.Table, companydetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.CompanyTable, jobdetail.CompanyColumn),
		)
		fromV = sqlgraph.Neighbors(jd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobDetailClient) Hooks() []Hook {
	return c.hooks.JobDetail
}

// Interceptors returns the client interceptors.
func (c *JobDetailClient) Interceptors() []Interceptor {
	return c.inters.JobDetail
}

func (c *JobDetailClient) mutate(ctx context.Context, m *JobDetailMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobDetailCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobDetailDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobDetail mutation op: %q", m.Op())
	}
}

// JobLayerClient is a client for the JobLayer schema.
type JobLayerClient struct {
	config
}

// NewJobLayerClient returns a client for the JobLayer from the given config.
func NewJobLayerClient(c config) *JobLayerClient {
	return &JobLayerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `joblayer.Hooks(f(g(h())))`.
func (c *JobLayerClient) Use(hooks ...Hook) {
	c.hooks.JobLayer = append(c.hooks.JobLayer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `joblayer.Intercept(f(g(h())))`.
func (c *JobLayerClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobLayer = append(c.inters.JobLayer, interceptors...)
}

// Create returns a builder for creating a JobLayer entity.
func (c *JobLayerClient) Create() *JobLayerCreate {
	mutation := newJobLayerMutation(c.config, OpCreate)
	return &JobLayerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobLayer entities.
func (c *JobLayerClient) CreateBulk(builders ...*JobLayerCreate) *JobLayerCreateBulk {
	return &JobLayerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobLayerClient) MapCreateBulk(slice any, setFunc func(*JobLayerCreate, int)) *JobLayerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobLayerCreateBulk{err: fmt.Errorf("calling to JobLayerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobLayerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobLayerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobLayer.
func (c *JobLayerClient) Update() *JobLayerUpdate {
	mutation := newJobLayerMutation(c.config, OpUpdate)
	return &JobLayerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobLayerClient) UpdateOne(jl *JobLayer) *JobLayerUpdateOne {
	mutation := newJobLayerMutation(c.config, OpUpdateOne, withJobLayer(jl))
	return &JobLayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobLayerClient) UpdateOneID(id int) *JobLayerUpdateOne {
	mutation := newJobLayerMutation(c.config, OpUpdateOne, withJobLayerID(id))
	return &JobLayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobLayer.
func (c *JobLayerClient) Delete() *JobLayerDelete {
	mutation := newJobLayerMutation(c.config, OpDelete)
	return &JobLayerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobLayerClient) DeleteOne(jl *JobLayer) *JobLayerDeleteOne {
	return c.DeleteOneID(jl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobLayerClient) DeleteOneID(id int) *JobLayerDeleteOne {
	builder := c.Delete().Where(joblayer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobLayerDeleteOne{builder}
}

// Query returns a query builder for JobLayer.
func (c *JobLayerClient) Query() *JobLayerQuery {
	return &JobLayerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobLayer},
		inters: c.Interceptors(),
	}
}

// Get returns a JobLayer entity by its id.
func (c *JobLayerClient) Get(ctx context.Context, id int) (*JobLayer, error) {
	return c.Query().Where(joblayer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobLayerClient) GetX(ctx context.Context, id int) *JobLayer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLayer queries the layer edge of a JobLayer.
func (c *JobLayerClient) QueryLayer(jl *JobLayer) *JobDetailQuery {
	query := (&JobDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(joblayer.Table, joblayer.FieldID, id),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, joblayer.LayerTable, joblayer.LayerColumn),
		)
		fromV = sqlgraph.Neighbors(jl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobLayerClient) Hooks() []Hook {
	return c.hooks.JobLayer
}

// Interceptors returns the client interceptors.
func (c *JobLayerClient) Interceptors() []Interceptor {
	return c.inters.JobLayer
}

func (c *JobLayerClient) mutate(ctx context.Context, m *JobLayerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobLayerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobLayerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobLayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobLayerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobLayer mutation op: %q", m.Op())
	}
}

// JobOwnerClient is a client for the JobOwner schema.
type JobOwnerClient struct {
	config
}

// NewJobOwnerClient returns a client for the JobOwner from the given config.
func NewJobOwnerClient(c config) *JobOwnerClient {
	return &JobOwnerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobowner.Hooks(f(g(h())))`.
func (c *JobOwnerClient) Use(hooks ...Hook) {
	c.hooks.JobOwner = append(c.hooks.JobOwner, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobowner.Intercept(f(g(h())))`.
func (c *JobOwnerClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobOwner = append(c.inters.JobOwner, interceptors...)
}

// Create returns a builder for creating a JobOwner entity.
func (c *JobOwnerClient) Create() *JobOwnerCreate {
	mutation := newJobOwnerMutation(c.config, OpCreate)
	return &JobOwnerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobOwner entities.
func (c *JobOwnerClient) CreateBulk(builders ...*JobOwnerCreate) *JobOwnerCreateBulk {
	return &JobOwnerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobOwnerClient) MapCreateBulk(slice any, setFunc func(*JobOwnerCreate, int)) *JobOwnerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobOwnerCreateBulk{err: fmt.Errorf("calling to JobOwnerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobOwnerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobOwnerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobOwner.
func (c *JobOwnerClient) Update() *JobOwnerUpdate {
	mutation := newJobOwnerMutation(c.config, OpUpdate)
	return &JobOwnerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobOwnerClient) UpdateOne(jo *JobOwner) *JobOwnerUpdateOne {
	mutation := newJobOwnerMutation(c.config, OpUpdateOne, withJobOwner(jo))
	return &JobOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobOwnerClient) UpdateOneID(id int) *JobOwnerUpdateOne {
	mutation := newJobOwnerMutation(c.config, OpUpdateOne, withJobOwnerID(id))
	return &JobOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobOwner.
func (c *JobOwnerClient) Delete() *JobOwnerDelete {
	mutation := newJobOwnerMutation(c.config, OpDelete)
	return &JobOwnerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobOwnerClient) DeleteOne(jo *JobOwner) *JobOwnerDeleteOne {
	return c.DeleteOneID(jo.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobOwnerClient) DeleteOneID(id int) *JobOwnerDeleteOne {
	builder := c.Delete().Where(jobowner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobOwnerDeleteOne{builder}
}

// Query returns a query builder for JobOwner.
func (c *JobOwnerClient) Query() *JobOwnerQuery {
	return &JobOwnerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobOwner},
		inters: c.Interceptors(),
	}
}

// Get returns a JobOwner entity by its id.
func (c *JobOwnerClient) Get(ctx context.Context, id int) (*JobOwner, error) {
	return c.Query().Where(jobowner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobOwnerClient) GetX(ctx context.Context, id int) *JobOwner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwners queries the owners edge of a JobOwner.
func (c *JobOwnerClient) QueryOwners(jo *JobOwner) *JobDetailQuery {
	query := (&JobDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobowner.Table, jobowner.FieldID, id),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobowner.OwnersTable, jobowner.OwnersColumn),
		)
		fromV = sqlgraph.Neighbors(jo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobOwnerClient) Hooks() []Hook {
	return c.hooks.JobOwner
}

// Interceptors returns the client interceptors.
func (c *JobOwnerClient) Interceptors() []Interceptor {
	return c.inters.JobOwner
}

func (c *JobOwnerClient) mutate(ctx context.Context, m *JobOwnerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobOwnerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobOwnerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobOwnerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobOwner mutation op: %q", m.Op())
	}
}

// JobPaymentsClient is a client for the JobPayments schema.
type JobPaymentsClient struct {
	config
}

// NewJobPaymentsClient returns a client for the JobPayments from the given config.
func NewJobPaymentsClient(c config) *JobPaymentsClient {
	return &JobPaymentsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobpayments.Hooks(f(g(h())))`.
func (c *JobPaymentsClient) Use(hooks ...Hook) {
	c.hooks.JobPayments = append(c.hooks.JobPayments, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobpayments.Intercept(f(g(h())))`.
func (c *JobPaymentsClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobPayments = append(c.inters.JobPayments, interceptors...)
}

// Create returns a builder for creating a JobPayments entity.
func (c *JobPaymentsClient) Create() *JobPaymentsCreate {
	mutation := newJobPaymentsMutation(c.config, OpCreate)
	return &JobPaymentsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobPayments entities.
func (c *JobPaymentsClient) CreateBulk(builders ...*JobPaymentsCreate) *JobPaymentsCreateBulk {
	return &JobPaymentsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobPaymentsClient) MapCreateBulk(slice any, setFunc func(*JobPaymentsCreate, int)) *JobPaymentsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobPaymentsCreateBulk{err: fmt.Errorf("calling to JobPaymentsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobPaymentsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobPaymentsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobPayments.
func (c *JobPaymentsClient) Update() *JobPaymentsUpdate {
	mutation := newJobPaymentsMutation(c.config, OpUpdate)
	return &JobPaymentsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobPaymentsClient) UpdateOne(jp *JobPayments) *JobPaymentsUpdateOne {
	mutation := newJobPaymentsMutation(c.config, OpUpdateOne, withJobPayments(jp))
	return &JobPaymentsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobPaymentsClient) UpdateOneID(id int) *JobPaymentsUpdateOne {
	mutation := newJobPaymentsMutation(c.config, OpUpdateOne, withJobPaymentsID(id))
	return &JobPaymentsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobPayments.
func (c *JobPaymentsClient) Delete() *JobPaymentsDelete {
	mutation := newJobPaymentsMutation(c.config, OpDelete)
	return &JobPaymentsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobPaymentsClient) DeleteOne(jp *JobPayments) *JobPaymentsDeleteOne {
	return c.DeleteOneID(jp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobPaymentsClient) DeleteOneID(id int) *JobPaymentsDeleteOne {
	builder := c.Delete().Where(jobpayments.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobPaymentsDeleteOne{builder}
}

// Query returns a query builder for JobPayments.
func (c *JobPaymentsClient) Query() *JobPaymentsQuery {
	return &JobPaymentsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobPayments},
		inters: c.Interceptors(),
	}
}

// Get returns a JobPayments entity by its id.
func (c *JobPaymentsClient) Get(ctx context.Context, id int) (*JobPayments, error) {
	return c.Query().Where(jobpayments.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobPaymentsClient) GetX(ctx context.Context, id int) *JobPayments {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPayments queries the payments edge of a JobPayments.
func (c *JobPaymentsClient) QueryPayments(jp *JobPayments) *JobDetailQuery {
	query := (&JobDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobpayments.Table, jobpayments.FieldID, id),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobpayments.PaymentsTable, jobpayments.PaymentsColumn),
		)
		fromV = sqlgraph.Neighbors(jp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobPaymentsClient) Hooks() []Hook {
	return c.hooks.JobPayments
}

// Interceptors returns the client interceptors.
func (c *JobPaymentsClient) Interceptors() []Interceptor {
	return c.inters.JobPayments
}

func (c *JobPaymentsClient) mutate(ctx context.Context, m *JobPaymentsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobPaymentsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobPaymentsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobPaymentsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobPaymentsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobPayments mutation op: %q", m.Op())
	}
}

// JobProgressClient is a client for the JobProgress schema.
type JobProgressClient struct {
	config
}

// NewJobProgressClient returns a client for the JobProgress from the given config.
func NewJobProgressClient(c config) *JobProgressClient {
	return &JobProgressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobprogress.Hooks(f(g(h())))`.
func (c *JobProgressClient) Use(hooks ...Hook) {
	c.hooks.JobProgress = append(c.hooks.JobProgress, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobprogress.Intercept(f(g(h())))`.
func (c *JobProgressClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobProgress = append(c.inters.JobProgress, interceptors...)
}

// Create returns a builder for creating a JobProgress entity.
func (c *JobProgressClient) Create() *JobProgressCreate {
	mutation := newJobProgressMutation(c.config, OpCreate)
	return &JobProgressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobProgress entities.
func (c *JobProgressClient) CreateBulk(builders ...*JobProgressCreate) *JobProgressCreateBulk {
	return &JobProgressCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobProgressClient) MapCreateBulk(slice any, setFunc func(*JobProgressCreate, int)) *JobProgressCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobProgressCreateBulk{err: fmt.Errorf("calling to JobProgressClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobProgressCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobProgressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobProgress.
func (c *JobProgressClient) Update() *JobProgressUpdate {
	mutation := newJobProgressMutation(c.config, OpUpdate)
	return &JobProgressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobProgressClient) UpdateOne(jp *JobProgress) *JobProgressUpdateOne {
	mutation := newJobProgressMutation(c.config, OpUpdateOne, withJobProgress(jp))
	return &JobProgressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobProgressClient) UpdateOneID(id int) *JobProgressUpdateOne {
	mutation := newJobProgressMutation(c.config, OpUpdateOne, withJobProgressID(id))
	return &JobProgressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobProgress.
func (c *JobProgressClient) Delete() *JobProgressDelete {
	mutation := newJobProgressMutation(c.config, OpDelete)
	return &JobProgressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobProgressClient) DeleteOne(jp *JobProgress) *JobProgressDeleteOne {
	return c.DeleteOneID(jp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobProgressClient) DeleteOneID(id int) *JobProgressDeleteOne {
	builder := c.Delete().Where(jobprogress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobProgressDeleteOne{builder}
}

// Query returns a query builder for JobProgress.
func (c *JobProgressClient) Query() *JobProgressQuery {
	return &JobProgressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobProgress},
		inters: c.Interceptors(),
	}
}

// Get returns a JobProgress entity by its id.
func (c *JobProgressClient) Get(ctx context.Context, id int) (*JobProgress, error) {
	return c.Query().Where(jobprogress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobProgressClient) GetX(ctx context.Context, id int) *JobProgress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProgress queries the progress edge of a JobProgress.
func (c *JobProgressClient) QueryProgress(jp *JobProgress) *JobDetailQuery {
	query := (&JobDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobprogress.Table, jobprogress.FieldID, id),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobprogress.ProgressTable, jobprogress.ProgressColumn),
		)
		fromV = sqlgraph.Neighbors(jp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobProgressClient) Hooks() []Hook {
	return c.hooks.JobProgress
}

// Interceptors returns the client interceptors.
func (c *JobProgressClient) Interceptors() []Interceptor {
	return c.inters.JobProgress
}

func (c *JobProgressClient) mutate(ctx context.Context, m *JobProgressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobProgressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobProgressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobProgressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobProgressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobProgress mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCompanies queries the companies edge of a User.
func (c *UserClient) QueryCompanies(u *User) *CompanyUserQuery {
	query := (&CompanyUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(companyuser.Table, companyuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CompaniesTable, user.CompaniesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		CompanyDetail, CompanyEngineer, CompanyUser, JobAuthor, JobContractor,
		JobDetail, JobLayer, JobOwner, JobPayments, JobProgress, User []ent.Hook
	}
	inters struct {
		CompanyDetail, CompanyEngineer, CompanyUser, JobAuthor, JobContractor,
		JobDetail, JobLayer, JobOwner, JobPayments, JobProgress, User []ent.Interceptor
	}
)
