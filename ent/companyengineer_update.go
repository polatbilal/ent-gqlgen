// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/polatbilal/gqlgen-ent/ent/companydetail"
	"github.com/polatbilal/gqlgen-ent/ent/companyengineer"
	"github.com/polatbilal/gqlgen-ent/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/ent/predicate"
)

// CompanyEngineerUpdate is the builder for updating CompanyEngineer entities.
type CompanyEngineerUpdate struct {
	config
	hooks    []Hook
	mutation *CompanyEngineerMutation
}

// Where appends a list predicates to the CompanyEngineerUpdate builder.
func (ceu *CompanyEngineerUpdate) Where(ps ...predicate.CompanyEngineer) *CompanyEngineerUpdate {
	ceu.mutation.Where(ps...)
	return ceu
}

// SetName sets the "Name" field.
func (ceu *CompanyEngineerUpdate) SetName(s string) *CompanyEngineerUpdate {
	ceu.mutation.SetName(s)
	return ceu
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (ceu *CompanyEngineerUpdate) SetNillableName(s *string) *CompanyEngineerUpdate {
	if s != nil {
		ceu.SetName(*s)
	}
	return ceu
}

// SetTcNo sets the "TcNo" field.
func (ceu *CompanyEngineerUpdate) SetTcNo(i int) *CompanyEngineerUpdate {
	ceu.mutation.ResetTcNo()
	ceu.mutation.SetTcNo(i)
	return ceu
}

// SetNillableTcNo sets the "TcNo" field if the given value is not nil.
func (ceu *CompanyEngineerUpdate) SetNillableTcNo(i *int) *CompanyEngineerUpdate {
	if i != nil {
		ceu.SetTcNo(*i)
	}
	return ceu
}

// AddTcNo adds i to the "TcNo" field.
func (ceu *CompanyEngineerUpdate) AddTcNo(i int) *CompanyEngineerUpdate {
	ceu.mutation.AddTcNo(i)
	return ceu
}

// ClearTcNo clears the value of the "TcNo" field.
func (ceu *CompanyEngineerUpdate) ClearTcNo() *CompanyEngineerUpdate {
	ceu.mutation.ClearTcNo()
	return ceu
}

// SetPhone sets the "Phone" field.
func (ceu *CompanyEngineerUpdate) SetPhone(s string) *CompanyEngineerUpdate {
	ceu.mutation.SetPhone(s)
	return ceu
}

// SetNillablePhone sets the "Phone" field if the given value is not nil.
func (ceu *CompanyEngineerUpdate) SetNillablePhone(s *string) *CompanyEngineerUpdate {
	if s != nil {
		ceu.SetPhone(*s)
	}
	return ceu
}

// ClearPhone clears the value of the "Phone" field.
func (ceu *CompanyEngineerUpdate) ClearPhone() *CompanyEngineerUpdate {
	ceu.mutation.ClearPhone()
	return ceu
}

// SetEmail sets the "Email" field.
func (ceu *CompanyEngineerUpdate) SetEmail(s string) *CompanyEngineerUpdate {
	ceu.mutation.SetEmail(s)
	return ceu
}

// SetNillableEmail sets the "Email" field if the given value is not nil.
func (ceu *CompanyEngineerUpdate) SetNillableEmail(s *string) *CompanyEngineerUpdate {
	if s != nil {
		ceu.SetEmail(*s)
	}
	return ceu
}

// ClearEmail clears the value of the "Email" field.
func (ceu *CompanyEngineerUpdate) ClearEmail() *CompanyEngineerUpdate {
	ceu.mutation.ClearEmail()
	return ceu
}

// SetAddress sets the "Address" field.
func (ceu *CompanyEngineerUpdate) SetAddress(s string) *CompanyEngineerUpdate {
	ceu.mutation.SetAddress(s)
	return ceu
}

// SetNillableAddress sets the "Address" field if the given value is not nil.
func (ceu *CompanyEngineerUpdate) SetNillableAddress(s *string) *CompanyEngineerUpdate {
	if s != nil {
		ceu.SetAddress(*s)
	}
	return ceu
}

// ClearAddress clears the value of the "Address" field.
func (ceu *CompanyEngineerUpdate) ClearAddress() *CompanyEngineerUpdate {
	ceu.mutation.ClearAddress()
	return ceu
}

// SetCareer sets the "Career" field.
func (ceu *CompanyEngineerUpdate) SetCareer(s string) *CompanyEngineerUpdate {
	ceu.mutation.SetCareer(s)
	return ceu
}

// SetNillableCareer sets the "Career" field if the given value is not nil.
func (ceu *CompanyEngineerUpdate) SetNillableCareer(s *string) *CompanyEngineerUpdate {
	if s != nil {
		ceu.SetCareer(*s)
	}
	return ceu
}

// ClearCareer clears the value of the "Career" field.
func (ceu *CompanyEngineerUpdate) ClearCareer() *CompanyEngineerUpdate {
	ceu.mutation.ClearCareer()
	return ceu
}

// SetPosition sets the "Position" field.
func (ceu *CompanyEngineerUpdate) SetPosition(s string) *CompanyEngineerUpdate {
	ceu.mutation.SetPosition(s)
	return ceu
}

// SetNillablePosition sets the "Position" field if the given value is not nil.
func (ceu *CompanyEngineerUpdate) SetNillablePosition(s *string) *CompanyEngineerUpdate {
	if s != nil {
		ceu.SetPosition(*s)
	}
	return ceu
}

// ClearPosition clears the value of the "Position" field.
func (ceu *CompanyEngineerUpdate) ClearPosition() *CompanyEngineerUpdate {
	ceu.mutation.ClearPosition()
	return ceu
}

// SetRegisterNo sets the "RegisterNo" field.
func (ceu *CompanyEngineerUpdate) SetRegisterNo(i int) *CompanyEngineerUpdate {
	ceu.mutation.ResetRegisterNo()
	ceu.mutation.SetRegisterNo(i)
	return ceu
}

// SetNillableRegisterNo sets the "RegisterNo" field if the given value is not nil.
func (ceu *CompanyEngineerUpdate) SetNillableRegisterNo(i *int) *CompanyEngineerUpdate {
	if i != nil {
		ceu.SetRegisterNo(*i)
	}
	return ceu
}

// AddRegisterNo adds i to the "RegisterNo" field.
func (ceu *CompanyEngineerUpdate) AddRegisterNo(i int) *CompanyEngineerUpdate {
	ceu.mutation.AddRegisterNo(i)
	return ceu
}

// ClearRegisterNo clears the value of the "RegisterNo" field.
func (ceu *CompanyEngineerUpdate) ClearRegisterNo() *CompanyEngineerUpdate {
	ceu.mutation.ClearRegisterNo()
	return ceu
}

// SetCertNo sets the "CertNo" field.
func (ceu *CompanyEngineerUpdate) SetCertNo(i int) *CompanyEngineerUpdate {
	ceu.mutation.ResetCertNo()
	ceu.mutation.SetCertNo(i)
	return ceu
}

// SetNillableCertNo sets the "CertNo" field if the given value is not nil.
func (ceu *CompanyEngineerUpdate) SetNillableCertNo(i *int) *CompanyEngineerUpdate {
	if i != nil {
		ceu.SetCertNo(*i)
	}
	return ceu
}

// AddCertNo adds i to the "CertNo" field.
func (ceu *CompanyEngineerUpdate) AddCertNo(i int) *CompanyEngineerUpdate {
	ceu.mutation.AddCertNo(i)
	return ceu
}

// ClearCertNo clears the value of the "CertNo" field.
func (ceu *CompanyEngineerUpdate) ClearCertNo() *CompanyEngineerUpdate {
	ceu.mutation.ClearCertNo()
	return ceu
}

// SetYDSID sets the "YDSID" field.
func (ceu *CompanyEngineerUpdate) SetYDSID(i int) *CompanyEngineerUpdate {
	ceu.mutation.ResetYDSID()
	ceu.mutation.SetYDSID(i)
	return ceu
}

// SetNillableYDSID sets the "YDSID" field if the given value is not nil.
func (ceu *CompanyEngineerUpdate) SetNillableYDSID(i *int) *CompanyEngineerUpdate {
	if i != nil {
		ceu.SetYDSID(*i)
	}
	return ceu
}

// AddYDSID adds i to the "YDSID" field.
func (ceu *CompanyEngineerUpdate) AddYDSID(i int) *CompanyEngineerUpdate {
	ceu.mutation.AddYDSID(i)
	return ceu
}

// ClearYDSID clears the value of the "YDSID" field.
func (ceu *CompanyEngineerUpdate) ClearYDSID() *CompanyEngineerUpdate {
	ceu.mutation.ClearYDSID()
	return ceu
}

// SetEmployment sets the "Employment" field.
func (ceu *CompanyEngineerUpdate) SetEmployment(t time.Time) *CompanyEngineerUpdate {
	ceu.mutation.SetEmployment(t)
	return ceu
}

// SetNillableEmployment sets the "Employment" field if the given value is not nil.
func (ceu *CompanyEngineerUpdate) SetNillableEmployment(t *time.Time) *CompanyEngineerUpdate {
	if t != nil {
		ceu.SetEmployment(*t)
	}
	return ceu
}

// ClearEmployment clears the value of the "Employment" field.
func (ceu *CompanyEngineerUpdate) ClearEmployment() *CompanyEngineerUpdate {
	ceu.mutation.ClearEmployment()
	return ceu
}

// SetStatus sets the "Status" field.
func (ceu *CompanyEngineerUpdate) SetStatus(i int) *CompanyEngineerUpdate {
	ceu.mutation.ResetStatus()
	ceu.mutation.SetStatus(i)
	return ceu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (ceu *CompanyEngineerUpdate) SetNillableStatus(i *int) *CompanyEngineerUpdate {
	if i != nil {
		ceu.SetStatus(*i)
	}
	return ceu
}

// AddStatus adds i to the "Status" field.
func (ceu *CompanyEngineerUpdate) AddStatus(i int) *CompanyEngineerUpdate {
	ceu.mutation.AddStatus(i)
	return ceu
}

// SetNote sets the "Note" field.
func (ceu *CompanyEngineerUpdate) SetNote(s string) *CompanyEngineerUpdate {
	ceu.mutation.SetNote(s)
	return ceu
}

// SetNillableNote sets the "Note" field if the given value is not nil.
func (ceu *CompanyEngineerUpdate) SetNillableNote(s *string) *CompanyEngineerUpdate {
	if s != nil {
		ceu.SetNote(*s)
	}
	return ceu
}

// ClearNote clears the value of the "Note" field.
func (ceu *CompanyEngineerUpdate) ClearNote() *CompanyEngineerUpdate {
	ceu.mutation.ClearNote()
	return ceu
}

// SetCreatedAt sets the "CreatedAt" field.
func (ceu *CompanyEngineerUpdate) SetCreatedAt(t time.Time) *CompanyEngineerUpdate {
	ceu.mutation.SetCreatedAt(t)
	return ceu
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (ceu *CompanyEngineerUpdate) SetNillableCreatedAt(t *time.Time) *CompanyEngineerUpdate {
	if t != nil {
		ceu.SetCreatedAt(*t)
	}
	return ceu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (ceu *CompanyEngineerUpdate) SetUpdatedAt(t time.Time) *CompanyEngineerUpdate {
	ceu.mutation.SetUpdatedAt(t)
	return ceu
}

// SetCompanyID sets the "company" edge to the CompanyDetail entity by ID.
func (ceu *CompanyEngineerUpdate) SetCompanyID(id int) *CompanyEngineerUpdate {
	ceu.mutation.SetCompanyID(id)
	return ceu
}

// SetNillableCompanyID sets the "company" edge to the CompanyDetail entity by ID if the given value is not nil.
func (ceu *CompanyEngineerUpdate) SetNillableCompanyID(id *int) *CompanyEngineerUpdate {
	if id != nil {
		ceu = ceu.SetCompanyID(*id)
	}
	return ceu
}

// SetCompany sets the "company" edge to the CompanyDetail entity.
func (ceu *CompanyEngineerUpdate) SetCompany(c *CompanyDetail) *CompanyEngineerUpdate {
	return ceu.SetCompanyID(c.ID)
}

// AddInspectorIDs adds the "inspectors" edge to the JobDetail entity by IDs.
func (ceu *CompanyEngineerUpdate) AddInspectorIDs(ids ...int) *CompanyEngineerUpdate {
	ceu.mutation.AddInspectorIDs(ids...)
	return ceu
}

// AddInspectors adds the "inspectors" edges to the JobDetail entity.
func (ceu *CompanyEngineerUpdate) AddInspectors(j ...*JobDetail) *CompanyEngineerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceu.AddInspectorIDs(ids...)
}

// AddArchitectIDs adds the "architects" edge to the JobDetail entity by IDs.
func (ceu *CompanyEngineerUpdate) AddArchitectIDs(ids ...int) *CompanyEngineerUpdate {
	ceu.mutation.AddArchitectIDs(ids...)
	return ceu
}

// AddArchitects adds the "architects" edges to the JobDetail entity.
func (ceu *CompanyEngineerUpdate) AddArchitects(j ...*JobDetail) *CompanyEngineerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceu.AddArchitectIDs(ids...)
}

// AddStaticIDs adds the "statics" edge to the JobDetail entity by IDs.
func (ceu *CompanyEngineerUpdate) AddStaticIDs(ids ...int) *CompanyEngineerUpdate {
	ceu.mutation.AddStaticIDs(ids...)
	return ceu
}

// AddStatics adds the "statics" edges to the JobDetail entity.
func (ceu *CompanyEngineerUpdate) AddStatics(j ...*JobDetail) *CompanyEngineerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceu.AddStaticIDs(ids...)
}

// AddMechanicIDs adds the "mechanics" edge to the JobDetail entity by IDs.
func (ceu *CompanyEngineerUpdate) AddMechanicIDs(ids ...int) *CompanyEngineerUpdate {
	ceu.mutation.AddMechanicIDs(ids...)
	return ceu
}

// AddMechanics adds the "mechanics" edges to the JobDetail entity.
func (ceu *CompanyEngineerUpdate) AddMechanics(j ...*JobDetail) *CompanyEngineerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceu.AddMechanicIDs(ids...)
}

// AddElectricIDs adds the "electrics" edge to the JobDetail entity by IDs.
func (ceu *CompanyEngineerUpdate) AddElectricIDs(ids ...int) *CompanyEngineerUpdate {
	ceu.mutation.AddElectricIDs(ids...)
	return ceu
}

// AddElectrics adds the "electrics" edges to the JobDetail entity.
func (ceu *CompanyEngineerUpdate) AddElectrics(j ...*JobDetail) *CompanyEngineerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceu.AddElectricIDs(ids...)
}

// AddControllerIDs adds the "controllers" edge to the JobDetail entity by IDs.
func (ceu *CompanyEngineerUpdate) AddControllerIDs(ids ...int) *CompanyEngineerUpdate {
	ceu.mutation.AddControllerIDs(ids...)
	return ceu
}

// AddControllers adds the "controllers" edges to the JobDetail entity.
func (ceu *CompanyEngineerUpdate) AddControllers(j ...*JobDetail) *CompanyEngineerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceu.AddControllerIDs(ids...)
}

// AddMechaniccontrollerIDs adds the "mechaniccontrollers" edge to the JobDetail entity by IDs.
func (ceu *CompanyEngineerUpdate) AddMechaniccontrollerIDs(ids ...int) *CompanyEngineerUpdate {
	ceu.mutation.AddMechaniccontrollerIDs(ids...)
	return ceu
}

// AddMechaniccontrollers adds the "mechaniccontrollers" edges to the JobDetail entity.
func (ceu *CompanyEngineerUpdate) AddMechaniccontrollers(j ...*JobDetail) *CompanyEngineerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceu.AddMechaniccontrollerIDs(ids...)
}

// AddElectriccontrollerIDs adds the "electriccontrollers" edge to the JobDetail entity by IDs.
func (ceu *CompanyEngineerUpdate) AddElectriccontrollerIDs(ids ...int) *CompanyEngineerUpdate {
	ceu.mutation.AddElectriccontrollerIDs(ids...)
	return ceu
}

// AddElectriccontrollers adds the "electriccontrollers" edges to the JobDetail entity.
func (ceu *CompanyEngineerUpdate) AddElectriccontrollers(j ...*JobDetail) *CompanyEngineerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceu.AddElectriccontrollerIDs(ids...)
}

// Mutation returns the CompanyEngineerMutation object of the builder.
func (ceu *CompanyEngineerUpdate) Mutation() *CompanyEngineerMutation {
	return ceu.mutation
}

// ClearCompany clears the "company" edge to the CompanyDetail entity.
func (ceu *CompanyEngineerUpdate) ClearCompany() *CompanyEngineerUpdate {
	ceu.mutation.ClearCompany()
	return ceu
}

// ClearInspectors clears all "inspectors" edges to the JobDetail entity.
func (ceu *CompanyEngineerUpdate) ClearInspectors() *CompanyEngineerUpdate {
	ceu.mutation.ClearInspectors()
	return ceu
}

// RemoveInspectorIDs removes the "inspectors" edge to JobDetail entities by IDs.
func (ceu *CompanyEngineerUpdate) RemoveInspectorIDs(ids ...int) *CompanyEngineerUpdate {
	ceu.mutation.RemoveInspectorIDs(ids...)
	return ceu
}

// RemoveInspectors removes "inspectors" edges to JobDetail entities.
func (ceu *CompanyEngineerUpdate) RemoveInspectors(j ...*JobDetail) *CompanyEngineerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceu.RemoveInspectorIDs(ids...)
}

// ClearArchitects clears all "architects" edges to the JobDetail entity.
func (ceu *CompanyEngineerUpdate) ClearArchitects() *CompanyEngineerUpdate {
	ceu.mutation.ClearArchitects()
	return ceu
}

// RemoveArchitectIDs removes the "architects" edge to JobDetail entities by IDs.
func (ceu *CompanyEngineerUpdate) RemoveArchitectIDs(ids ...int) *CompanyEngineerUpdate {
	ceu.mutation.RemoveArchitectIDs(ids...)
	return ceu
}

// RemoveArchitects removes "architects" edges to JobDetail entities.
func (ceu *CompanyEngineerUpdate) RemoveArchitects(j ...*JobDetail) *CompanyEngineerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceu.RemoveArchitectIDs(ids...)
}

// ClearStatics clears all "statics" edges to the JobDetail entity.
func (ceu *CompanyEngineerUpdate) ClearStatics() *CompanyEngineerUpdate {
	ceu.mutation.ClearStatics()
	return ceu
}

// RemoveStaticIDs removes the "statics" edge to JobDetail entities by IDs.
func (ceu *CompanyEngineerUpdate) RemoveStaticIDs(ids ...int) *CompanyEngineerUpdate {
	ceu.mutation.RemoveStaticIDs(ids...)
	return ceu
}

// RemoveStatics removes "statics" edges to JobDetail entities.
func (ceu *CompanyEngineerUpdate) RemoveStatics(j ...*JobDetail) *CompanyEngineerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceu.RemoveStaticIDs(ids...)
}

// ClearMechanics clears all "mechanics" edges to the JobDetail entity.
func (ceu *CompanyEngineerUpdate) ClearMechanics() *CompanyEngineerUpdate {
	ceu.mutation.ClearMechanics()
	return ceu
}

// RemoveMechanicIDs removes the "mechanics" edge to JobDetail entities by IDs.
func (ceu *CompanyEngineerUpdate) RemoveMechanicIDs(ids ...int) *CompanyEngineerUpdate {
	ceu.mutation.RemoveMechanicIDs(ids...)
	return ceu
}

// RemoveMechanics removes "mechanics" edges to JobDetail entities.
func (ceu *CompanyEngineerUpdate) RemoveMechanics(j ...*JobDetail) *CompanyEngineerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceu.RemoveMechanicIDs(ids...)
}

// ClearElectrics clears all "electrics" edges to the JobDetail entity.
func (ceu *CompanyEngineerUpdate) ClearElectrics() *CompanyEngineerUpdate {
	ceu.mutation.ClearElectrics()
	return ceu
}

// RemoveElectricIDs removes the "electrics" edge to JobDetail entities by IDs.
func (ceu *CompanyEngineerUpdate) RemoveElectricIDs(ids ...int) *CompanyEngineerUpdate {
	ceu.mutation.RemoveElectricIDs(ids...)
	return ceu
}

// RemoveElectrics removes "electrics" edges to JobDetail entities.
func (ceu *CompanyEngineerUpdate) RemoveElectrics(j ...*JobDetail) *CompanyEngineerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceu.RemoveElectricIDs(ids...)
}

// ClearControllers clears all "controllers" edges to the JobDetail entity.
func (ceu *CompanyEngineerUpdate) ClearControllers() *CompanyEngineerUpdate {
	ceu.mutation.ClearControllers()
	return ceu
}

// RemoveControllerIDs removes the "controllers" edge to JobDetail entities by IDs.
func (ceu *CompanyEngineerUpdate) RemoveControllerIDs(ids ...int) *CompanyEngineerUpdate {
	ceu.mutation.RemoveControllerIDs(ids...)
	return ceu
}

// RemoveControllers removes "controllers" edges to JobDetail entities.
func (ceu *CompanyEngineerUpdate) RemoveControllers(j ...*JobDetail) *CompanyEngineerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceu.RemoveControllerIDs(ids...)
}

// ClearMechaniccontrollers clears all "mechaniccontrollers" edges to the JobDetail entity.
func (ceu *CompanyEngineerUpdate) ClearMechaniccontrollers() *CompanyEngineerUpdate {
	ceu.mutation.ClearMechaniccontrollers()
	return ceu
}

// RemoveMechaniccontrollerIDs removes the "mechaniccontrollers" edge to JobDetail entities by IDs.
func (ceu *CompanyEngineerUpdate) RemoveMechaniccontrollerIDs(ids ...int) *CompanyEngineerUpdate {
	ceu.mutation.RemoveMechaniccontrollerIDs(ids...)
	return ceu
}

// RemoveMechaniccontrollers removes "mechaniccontrollers" edges to JobDetail entities.
func (ceu *CompanyEngineerUpdate) RemoveMechaniccontrollers(j ...*JobDetail) *CompanyEngineerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceu.RemoveMechaniccontrollerIDs(ids...)
}

// ClearElectriccontrollers clears all "electriccontrollers" edges to the JobDetail entity.
func (ceu *CompanyEngineerUpdate) ClearElectriccontrollers() *CompanyEngineerUpdate {
	ceu.mutation.ClearElectriccontrollers()
	return ceu
}

// RemoveElectriccontrollerIDs removes the "electriccontrollers" edge to JobDetail entities by IDs.
func (ceu *CompanyEngineerUpdate) RemoveElectriccontrollerIDs(ids ...int) *CompanyEngineerUpdate {
	ceu.mutation.RemoveElectriccontrollerIDs(ids...)
	return ceu
}

// RemoveElectriccontrollers removes "electriccontrollers" edges to JobDetail entities.
func (ceu *CompanyEngineerUpdate) RemoveElectriccontrollers(j ...*JobDetail) *CompanyEngineerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceu.RemoveElectriccontrollerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ceu *CompanyEngineerUpdate) Save(ctx context.Context) (int, error) {
	ceu.defaults()
	return withHooks(ctx, ceu.sqlSave, ceu.mutation, ceu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ceu *CompanyEngineerUpdate) SaveX(ctx context.Context) int {
	affected, err := ceu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ceu *CompanyEngineerUpdate) Exec(ctx context.Context) error {
	_, err := ceu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceu *CompanyEngineerUpdate) ExecX(ctx context.Context) {
	if err := ceu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ceu *CompanyEngineerUpdate) defaults() {
	if _, ok := ceu.mutation.UpdatedAt(); !ok {
		v := companyengineer.UpdateDefaultUpdatedAt()
		ceu.mutation.SetUpdatedAt(v)
	}
}

func (ceu *CompanyEngineerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(companyengineer.Table, companyengineer.Columns, sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt))
	if ps := ceu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceu.mutation.Name(); ok {
		_spec.SetField(companyengineer.FieldName, field.TypeString, value)
	}
	if value, ok := ceu.mutation.TcNo(); ok {
		_spec.SetField(companyengineer.FieldTcNo, field.TypeInt, value)
	}
	if value, ok := ceu.mutation.AddedTcNo(); ok {
		_spec.AddField(companyengineer.FieldTcNo, field.TypeInt, value)
	}
	if ceu.mutation.TcNoCleared() {
		_spec.ClearField(companyengineer.FieldTcNo, field.TypeInt)
	}
	if value, ok := ceu.mutation.Phone(); ok {
		_spec.SetField(companyengineer.FieldPhone, field.TypeString, value)
	}
	if ceu.mutation.PhoneCleared() {
		_spec.ClearField(companyengineer.FieldPhone, field.TypeString)
	}
	if value, ok := ceu.mutation.Email(); ok {
		_spec.SetField(companyengineer.FieldEmail, field.TypeString, value)
	}
	if ceu.mutation.EmailCleared() {
		_spec.ClearField(companyengineer.FieldEmail, field.TypeString)
	}
	if value, ok := ceu.mutation.Address(); ok {
		_spec.SetField(companyengineer.FieldAddress, field.TypeString, value)
	}
	if ceu.mutation.AddressCleared() {
		_spec.ClearField(companyengineer.FieldAddress, field.TypeString)
	}
	if value, ok := ceu.mutation.Career(); ok {
		_spec.SetField(companyengineer.FieldCareer, field.TypeString, value)
	}
	if ceu.mutation.CareerCleared() {
		_spec.ClearField(companyengineer.FieldCareer, field.TypeString)
	}
	if value, ok := ceu.mutation.Position(); ok {
		_spec.SetField(companyengineer.FieldPosition, field.TypeString, value)
	}
	if ceu.mutation.PositionCleared() {
		_spec.ClearField(companyengineer.FieldPosition, field.TypeString)
	}
	if value, ok := ceu.mutation.RegisterNo(); ok {
		_spec.SetField(companyengineer.FieldRegisterNo, field.TypeInt, value)
	}
	if value, ok := ceu.mutation.AddedRegisterNo(); ok {
		_spec.AddField(companyengineer.FieldRegisterNo, field.TypeInt, value)
	}
	if ceu.mutation.RegisterNoCleared() {
		_spec.ClearField(companyengineer.FieldRegisterNo, field.TypeInt)
	}
	if value, ok := ceu.mutation.CertNo(); ok {
		_spec.SetField(companyengineer.FieldCertNo, field.TypeInt, value)
	}
	if value, ok := ceu.mutation.AddedCertNo(); ok {
		_spec.AddField(companyengineer.FieldCertNo, field.TypeInt, value)
	}
	if ceu.mutation.CertNoCleared() {
		_spec.ClearField(companyengineer.FieldCertNo, field.TypeInt)
	}
	if value, ok := ceu.mutation.YDSID(); ok {
		_spec.SetField(companyengineer.FieldYDSID, field.TypeInt, value)
	}
	if value, ok := ceu.mutation.AddedYDSID(); ok {
		_spec.AddField(companyengineer.FieldYDSID, field.TypeInt, value)
	}
	if ceu.mutation.YDSIDCleared() {
		_spec.ClearField(companyengineer.FieldYDSID, field.TypeInt)
	}
	if value, ok := ceu.mutation.Employment(); ok {
		_spec.SetField(companyengineer.FieldEmployment, field.TypeTime, value)
	}
	if ceu.mutation.EmploymentCleared() {
		_spec.ClearField(companyengineer.FieldEmployment, field.TypeTime)
	}
	if value, ok := ceu.mutation.Status(); ok {
		_spec.SetField(companyengineer.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ceu.mutation.AddedStatus(); ok {
		_spec.AddField(companyengineer.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ceu.mutation.Note(); ok {
		_spec.SetField(companyengineer.FieldNote, field.TypeString, value)
	}
	if ceu.mutation.NoteCleared() {
		_spec.ClearField(companyengineer.FieldNote, field.TypeString)
	}
	if value, ok := ceu.mutation.CreatedAt(); ok {
		_spec.SetField(companyengineer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ceu.mutation.UpdatedAt(); ok {
		_spec.SetField(companyengineer.FieldUpdatedAt, field.TypeTime, value)
	}
	if ceu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companyengineer.CompanyTable,
			Columns: []string{companyengineer.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companyengineer.CompanyTable,
			Columns: []string{companyengineer.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceu.mutation.InspectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.InspectorsTable,
			Columns: []string{companyengineer.InspectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.RemovedInspectorsIDs(); len(nodes) > 0 && !ceu.mutation.InspectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.InspectorsTable,
			Columns: []string{companyengineer.InspectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.InspectorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.InspectorsTable,
			Columns: []string{companyengineer.InspectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceu.mutation.ArchitectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ArchitectsTable,
			Columns: []string{companyengineer.ArchitectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.RemovedArchitectsIDs(); len(nodes) > 0 && !ceu.mutation.ArchitectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ArchitectsTable,
			Columns: []string{companyengineer.ArchitectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.ArchitectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ArchitectsTable,
			Columns: []string{companyengineer.ArchitectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceu.mutation.StaticsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.StaticsTable,
			Columns: []string{companyengineer.StaticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.RemovedStaticsIDs(); len(nodes) > 0 && !ceu.mutation.StaticsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.StaticsTable,
			Columns: []string{companyengineer.StaticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.StaticsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.StaticsTable,
			Columns: []string{companyengineer.StaticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceu.mutation.MechanicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.MechanicsTable,
			Columns: []string{companyengineer.MechanicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.RemovedMechanicsIDs(); len(nodes) > 0 && !ceu.mutation.MechanicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.MechanicsTable,
			Columns: []string{companyengineer.MechanicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.MechanicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.MechanicsTable,
			Columns: []string{companyengineer.MechanicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceu.mutation.ElectricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ElectricsTable,
			Columns: []string{companyengineer.ElectricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.RemovedElectricsIDs(); len(nodes) > 0 && !ceu.mutation.ElectricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ElectricsTable,
			Columns: []string{companyengineer.ElectricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.ElectricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ElectricsTable,
			Columns: []string{companyengineer.ElectricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceu.mutation.ControllersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ControllersTable,
			Columns: []string{companyengineer.ControllersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.RemovedControllersIDs(); len(nodes) > 0 && !ceu.mutation.ControllersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ControllersTable,
			Columns: []string{companyengineer.ControllersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.ControllersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ControllersTable,
			Columns: []string{companyengineer.ControllersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceu.mutation.MechaniccontrollersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.MechaniccontrollersTable,
			Columns: []string{companyengineer.MechaniccontrollersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.RemovedMechaniccontrollersIDs(); len(nodes) > 0 && !ceu.mutation.MechaniccontrollersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.MechaniccontrollersTable,
			Columns: []string{companyengineer.MechaniccontrollersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.MechaniccontrollersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.MechaniccontrollersTable,
			Columns: []string{companyengineer.MechaniccontrollersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceu.mutation.ElectriccontrollersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ElectriccontrollersTable,
			Columns: []string{companyengineer.ElectriccontrollersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.RemovedElectriccontrollersIDs(); len(nodes) > 0 && !ceu.mutation.ElectriccontrollersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ElectriccontrollersTable,
			Columns: []string{companyengineer.ElectriccontrollersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.ElectriccontrollersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ElectriccontrollersTable,
			Columns: []string{companyengineer.ElectriccontrollersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ceu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{companyengineer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ceu.mutation.done = true
	return n, nil
}

// CompanyEngineerUpdateOne is the builder for updating a single CompanyEngineer entity.
type CompanyEngineerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompanyEngineerMutation
}

// SetName sets the "Name" field.
func (ceuo *CompanyEngineerUpdateOne) SetName(s string) *CompanyEngineerUpdateOne {
	ceuo.mutation.SetName(s)
	return ceuo
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (ceuo *CompanyEngineerUpdateOne) SetNillableName(s *string) *CompanyEngineerUpdateOne {
	if s != nil {
		ceuo.SetName(*s)
	}
	return ceuo
}

// SetTcNo sets the "TcNo" field.
func (ceuo *CompanyEngineerUpdateOne) SetTcNo(i int) *CompanyEngineerUpdateOne {
	ceuo.mutation.ResetTcNo()
	ceuo.mutation.SetTcNo(i)
	return ceuo
}

// SetNillableTcNo sets the "TcNo" field if the given value is not nil.
func (ceuo *CompanyEngineerUpdateOne) SetNillableTcNo(i *int) *CompanyEngineerUpdateOne {
	if i != nil {
		ceuo.SetTcNo(*i)
	}
	return ceuo
}

// AddTcNo adds i to the "TcNo" field.
func (ceuo *CompanyEngineerUpdateOne) AddTcNo(i int) *CompanyEngineerUpdateOne {
	ceuo.mutation.AddTcNo(i)
	return ceuo
}

// ClearTcNo clears the value of the "TcNo" field.
func (ceuo *CompanyEngineerUpdateOne) ClearTcNo() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearTcNo()
	return ceuo
}

// SetPhone sets the "Phone" field.
func (ceuo *CompanyEngineerUpdateOne) SetPhone(s string) *CompanyEngineerUpdateOne {
	ceuo.mutation.SetPhone(s)
	return ceuo
}

// SetNillablePhone sets the "Phone" field if the given value is not nil.
func (ceuo *CompanyEngineerUpdateOne) SetNillablePhone(s *string) *CompanyEngineerUpdateOne {
	if s != nil {
		ceuo.SetPhone(*s)
	}
	return ceuo
}

// ClearPhone clears the value of the "Phone" field.
func (ceuo *CompanyEngineerUpdateOne) ClearPhone() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearPhone()
	return ceuo
}

// SetEmail sets the "Email" field.
func (ceuo *CompanyEngineerUpdateOne) SetEmail(s string) *CompanyEngineerUpdateOne {
	ceuo.mutation.SetEmail(s)
	return ceuo
}

// SetNillableEmail sets the "Email" field if the given value is not nil.
func (ceuo *CompanyEngineerUpdateOne) SetNillableEmail(s *string) *CompanyEngineerUpdateOne {
	if s != nil {
		ceuo.SetEmail(*s)
	}
	return ceuo
}

// ClearEmail clears the value of the "Email" field.
func (ceuo *CompanyEngineerUpdateOne) ClearEmail() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearEmail()
	return ceuo
}

// SetAddress sets the "Address" field.
func (ceuo *CompanyEngineerUpdateOne) SetAddress(s string) *CompanyEngineerUpdateOne {
	ceuo.mutation.SetAddress(s)
	return ceuo
}

// SetNillableAddress sets the "Address" field if the given value is not nil.
func (ceuo *CompanyEngineerUpdateOne) SetNillableAddress(s *string) *CompanyEngineerUpdateOne {
	if s != nil {
		ceuo.SetAddress(*s)
	}
	return ceuo
}

// ClearAddress clears the value of the "Address" field.
func (ceuo *CompanyEngineerUpdateOne) ClearAddress() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearAddress()
	return ceuo
}

// SetCareer sets the "Career" field.
func (ceuo *CompanyEngineerUpdateOne) SetCareer(s string) *CompanyEngineerUpdateOne {
	ceuo.mutation.SetCareer(s)
	return ceuo
}

// SetNillableCareer sets the "Career" field if the given value is not nil.
func (ceuo *CompanyEngineerUpdateOne) SetNillableCareer(s *string) *CompanyEngineerUpdateOne {
	if s != nil {
		ceuo.SetCareer(*s)
	}
	return ceuo
}

// ClearCareer clears the value of the "Career" field.
func (ceuo *CompanyEngineerUpdateOne) ClearCareer() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearCareer()
	return ceuo
}

// SetPosition sets the "Position" field.
func (ceuo *CompanyEngineerUpdateOne) SetPosition(s string) *CompanyEngineerUpdateOne {
	ceuo.mutation.SetPosition(s)
	return ceuo
}

// SetNillablePosition sets the "Position" field if the given value is not nil.
func (ceuo *CompanyEngineerUpdateOne) SetNillablePosition(s *string) *CompanyEngineerUpdateOne {
	if s != nil {
		ceuo.SetPosition(*s)
	}
	return ceuo
}

// ClearPosition clears the value of the "Position" field.
func (ceuo *CompanyEngineerUpdateOne) ClearPosition() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearPosition()
	return ceuo
}

// SetRegisterNo sets the "RegisterNo" field.
func (ceuo *CompanyEngineerUpdateOne) SetRegisterNo(i int) *CompanyEngineerUpdateOne {
	ceuo.mutation.ResetRegisterNo()
	ceuo.mutation.SetRegisterNo(i)
	return ceuo
}

// SetNillableRegisterNo sets the "RegisterNo" field if the given value is not nil.
func (ceuo *CompanyEngineerUpdateOne) SetNillableRegisterNo(i *int) *CompanyEngineerUpdateOne {
	if i != nil {
		ceuo.SetRegisterNo(*i)
	}
	return ceuo
}

// AddRegisterNo adds i to the "RegisterNo" field.
func (ceuo *CompanyEngineerUpdateOne) AddRegisterNo(i int) *CompanyEngineerUpdateOne {
	ceuo.mutation.AddRegisterNo(i)
	return ceuo
}

// ClearRegisterNo clears the value of the "RegisterNo" field.
func (ceuo *CompanyEngineerUpdateOne) ClearRegisterNo() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearRegisterNo()
	return ceuo
}

// SetCertNo sets the "CertNo" field.
func (ceuo *CompanyEngineerUpdateOne) SetCertNo(i int) *CompanyEngineerUpdateOne {
	ceuo.mutation.ResetCertNo()
	ceuo.mutation.SetCertNo(i)
	return ceuo
}

// SetNillableCertNo sets the "CertNo" field if the given value is not nil.
func (ceuo *CompanyEngineerUpdateOne) SetNillableCertNo(i *int) *CompanyEngineerUpdateOne {
	if i != nil {
		ceuo.SetCertNo(*i)
	}
	return ceuo
}

// AddCertNo adds i to the "CertNo" field.
func (ceuo *CompanyEngineerUpdateOne) AddCertNo(i int) *CompanyEngineerUpdateOne {
	ceuo.mutation.AddCertNo(i)
	return ceuo
}

// ClearCertNo clears the value of the "CertNo" field.
func (ceuo *CompanyEngineerUpdateOne) ClearCertNo() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearCertNo()
	return ceuo
}

// SetYDSID sets the "YDSID" field.
func (ceuo *CompanyEngineerUpdateOne) SetYDSID(i int) *CompanyEngineerUpdateOne {
	ceuo.mutation.ResetYDSID()
	ceuo.mutation.SetYDSID(i)
	return ceuo
}

// SetNillableYDSID sets the "YDSID" field if the given value is not nil.
func (ceuo *CompanyEngineerUpdateOne) SetNillableYDSID(i *int) *CompanyEngineerUpdateOne {
	if i != nil {
		ceuo.SetYDSID(*i)
	}
	return ceuo
}

// AddYDSID adds i to the "YDSID" field.
func (ceuo *CompanyEngineerUpdateOne) AddYDSID(i int) *CompanyEngineerUpdateOne {
	ceuo.mutation.AddYDSID(i)
	return ceuo
}

// ClearYDSID clears the value of the "YDSID" field.
func (ceuo *CompanyEngineerUpdateOne) ClearYDSID() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearYDSID()
	return ceuo
}

// SetEmployment sets the "Employment" field.
func (ceuo *CompanyEngineerUpdateOne) SetEmployment(t time.Time) *CompanyEngineerUpdateOne {
	ceuo.mutation.SetEmployment(t)
	return ceuo
}

// SetNillableEmployment sets the "Employment" field if the given value is not nil.
func (ceuo *CompanyEngineerUpdateOne) SetNillableEmployment(t *time.Time) *CompanyEngineerUpdateOne {
	if t != nil {
		ceuo.SetEmployment(*t)
	}
	return ceuo
}

// ClearEmployment clears the value of the "Employment" field.
func (ceuo *CompanyEngineerUpdateOne) ClearEmployment() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearEmployment()
	return ceuo
}

// SetStatus sets the "Status" field.
func (ceuo *CompanyEngineerUpdateOne) SetStatus(i int) *CompanyEngineerUpdateOne {
	ceuo.mutation.ResetStatus()
	ceuo.mutation.SetStatus(i)
	return ceuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (ceuo *CompanyEngineerUpdateOne) SetNillableStatus(i *int) *CompanyEngineerUpdateOne {
	if i != nil {
		ceuo.SetStatus(*i)
	}
	return ceuo
}

// AddStatus adds i to the "Status" field.
func (ceuo *CompanyEngineerUpdateOne) AddStatus(i int) *CompanyEngineerUpdateOne {
	ceuo.mutation.AddStatus(i)
	return ceuo
}

// SetNote sets the "Note" field.
func (ceuo *CompanyEngineerUpdateOne) SetNote(s string) *CompanyEngineerUpdateOne {
	ceuo.mutation.SetNote(s)
	return ceuo
}

// SetNillableNote sets the "Note" field if the given value is not nil.
func (ceuo *CompanyEngineerUpdateOne) SetNillableNote(s *string) *CompanyEngineerUpdateOne {
	if s != nil {
		ceuo.SetNote(*s)
	}
	return ceuo
}

// ClearNote clears the value of the "Note" field.
func (ceuo *CompanyEngineerUpdateOne) ClearNote() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearNote()
	return ceuo
}

// SetCreatedAt sets the "CreatedAt" field.
func (ceuo *CompanyEngineerUpdateOne) SetCreatedAt(t time.Time) *CompanyEngineerUpdateOne {
	ceuo.mutation.SetCreatedAt(t)
	return ceuo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (ceuo *CompanyEngineerUpdateOne) SetNillableCreatedAt(t *time.Time) *CompanyEngineerUpdateOne {
	if t != nil {
		ceuo.SetCreatedAt(*t)
	}
	return ceuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (ceuo *CompanyEngineerUpdateOne) SetUpdatedAt(t time.Time) *CompanyEngineerUpdateOne {
	ceuo.mutation.SetUpdatedAt(t)
	return ceuo
}

// SetCompanyID sets the "company" edge to the CompanyDetail entity by ID.
func (ceuo *CompanyEngineerUpdateOne) SetCompanyID(id int) *CompanyEngineerUpdateOne {
	ceuo.mutation.SetCompanyID(id)
	return ceuo
}

// SetNillableCompanyID sets the "company" edge to the CompanyDetail entity by ID if the given value is not nil.
func (ceuo *CompanyEngineerUpdateOne) SetNillableCompanyID(id *int) *CompanyEngineerUpdateOne {
	if id != nil {
		ceuo = ceuo.SetCompanyID(*id)
	}
	return ceuo
}

// SetCompany sets the "company" edge to the CompanyDetail entity.
func (ceuo *CompanyEngineerUpdateOne) SetCompany(c *CompanyDetail) *CompanyEngineerUpdateOne {
	return ceuo.SetCompanyID(c.ID)
}

// AddInspectorIDs adds the "inspectors" edge to the JobDetail entity by IDs.
func (ceuo *CompanyEngineerUpdateOne) AddInspectorIDs(ids ...int) *CompanyEngineerUpdateOne {
	ceuo.mutation.AddInspectorIDs(ids...)
	return ceuo
}

// AddInspectors adds the "inspectors" edges to the JobDetail entity.
func (ceuo *CompanyEngineerUpdateOne) AddInspectors(j ...*JobDetail) *CompanyEngineerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceuo.AddInspectorIDs(ids...)
}

// AddArchitectIDs adds the "architects" edge to the JobDetail entity by IDs.
func (ceuo *CompanyEngineerUpdateOne) AddArchitectIDs(ids ...int) *CompanyEngineerUpdateOne {
	ceuo.mutation.AddArchitectIDs(ids...)
	return ceuo
}

// AddArchitects adds the "architects" edges to the JobDetail entity.
func (ceuo *CompanyEngineerUpdateOne) AddArchitects(j ...*JobDetail) *CompanyEngineerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceuo.AddArchitectIDs(ids...)
}

// AddStaticIDs adds the "statics" edge to the JobDetail entity by IDs.
func (ceuo *CompanyEngineerUpdateOne) AddStaticIDs(ids ...int) *CompanyEngineerUpdateOne {
	ceuo.mutation.AddStaticIDs(ids...)
	return ceuo
}

// AddStatics adds the "statics" edges to the JobDetail entity.
func (ceuo *CompanyEngineerUpdateOne) AddStatics(j ...*JobDetail) *CompanyEngineerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceuo.AddStaticIDs(ids...)
}

// AddMechanicIDs adds the "mechanics" edge to the JobDetail entity by IDs.
func (ceuo *CompanyEngineerUpdateOne) AddMechanicIDs(ids ...int) *CompanyEngineerUpdateOne {
	ceuo.mutation.AddMechanicIDs(ids...)
	return ceuo
}

// AddMechanics adds the "mechanics" edges to the JobDetail entity.
func (ceuo *CompanyEngineerUpdateOne) AddMechanics(j ...*JobDetail) *CompanyEngineerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceuo.AddMechanicIDs(ids...)
}

// AddElectricIDs adds the "electrics" edge to the JobDetail entity by IDs.
func (ceuo *CompanyEngineerUpdateOne) AddElectricIDs(ids ...int) *CompanyEngineerUpdateOne {
	ceuo.mutation.AddElectricIDs(ids...)
	return ceuo
}

// AddElectrics adds the "electrics" edges to the JobDetail entity.
func (ceuo *CompanyEngineerUpdateOne) AddElectrics(j ...*JobDetail) *CompanyEngineerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceuo.AddElectricIDs(ids...)
}

// AddControllerIDs adds the "controllers" edge to the JobDetail entity by IDs.
func (ceuo *CompanyEngineerUpdateOne) AddControllerIDs(ids ...int) *CompanyEngineerUpdateOne {
	ceuo.mutation.AddControllerIDs(ids...)
	return ceuo
}

// AddControllers adds the "controllers" edges to the JobDetail entity.
func (ceuo *CompanyEngineerUpdateOne) AddControllers(j ...*JobDetail) *CompanyEngineerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceuo.AddControllerIDs(ids...)
}

// AddMechaniccontrollerIDs adds the "mechaniccontrollers" edge to the JobDetail entity by IDs.
func (ceuo *CompanyEngineerUpdateOne) AddMechaniccontrollerIDs(ids ...int) *CompanyEngineerUpdateOne {
	ceuo.mutation.AddMechaniccontrollerIDs(ids...)
	return ceuo
}

// AddMechaniccontrollers adds the "mechaniccontrollers" edges to the JobDetail entity.
func (ceuo *CompanyEngineerUpdateOne) AddMechaniccontrollers(j ...*JobDetail) *CompanyEngineerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceuo.AddMechaniccontrollerIDs(ids...)
}

// AddElectriccontrollerIDs adds the "electriccontrollers" edge to the JobDetail entity by IDs.
func (ceuo *CompanyEngineerUpdateOne) AddElectriccontrollerIDs(ids ...int) *CompanyEngineerUpdateOne {
	ceuo.mutation.AddElectriccontrollerIDs(ids...)
	return ceuo
}

// AddElectriccontrollers adds the "electriccontrollers" edges to the JobDetail entity.
func (ceuo *CompanyEngineerUpdateOne) AddElectriccontrollers(j ...*JobDetail) *CompanyEngineerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceuo.AddElectriccontrollerIDs(ids...)
}

// Mutation returns the CompanyEngineerMutation object of the builder.
func (ceuo *CompanyEngineerUpdateOne) Mutation() *CompanyEngineerMutation {
	return ceuo.mutation
}

// ClearCompany clears the "company" edge to the CompanyDetail entity.
func (ceuo *CompanyEngineerUpdateOne) ClearCompany() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearCompany()
	return ceuo
}

// ClearInspectors clears all "inspectors" edges to the JobDetail entity.
func (ceuo *CompanyEngineerUpdateOne) ClearInspectors() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearInspectors()
	return ceuo
}

// RemoveInspectorIDs removes the "inspectors" edge to JobDetail entities by IDs.
func (ceuo *CompanyEngineerUpdateOne) RemoveInspectorIDs(ids ...int) *CompanyEngineerUpdateOne {
	ceuo.mutation.RemoveInspectorIDs(ids...)
	return ceuo
}

// RemoveInspectors removes "inspectors" edges to JobDetail entities.
func (ceuo *CompanyEngineerUpdateOne) RemoveInspectors(j ...*JobDetail) *CompanyEngineerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceuo.RemoveInspectorIDs(ids...)
}

// ClearArchitects clears all "architects" edges to the JobDetail entity.
func (ceuo *CompanyEngineerUpdateOne) ClearArchitects() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearArchitects()
	return ceuo
}

// RemoveArchitectIDs removes the "architects" edge to JobDetail entities by IDs.
func (ceuo *CompanyEngineerUpdateOne) RemoveArchitectIDs(ids ...int) *CompanyEngineerUpdateOne {
	ceuo.mutation.RemoveArchitectIDs(ids...)
	return ceuo
}

// RemoveArchitects removes "architects" edges to JobDetail entities.
func (ceuo *CompanyEngineerUpdateOne) RemoveArchitects(j ...*JobDetail) *CompanyEngineerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceuo.RemoveArchitectIDs(ids...)
}

// ClearStatics clears all "statics" edges to the JobDetail entity.
func (ceuo *CompanyEngineerUpdateOne) ClearStatics() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearStatics()
	return ceuo
}

// RemoveStaticIDs removes the "statics" edge to JobDetail entities by IDs.
func (ceuo *CompanyEngineerUpdateOne) RemoveStaticIDs(ids ...int) *CompanyEngineerUpdateOne {
	ceuo.mutation.RemoveStaticIDs(ids...)
	return ceuo
}

// RemoveStatics removes "statics" edges to JobDetail entities.
func (ceuo *CompanyEngineerUpdateOne) RemoveStatics(j ...*JobDetail) *CompanyEngineerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceuo.RemoveStaticIDs(ids...)
}

// ClearMechanics clears all "mechanics" edges to the JobDetail entity.
func (ceuo *CompanyEngineerUpdateOne) ClearMechanics() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearMechanics()
	return ceuo
}

// RemoveMechanicIDs removes the "mechanics" edge to JobDetail entities by IDs.
func (ceuo *CompanyEngineerUpdateOne) RemoveMechanicIDs(ids ...int) *CompanyEngineerUpdateOne {
	ceuo.mutation.RemoveMechanicIDs(ids...)
	return ceuo
}

// RemoveMechanics removes "mechanics" edges to JobDetail entities.
func (ceuo *CompanyEngineerUpdateOne) RemoveMechanics(j ...*JobDetail) *CompanyEngineerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceuo.RemoveMechanicIDs(ids...)
}

// ClearElectrics clears all "electrics" edges to the JobDetail entity.
func (ceuo *CompanyEngineerUpdateOne) ClearElectrics() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearElectrics()
	return ceuo
}

// RemoveElectricIDs removes the "electrics" edge to JobDetail entities by IDs.
func (ceuo *CompanyEngineerUpdateOne) RemoveElectricIDs(ids ...int) *CompanyEngineerUpdateOne {
	ceuo.mutation.RemoveElectricIDs(ids...)
	return ceuo
}

// RemoveElectrics removes "electrics" edges to JobDetail entities.
func (ceuo *CompanyEngineerUpdateOne) RemoveElectrics(j ...*JobDetail) *CompanyEngineerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceuo.RemoveElectricIDs(ids...)
}

// ClearControllers clears all "controllers" edges to the JobDetail entity.
func (ceuo *CompanyEngineerUpdateOne) ClearControllers() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearControllers()
	return ceuo
}

// RemoveControllerIDs removes the "controllers" edge to JobDetail entities by IDs.
func (ceuo *CompanyEngineerUpdateOne) RemoveControllerIDs(ids ...int) *CompanyEngineerUpdateOne {
	ceuo.mutation.RemoveControllerIDs(ids...)
	return ceuo
}

// RemoveControllers removes "controllers" edges to JobDetail entities.
func (ceuo *CompanyEngineerUpdateOne) RemoveControllers(j ...*JobDetail) *CompanyEngineerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceuo.RemoveControllerIDs(ids...)
}

// ClearMechaniccontrollers clears all "mechaniccontrollers" edges to the JobDetail entity.
func (ceuo *CompanyEngineerUpdateOne) ClearMechaniccontrollers() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearMechaniccontrollers()
	return ceuo
}

// RemoveMechaniccontrollerIDs removes the "mechaniccontrollers" edge to JobDetail entities by IDs.
func (ceuo *CompanyEngineerUpdateOne) RemoveMechaniccontrollerIDs(ids ...int) *CompanyEngineerUpdateOne {
	ceuo.mutation.RemoveMechaniccontrollerIDs(ids...)
	return ceuo
}

// RemoveMechaniccontrollers removes "mechaniccontrollers" edges to JobDetail entities.
func (ceuo *CompanyEngineerUpdateOne) RemoveMechaniccontrollers(j ...*JobDetail) *CompanyEngineerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceuo.RemoveMechaniccontrollerIDs(ids...)
}

// ClearElectriccontrollers clears all "electriccontrollers" edges to the JobDetail entity.
func (ceuo *CompanyEngineerUpdateOne) ClearElectriccontrollers() *CompanyEngineerUpdateOne {
	ceuo.mutation.ClearElectriccontrollers()
	return ceuo
}

// RemoveElectriccontrollerIDs removes the "electriccontrollers" edge to JobDetail entities by IDs.
func (ceuo *CompanyEngineerUpdateOne) RemoveElectriccontrollerIDs(ids ...int) *CompanyEngineerUpdateOne {
	ceuo.mutation.RemoveElectriccontrollerIDs(ids...)
	return ceuo
}

// RemoveElectriccontrollers removes "electriccontrollers" edges to JobDetail entities.
func (ceuo *CompanyEngineerUpdateOne) RemoveElectriccontrollers(j ...*JobDetail) *CompanyEngineerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ceuo.RemoveElectriccontrollerIDs(ids...)
}

// Where appends a list predicates to the CompanyEngineerUpdate builder.
func (ceuo *CompanyEngineerUpdateOne) Where(ps ...predicate.CompanyEngineer) *CompanyEngineerUpdateOne {
	ceuo.mutation.Where(ps...)
	return ceuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ceuo *CompanyEngineerUpdateOne) Select(field string, fields ...string) *CompanyEngineerUpdateOne {
	ceuo.fields = append([]string{field}, fields...)
	return ceuo
}

// Save executes the query and returns the updated CompanyEngineer entity.
func (ceuo *CompanyEngineerUpdateOne) Save(ctx context.Context) (*CompanyEngineer, error) {
	ceuo.defaults()
	return withHooks(ctx, ceuo.sqlSave, ceuo.mutation, ceuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ceuo *CompanyEngineerUpdateOne) SaveX(ctx context.Context) *CompanyEngineer {
	node, err := ceuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ceuo *CompanyEngineerUpdateOne) Exec(ctx context.Context) error {
	_, err := ceuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceuo *CompanyEngineerUpdateOne) ExecX(ctx context.Context) {
	if err := ceuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ceuo *CompanyEngineerUpdateOne) defaults() {
	if _, ok := ceuo.mutation.UpdatedAt(); !ok {
		v := companyengineer.UpdateDefaultUpdatedAt()
		ceuo.mutation.SetUpdatedAt(v)
	}
}

func (ceuo *CompanyEngineerUpdateOne) sqlSave(ctx context.Context) (_node *CompanyEngineer, err error) {
	_spec := sqlgraph.NewUpdateSpec(companyengineer.Table, companyengineer.Columns, sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt))
	id, ok := ceuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CompanyEngineer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ceuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, companyengineer.FieldID)
		for _, f := range fields {
			if !companyengineer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != companyengineer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ceuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceuo.mutation.Name(); ok {
		_spec.SetField(companyengineer.FieldName, field.TypeString, value)
	}
	if value, ok := ceuo.mutation.TcNo(); ok {
		_spec.SetField(companyengineer.FieldTcNo, field.TypeInt, value)
	}
	if value, ok := ceuo.mutation.AddedTcNo(); ok {
		_spec.AddField(companyengineer.FieldTcNo, field.TypeInt, value)
	}
	if ceuo.mutation.TcNoCleared() {
		_spec.ClearField(companyengineer.FieldTcNo, field.TypeInt)
	}
	if value, ok := ceuo.mutation.Phone(); ok {
		_spec.SetField(companyengineer.FieldPhone, field.TypeString, value)
	}
	if ceuo.mutation.PhoneCleared() {
		_spec.ClearField(companyengineer.FieldPhone, field.TypeString)
	}
	if value, ok := ceuo.mutation.Email(); ok {
		_spec.SetField(companyengineer.FieldEmail, field.TypeString, value)
	}
	if ceuo.mutation.EmailCleared() {
		_spec.ClearField(companyengineer.FieldEmail, field.TypeString)
	}
	if value, ok := ceuo.mutation.Address(); ok {
		_spec.SetField(companyengineer.FieldAddress, field.TypeString, value)
	}
	if ceuo.mutation.AddressCleared() {
		_spec.ClearField(companyengineer.FieldAddress, field.TypeString)
	}
	if value, ok := ceuo.mutation.Career(); ok {
		_spec.SetField(companyengineer.FieldCareer, field.TypeString, value)
	}
	if ceuo.mutation.CareerCleared() {
		_spec.ClearField(companyengineer.FieldCareer, field.TypeString)
	}
	if value, ok := ceuo.mutation.Position(); ok {
		_spec.SetField(companyengineer.FieldPosition, field.TypeString, value)
	}
	if ceuo.mutation.PositionCleared() {
		_spec.ClearField(companyengineer.FieldPosition, field.TypeString)
	}
	if value, ok := ceuo.mutation.RegisterNo(); ok {
		_spec.SetField(companyengineer.FieldRegisterNo, field.TypeInt, value)
	}
	if value, ok := ceuo.mutation.AddedRegisterNo(); ok {
		_spec.AddField(companyengineer.FieldRegisterNo, field.TypeInt, value)
	}
	if ceuo.mutation.RegisterNoCleared() {
		_spec.ClearField(companyengineer.FieldRegisterNo, field.TypeInt)
	}
	if value, ok := ceuo.mutation.CertNo(); ok {
		_spec.SetField(companyengineer.FieldCertNo, field.TypeInt, value)
	}
	if value, ok := ceuo.mutation.AddedCertNo(); ok {
		_spec.AddField(companyengineer.FieldCertNo, field.TypeInt, value)
	}
	if ceuo.mutation.CertNoCleared() {
		_spec.ClearField(companyengineer.FieldCertNo, field.TypeInt)
	}
	if value, ok := ceuo.mutation.YDSID(); ok {
		_spec.SetField(companyengineer.FieldYDSID, field.TypeInt, value)
	}
	if value, ok := ceuo.mutation.AddedYDSID(); ok {
		_spec.AddField(companyengineer.FieldYDSID, field.TypeInt, value)
	}
	if ceuo.mutation.YDSIDCleared() {
		_spec.ClearField(companyengineer.FieldYDSID, field.TypeInt)
	}
	if value, ok := ceuo.mutation.Employment(); ok {
		_spec.SetField(companyengineer.FieldEmployment, field.TypeTime, value)
	}
	if ceuo.mutation.EmploymentCleared() {
		_spec.ClearField(companyengineer.FieldEmployment, field.TypeTime)
	}
	if value, ok := ceuo.mutation.Status(); ok {
		_spec.SetField(companyengineer.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ceuo.mutation.AddedStatus(); ok {
		_spec.AddField(companyengineer.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ceuo.mutation.Note(); ok {
		_spec.SetField(companyengineer.FieldNote, field.TypeString, value)
	}
	if ceuo.mutation.NoteCleared() {
		_spec.ClearField(companyengineer.FieldNote, field.TypeString)
	}
	if value, ok := ceuo.mutation.CreatedAt(); ok {
		_spec.SetField(companyengineer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ceuo.mutation.UpdatedAt(); ok {
		_spec.SetField(companyengineer.FieldUpdatedAt, field.TypeTime, value)
	}
	if ceuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companyengineer.CompanyTable,
			Columns: []string{companyengineer.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companyengineer.CompanyTable,
			Columns: []string{companyengineer.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceuo.mutation.InspectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.InspectorsTable,
			Columns: []string{companyengineer.InspectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.RemovedInspectorsIDs(); len(nodes) > 0 && !ceuo.mutation.InspectorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.InspectorsTable,
			Columns: []string{companyengineer.InspectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.InspectorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.InspectorsTable,
			Columns: []string{companyengineer.InspectorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceuo.mutation.ArchitectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ArchitectsTable,
			Columns: []string{companyengineer.ArchitectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.RemovedArchitectsIDs(); len(nodes) > 0 && !ceuo.mutation.ArchitectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ArchitectsTable,
			Columns: []string{companyengineer.ArchitectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.ArchitectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ArchitectsTable,
			Columns: []string{companyengineer.ArchitectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceuo.mutation.StaticsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.StaticsTable,
			Columns: []string{companyengineer.StaticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.RemovedStaticsIDs(); len(nodes) > 0 && !ceuo.mutation.StaticsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.StaticsTable,
			Columns: []string{companyengineer.StaticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.StaticsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.StaticsTable,
			Columns: []string{companyengineer.StaticsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceuo.mutation.MechanicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.MechanicsTable,
			Columns: []string{companyengineer.MechanicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.RemovedMechanicsIDs(); len(nodes) > 0 && !ceuo.mutation.MechanicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.MechanicsTable,
			Columns: []string{companyengineer.MechanicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.MechanicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.MechanicsTable,
			Columns: []string{companyengineer.MechanicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceuo.mutation.ElectricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ElectricsTable,
			Columns: []string{companyengineer.ElectricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.RemovedElectricsIDs(); len(nodes) > 0 && !ceuo.mutation.ElectricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ElectricsTable,
			Columns: []string{companyengineer.ElectricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.ElectricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ElectricsTable,
			Columns: []string{companyengineer.ElectricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceuo.mutation.ControllersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ControllersTable,
			Columns: []string{companyengineer.ControllersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.RemovedControllersIDs(); len(nodes) > 0 && !ceuo.mutation.ControllersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ControllersTable,
			Columns: []string{companyengineer.ControllersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.ControllersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ControllersTable,
			Columns: []string{companyengineer.ControllersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceuo.mutation.MechaniccontrollersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.MechaniccontrollersTable,
			Columns: []string{companyengineer.MechaniccontrollersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.RemovedMechaniccontrollersIDs(); len(nodes) > 0 && !ceuo.mutation.MechaniccontrollersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.MechaniccontrollersTable,
			Columns: []string{companyengineer.MechaniccontrollersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.MechaniccontrollersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.MechaniccontrollersTable,
			Columns: []string{companyengineer.MechaniccontrollersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceuo.mutation.ElectriccontrollersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ElectriccontrollersTable,
			Columns: []string{companyengineer.ElectriccontrollersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.RemovedElectriccontrollersIDs(); len(nodes) > 0 && !ceuo.mutation.ElectriccontrollersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ElectriccontrollersTable,
			Columns: []string{companyengineer.ElectriccontrollersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.ElectriccontrollersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyengineer.ElectriccontrollersTable,
			Columns: []string{companyengineer.ElectriccontrollersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CompanyEngineer{config: ceuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ceuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{companyengineer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ceuo.mutation.done = true
	return _node, nil
}
