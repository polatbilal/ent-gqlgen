// Code generated by ent, DO NOT EDIT.

package jobpayments

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/polatbilal/gqlgen-ent/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldLTE(FieldID, id))
}

// Date applies equality check predicate on the "Date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldEQ(FieldDate, v))
}

// Amount applies equality check predicate on the "Amount" field. It's identical to AmountEQ.
func Amount(v int) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldEQ(FieldAmount, v))
}

// Description applies equality check predicate on the "Description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldEQ(FieldDescription, v))
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldEQ(FieldStatus, v))
}

// Percentage applies equality check predicate on the "Percentage" field. It's identical to PercentageEQ.
func Percentage(v float64) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldEQ(FieldPercentage, v))
}

// CreatedAt applies equality check predicate on the "CreatedAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldEQ(FieldUpdatedAt, v))
}

// DateEQ applies the EQ predicate on the "Date" field.
func DateEQ(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "Date" field.
func DateNEQ(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "Date" field.
func DateIn(vs ...time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "Date" field.
func DateNotIn(vs ...time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "Date" field.
func DateGT(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "Date" field.
func DateGTE(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "Date" field.
func DateLT(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "Date" field.
func DateLTE(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldLTE(FieldDate, v))
}

// AmountEQ applies the EQ predicate on the "Amount" field.
func AmountEQ(v int) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "Amount" field.
func AmountNEQ(v int) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "Amount" field.
func AmountIn(vs ...int) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "Amount" field.
func AmountNotIn(vs ...int) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "Amount" field.
func AmountGT(v int) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "Amount" field.
func AmountGTE(v int) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "Amount" field.
func AmountLT(v int) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "Amount" field.
func AmountLTE(v int) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldLTE(FieldAmount, v))
}

// AmountIsNil applies the IsNil predicate on the "Amount" field.
func AmountIsNil() predicate.JobPayments {
	return predicate.JobPayments(sql.FieldIsNull(FieldAmount))
}

// AmountNotNil applies the NotNil predicate on the "Amount" field.
func AmountNotNil() predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNotNull(FieldAmount))
}

// DescriptionEQ applies the EQ predicate on the "Description" field.
func DescriptionEQ(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "Description" field.
func DescriptionNEQ(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "Description" field.
func DescriptionIn(vs ...string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "Description" field.
func DescriptionNotIn(vs ...string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "Description" field.
func DescriptionGT(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "Description" field.
func DescriptionGTE(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "Description" field.
func DescriptionLT(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "Description" field.
func DescriptionLTE(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "Description" field.
func DescriptionContains(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "Description" field.
func DescriptionHasPrefix(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "Description" field.
func DescriptionHasSuffix(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "Description" field.
func DescriptionIsNil() predicate.JobPayments {
	return predicate.JobPayments(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "Description" field.
func DescriptionNotNil() predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "Description" field.
func DescriptionEqualFold(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "Description" field.
func DescriptionContainsFold(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldContainsFold(FieldDescription, v))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "Status" field.
func StatusGT(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "Status" field.
func StatusGTE(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "Status" field.
func StatusLT(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "Status" field.
func StatusLTE(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "Status" field.
func StatusContains(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "Status" field.
func StatusHasPrefix(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "Status" field.
func StatusHasSuffix(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "Status" field.
func StatusIsNil() predicate.JobPayments {
	return predicate.JobPayments(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "Status" field.
func StatusNotNil() predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "Status" field.
func StatusEqualFold(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "Status" field.
func StatusContainsFold(v string) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldContainsFold(FieldStatus, v))
}

// PercentageEQ applies the EQ predicate on the "Percentage" field.
func PercentageEQ(v float64) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldEQ(FieldPercentage, v))
}

// PercentageNEQ applies the NEQ predicate on the "Percentage" field.
func PercentageNEQ(v float64) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNEQ(FieldPercentage, v))
}

// PercentageIn applies the In predicate on the "Percentage" field.
func PercentageIn(vs ...float64) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldIn(FieldPercentage, vs...))
}

// PercentageNotIn applies the NotIn predicate on the "Percentage" field.
func PercentageNotIn(vs ...float64) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNotIn(FieldPercentage, vs...))
}

// PercentageGT applies the GT predicate on the "Percentage" field.
func PercentageGT(v float64) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldGT(FieldPercentage, v))
}

// PercentageGTE applies the GTE predicate on the "Percentage" field.
func PercentageGTE(v float64) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldGTE(FieldPercentage, v))
}

// PercentageLT applies the LT predicate on the "Percentage" field.
func PercentageLT(v float64) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldLT(FieldPercentage, v))
}

// PercentageLTE applies the LTE predicate on the "Percentage" field.
func PercentageLTE(v float64) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldLTE(FieldPercentage, v))
}

// PercentageIsNil applies the IsNil predicate on the "Percentage" field.
func PercentageIsNil() predicate.JobPayments {
	return predicate.JobPayments(sql.FieldIsNull(FieldPercentage))
}

// PercentageNotNil applies the NotNil predicate on the "Percentage" field.
func PercentageNotNil() predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNotNull(FieldPercentage))
}

// CreatedAtEQ applies the EQ predicate on the "CreatedAt" field.
func CreatedAtEQ(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "CreatedAt" field.
func CreatedAtNEQ(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "CreatedAt" field.
func CreatedAtIn(vs ...time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "CreatedAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "CreatedAt" field.
func CreatedAtGT(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "CreatedAt" field.
func CreatedAtGTE(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "CreatedAt" field.
func CreatedAtLT(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "CreatedAt" field.
func CreatedAtLTE(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.JobPayments {
	return predicate.JobPayments(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasPayments applies the HasEdge predicate on the "payments" edge.
func HasPayments() predicate.JobPayments {
	return predicate.JobPayments(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentsTable, PaymentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentsWith applies the HasEdge predicate on the "payments" edge with a given conditions (other predicates).
func HasPaymentsWith(preds ...predicate.JobDetail) predicate.JobPayments {
	return predicate.JobPayments(func(s *sql.Selector) {
		step := newPaymentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JobPayments) predicate.JobPayments {
	return predicate.JobPayments(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JobPayments) predicate.JobPayments {
	return predicate.JobPayments(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JobPayments) predicate.JobPayments {
	return predicate.JobPayments(sql.NotPredicates(p))
}
