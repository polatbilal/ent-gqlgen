// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/polatbilal/gqlgen-ent/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/ent/jobowner"
	"github.com/polatbilal/gqlgen-ent/ent/predicate"
)

// JobOwnerQuery is the builder for querying JobOwner entities.
type JobOwnerQuery struct {
	config
	ctx             *QueryContext
	order           []jobowner.OrderOption
	inters          []Interceptor
	predicates      []predicate.JobOwner
	withOwners      *JobDetailQuery
	modifiers       []func(*sql.Selector)
	loadTotal       []func(context.Context, []*JobOwner) error
	withNamedOwners map[string]*JobDetailQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the JobOwnerQuery builder.
func (joq *JobOwnerQuery) Where(ps ...predicate.JobOwner) *JobOwnerQuery {
	joq.predicates = append(joq.predicates, ps...)
	return joq
}

// Limit the number of records to be returned by this query.
func (joq *JobOwnerQuery) Limit(limit int) *JobOwnerQuery {
	joq.ctx.Limit = &limit
	return joq
}

// Offset to start from.
func (joq *JobOwnerQuery) Offset(offset int) *JobOwnerQuery {
	joq.ctx.Offset = &offset
	return joq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (joq *JobOwnerQuery) Unique(unique bool) *JobOwnerQuery {
	joq.ctx.Unique = &unique
	return joq
}

// Order specifies how the records should be ordered.
func (joq *JobOwnerQuery) Order(o ...jobowner.OrderOption) *JobOwnerQuery {
	joq.order = append(joq.order, o...)
	return joq
}

// QueryOwners chains the current query on the "owners" edge.
func (joq *JobOwnerQuery) QueryOwners() *JobDetailQuery {
	query := (&JobDetailClient{config: joq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := joq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := joq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobowner.Table, jobowner.FieldID, selector),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobowner.OwnersTable, jobowner.OwnersColumn),
		)
		fromU = sqlgraph.SetNeighbors(joq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first JobOwner entity from the query.
// Returns a *NotFoundError when no JobOwner was found.
func (joq *JobOwnerQuery) First(ctx context.Context) (*JobOwner, error) {
	nodes, err := joq.Limit(1).All(setContextOp(ctx, joq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{jobowner.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (joq *JobOwnerQuery) FirstX(ctx context.Context) *JobOwner {
	node, err := joq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first JobOwner ID from the query.
// Returns a *NotFoundError when no JobOwner ID was found.
func (joq *JobOwnerQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = joq.Limit(1).IDs(setContextOp(ctx, joq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{jobowner.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (joq *JobOwnerQuery) FirstIDX(ctx context.Context) int {
	id, err := joq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single JobOwner entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one JobOwner entity is found.
// Returns a *NotFoundError when no JobOwner entities are found.
func (joq *JobOwnerQuery) Only(ctx context.Context) (*JobOwner, error) {
	nodes, err := joq.Limit(2).All(setContextOp(ctx, joq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{jobowner.Label}
	default:
		return nil, &NotSingularError{jobowner.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (joq *JobOwnerQuery) OnlyX(ctx context.Context) *JobOwner {
	node, err := joq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only JobOwner ID in the query.
// Returns a *NotSingularError when more than one JobOwner ID is found.
// Returns a *NotFoundError when no entities are found.
func (joq *JobOwnerQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = joq.Limit(2).IDs(setContextOp(ctx, joq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{jobowner.Label}
	default:
		err = &NotSingularError{jobowner.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (joq *JobOwnerQuery) OnlyIDX(ctx context.Context) int {
	id, err := joq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of JobOwners.
func (joq *JobOwnerQuery) All(ctx context.Context) ([]*JobOwner, error) {
	ctx = setContextOp(ctx, joq.ctx, ent.OpQueryAll)
	if err := joq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*JobOwner, *JobOwnerQuery]()
	return withInterceptors[[]*JobOwner](ctx, joq, qr, joq.inters)
}

// AllX is like All, but panics if an error occurs.
func (joq *JobOwnerQuery) AllX(ctx context.Context) []*JobOwner {
	nodes, err := joq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of JobOwner IDs.
func (joq *JobOwnerQuery) IDs(ctx context.Context) (ids []int, err error) {
	if joq.ctx.Unique == nil && joq.path != nil {
		joq.Unique(true)
	}
	ctx = setContextOp(ctx, joq.ctx, ent.OpQueryIDs)
	if err = joq.Select(jobowner.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (joq *JobOwnerQuery) IDsX(ctx context.Context) []int {
	ids, err := joq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (joq *JobOwnerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, joq.ctx, ent.OpQueryCount)
	if err := joq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, joq, querierCount[*JobOwnerQuery](), joq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (joq *JobOwnerQuery) CountX(ctx context.Context) int {
	count, err := joq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (joq *JobOwnerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, joq.ctx, ent.OpQueryExist)
	switch _, err := joq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (joq *JobOwnerQuery) ExistX(ctx context.Context) bool {
	exist, err := joq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the JobOwnerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (joq *JobOwnerQuery) Clone() *JobOwnerQuery {
	if joq == nil {
		return nil
	}
	return &JobOwnerQuery{
		config:     joq.config,
		ctx:        joq.ctx.Clone(),
		order:      append([]jobowner.OrderOption{}, joq.order...),
		inters:     append([]Interceptor{}, joq.inters...),
		predicates: append([]predicate.JobOwner{}, joq.predicates...),
		withOwners: joq.withOwners.Clone(),
		// clone intermediate query.
		sql:  joq.sql.Clone(),
		path: joq.path,
	}
}

// WithOwners tells the query-builder to eager-load the nodes that are connected to
// the "owners" edge. The optional arguments are used to configure the query builder of the edge.
func (joq *JobOwnerQuery) WithOwners(opts ...func(*JobDetailQuery)) *JobOwnerQuery {
	query := (&JobDetailClient{config: joq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	joq.withOwners = query
	return joq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"Name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.JobOwner.Query().
//		GroupBy(jobowner.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (joq *JobOwnerQuery) GroupBy(field string, fields ...string) *JobOwnerGroupBy {
	joq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &JobOwnerGroupBy{build: joq}
	grbuild.flds = &joq.ctx.Fields
	grbuild.label = jobowner.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"Name,omitempty"`
//	}
//
//	client.JobOwner.Query().
//		Select(jobowner.FieldName).
//		Scan(ctx, &v)
func (joq *JobOwnerQuery) Select(fields ...string) *JobOwnerSelect {
	joq.ctx.Fields = append(joq.ctx.Fields, fields...)
	sbuild := &JobOwnerSelect{JobOwnerQuery: joq}
	sbuild.label = jobowner.Label
	sbuild.flds, sbuild.scan = &joq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a JobOwnerSelect configured with the given aggregations.
func (joq *JobOwnerQuery) Aggregate(fns ...AggregateFunc) *JobOwnerSelect {
	return joq.Select().Aggregate(fns...)
}

func (joq *JobOwnerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range joq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, joq); err != nil {
				return err
			}
		}
	}
	for _, f := range joq.ctx.Fields {
		if !jobowner.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if joq.path != nil {
		prev, err := joq.path(ctx)
		if err != nil {
			return err
		}
		joq.sql = prev
	}
	return nil
}

func (joq *JobOwnerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*JobOwner, error) {
	var (
		nodes       = []*JobOwner{}
		_spec       = joq.querySpec()
		loadedTypes = [1]bool{
			joq.withOwners != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*JobOwner).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &JobOwner{config: joq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(joq.modifiers) > 0 {
		_spec.Modifiers = joq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, joq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := joq.withOwners; query != nil {
		if err := joq.loadOwners(ctx, query, nodes,
			func(n *JobOwner) { n.Edges.Owners = []*JobDetail{} },
			func(n *JobOwner, e *JobDetail) { n.Edges.Owners = append(n.Edges.Owners, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range joq.withNamedOwners {
		if err := joq.loadOwners(ctx, query, nodes,
			func(n *JobOwner) { n.appendNamedOwners(name) },
			func(n *JobOwner, e *JobDetail) { n.appendNamedOwners(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range joq.loadTotal {
		if err := joq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (joq *JobOwnerQuery) loadOwners(ctx context.Context, query *JobDetailQuery, nodes []*JobOwner, init func(*JobOwner), assign func(*JobOwner, *JobDetail)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*JobOwner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobDetail(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(jobowner.OwnersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.owner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "owner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (joq *JobOwnerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := joq.querySpec()
	if len(joq.modifiers) > 0 {
		_spec.Modifiers = joq.modifiers
	}
	_spec.Node.Columns = joq.ctx.Fields
	if len(joq.ctx.Fields) > 0 {
		_spec.Unique = joq.ctx.Unique != nil && *joq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, joq.driver, _spec)
}

func (joq *JobOwnerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(jobowner.Table, jobowner.Columns, sqlgraph.NewFieldSpec(jobowner.FieldID, field.TypeInt))
	_spec.From = joq.sql
	if unique := joq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if joq.path != nil {
		_spec.Unique = true
	}
	if fields := joq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobowner.FieldID)
		for i := range fields {
			if fields[i] != jobowner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := joq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := joq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := joq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := joq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (joq *JobOwnerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(joq.driver.Dialect())
	t1 := builder.Table(jobowner.Table)
	columns := joq.ctx.Fields
	if len(columns) == 0 {
		columns = jobowner.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if joq.sql != nil {
		selector = joq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if joq.ctx.Unique != nil && *joq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range joq.predicates {
		p(selector)
	}
	for _, p := range joq.order {
		p(selector)
	}
	if offset := joq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := joq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedOwners tells the query-builder to eager-load the nodes that are connected to the "owners"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (joq *JobOwnerQuery) WithNamedOwners(name string, opts ...func(*JobDetailQuery)) *JobOwnerQuery {
	query := (&JobDetailClient{config: joq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if joq.withNamedOwners == nil {
		joq.withNamedOwners = make(map[string]*JobDetailQuery)
	}
	joq.withNamedOwners[name] = query
	return joq
}

// JobOwnerGroupBy is the group-by builder for JobOwner entities.
type JobOwnerGroupBy struct {
	selector
	build *JobOwnerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jogb *JobOwnerGroupBy) Aggregate(fns ...AggregateFunc) *JobOwnerGroupBy {
	jogb.fns = append(jogb.fns, fns...)
	return jogb
}

// Scan applies the selector query and scans the result into the given value.
func (jogb *JobOwnerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jogb.build.ctx, ent.OpQueryGroupBy)
	if err := jogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobOwnerQuery, *JobOwnerGroupBy](ctx, jogb.build, jogb, jogb.build.inters, v)
}

func (jogb *JobOwnerGroupBy) sqlScan(ctx context.Context, root *JobOwnerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(jogb.fns))
	for _, fn := range jogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*jogb.flds)+len(jogb.fns))
		for _, f := range *jogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*jogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// JobOwnerSelect is the builder for selecting fields of JobOwner entities.
type JobOwnerSelect struct {
	*JobOwnerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (jos *JobOwnerSelect) Aggregate(fns ...AggregateFunc) *JobOwnerSelect {
	jos.fns = append(jos.fns, fns...)
	return jos
}

// Scan applies the selector query and scans the result into the given value.
func (jos *JobOwnerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jos.ctx, ent.OpQuerySelect)
	if err := jos.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobOwnerQuery, *JobOwnerSelect](ctx, jos.JobOwnerQuery, jos, jos.inters, v)
}

func (jos *JobOwnerSelect) sqlScan(ctx context.Context, root *JobOwnerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(jos.fns))
	for _, fn := range jos.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*jos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
