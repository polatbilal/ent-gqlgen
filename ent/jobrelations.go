// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/polatbilal/gqlgen-ent/ent/companydetail"
	"github.com/polatbilal/gqlgen-ent/ent/companyengineer"
	"github.com/polatbilal/gqlgen-ent/ent/jobauthor"
	"github.com/polatbilal/gqlgen-ent/ent/jobcontractor"
	"github.com/polatbilal/gqlgen-ent/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/ent/jobowner"
	"github.com/polatbilal/gqlgen-ent/ent/jobprogress"
	"github.com/polatbilal/gqlgen-ent/ent/jobrelations"
	"github.com/polatbilal/gqlgen-ent/ent/jobsupervisor"
)

// JobRelations is the model entity for the JobRelations schema.
type JobRelations struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// YibfNo holds the value of the "yibfNo" field.
	YibfNo int `json:"yibfNo,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobRelationsQuery when eager-loading is set.
	Edges                 JobRelationsEdges `json:"edges"`
	company_id            *int
	static_id             *int
	mechanic_id           *int
	electric_id           *int
	inspector_id          *int
	architect_id          *int
	controller_id         *int
	mechaniccontroller_id *int
	electriccontroller_id *int
	author_id             *int
	contractor_id         *int
	job_id                *int
	owner_id              *int
	progress_id           *int
	supervisor_id         *int
	selectValues          sql.SelectValues
}

// JobRelationsEdges holds the relations/edges for other nodes in the graph.
type JobRelationsEdges struct {
	// Job holds the value of the job edge.
	Job *JobDetail `json:"job,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *JobOwner `json:"owner,omitempty"`
	// Author holds the value of the author edge.
	Author *JobAuthor `json:"author,omitempty"`
	// Company holds the value of the company edge.
	Company *CompanyDetail `json:"company,omitempty"`
	// Progress holds the value of the progress edge.
	Progress *JobProgress `json:"progress,omitempty"`
	// Contractor holds the value of the contractor edge.
	Contractor *JobContractor `json:"contractor,omitempty"`
	// Supervisor holds the value of the supervisor edge.
	Supervisor *JobSupervisor `json:"supervisor,omitempty"`
	// Static holds the value of the static edge.
	Static *CompanyEngineer `json:"static,omitempty"`
	// Mechanic holds the value of the mechanic edge.
	Mechanic *CompanyEngineer `json:"mechanic,omitempty"`
	// Electric holds the value of the electric edge.
	Electric *CompanyEngineer `json:"electric,omitempty"`
	// Inspector holds the value of the inspector edge.
	Inspector *CompanyEngineer `json:"inspector,omitempty"`
	// Architect holds the value of the architect edge.
	Architect *CompanyEngineer `json:"architect,omitempty"`
	// Controller holds the value of the controller edge.
	Controller *CompanyEngineer `json:"controller,omitempty"`
	// Mechaniccontroller holds the value of the mechaniccontroller edge.
	Mechaniccontroller *CompanyEngineer `json:"mechaniccontroller,omitempty"`
	// Electriccontroller holds the value of the electriccontroller edge.
	Electriccontroller *CompanyEngineer `json:"electriccontroller,omitempty"`
	// Layers holds the value of the layers edge.
	Layers []*JobLayer `json:"layers,omitempty"`
	// Payments holds the value of the payments edge.
	Payments []*JobPayments `json:"payments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [17]bool
	// totalCount holds the count of the edges above.
	totalCount [17]map[string]int

	namedLayers   map[string][]*JobLayer
	namedPayments map[string][]*JobPayments
}

// JobOrErr returns the Job value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobRelationsEdges) JobOrErr() (*JobDetail, error) {
	if e.Job != nil {
		return e.Job, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: jobdetail.Label}
	}
	return nil, &NotLoadedError{edge: "job"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobRelationsEdges) OwnerOrErr() (*JobOwner, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: jobowner.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobRelationsEdges) AuthorOrErr() (*JobAuthor, error) {
	if e.Author != nil {
		return e.Author, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: jobauthor.Label}
	}
	return nil, &NotLoadedError{edge: "author"}
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobRelationsEdges) CompanyOrErr() (*CompanyDetail, error) {
	if e.Company != nil {
		return e.Company, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: companydetail.Label}
	}
	return nil, &NotLoadedError{edge: "company"}
}

// ProgressOrErr returns the Progress value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobRelationsEdges) ProgressOrErr() (*JobProgress, error) {
	if e.Progress != nil {
		return e.Progress, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: jobprogress.Label}
	}
	return nil, &NotLoadedError{edge: "progress"}
}

// ContractorOrErr returns the Contractor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobRelationsEdges) ContractorOrErr() (*JobContractor, error) {
	if e.Contractor != nil {
		return e.Contractor, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: jobcontractor.Label}
	}
	return nil, &NotLoadedError{edge: "contractor"}
}

// SupervisorOrErr returns the Supervisor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobRelationsEdges) SupervisorOrErr() (*JobSupervisor, error) {
	if e.Supervisor != nil {
		return e.Supervisor, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: jobsupervisor.Label}
	}
	return nil, &NotLoadedError{edge: "supervisor"}
}

// StaticOrErr returns the Static value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobRelationsEdges) StaticOrErr() (*CompanyEngineer, error) {
	if e.Static != nil {
		return e.Static, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: companyengineer.Label}
	}
	return nil, &NotLoadedError{edge: "static"}
}

// MechanicOrErr returns the Mechanic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobRelationsEdges) MechanicOrErr() (*CompanyEngineer, error) {
	if e.Mechanic != nil {
		return e.Mechanic, nil
	} else if e.loadedTypes[8] {
		return nil, &NotFoundError{label: companyengineer.Label}
	}
	return nil, &NotLoadedError{edge: "mechanic"}
}

// ElectricOrErr returns the Electric value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobRelationsEdges) ElectricOrErr() (*CompanyEngineer, error) {
	if e.Electric != nil {
		return e.Electric, nil
	} else if e.loadedTypes[9] {
		return nil, &NotFoundError{label: companyengineer.Label}
	}
	return nil, &NotLoadedError{edge: "electric"}
}

// InspectorOrErr returns the Inspector value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobRelationsEdges) InspectorOrErr() (*CompanyEngineer, error) {
	if e.Inspector != nil {
		return e.Inspector, nil
	} else if e.loadedTypes[10] {
		return nil, &NotFoundError{label: companyengineer.Label}
	}
	return nil, &NotLoadedError{edge: "inspector"}
}

// ArchitectOrErr returns the Architect value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobRelationsEdges) ArchitectOrErr() (*CompanyEngineer, error) {
	if e.Architect != nil {
		return e.Architect, nil
	} else if e.loadedTypes[11] {
		return nil, &NotFoundError{label: companyengineer.Label}
	}
	return nil, &NotLoadedError{edge: "architect"}
}

// ControllerOrErr returns the Controller value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobRelationsEdges) ControllerOrErr() (*CompanyEngineer, error) {
	if e.Controller != nil {
		return e.Controller, nil
	} else if e.loadedTypes[12] {
		return nil, &NotFoundError{label: companyengineer.Label}
	}
	return nil, &NotLoadedError{edge: "controller"}
}

// MechaniccontrollerOrErr returns the Mechaniccontroller value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobRelationsEdges) MechaniccontrollerOrErr() (*CompanyEngineer, error) {
	if e.Mechaniccontroller != nil {
		return e.Mechaniccontroller, nil
	} else if e.loadedTypes[13] {
		return nil, &NotFoundError{label: companyengineer.Label}
	}
	return nil, &NotLoadedError{edge: "mechaniccontroller"}
}

// ElectriccontrollerOrErr returns the Electriccontroller value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobRelationsEdges) ElectriccontrollerOrErr() (*CompanyEngineer, error) {
	if e.Electriccontroller != nil {
		return e.Electriccontroller, nil
	} else if e.loadedTypes[14] {
		return nil, &NotFoundError{label: companyengineer.Label}
	}
	return nil, &NotLoadedError{edge: "electriccontroller"}
}

// LayersOrErr returns the Layers value or an error if the edge
// was not loaded in eager-loading.
func (e JobRelationsEdges) LayersOrErr() ([]*JobLayer, error) {
	if e.loadedTypes[15] {
		return e.Layers, nil
	}
	return nil, &NotLoadedError{edge: "layers"}
}

// PaymentsOrErr returns the Payments value or an error if the edge
// was not loaded in eager-loading.
func (e JobRelationsEdges) PaymentsOrErr() ([]*JobPayments, error) {
	if e.loadedTypes[16] {
		return e.Payments, nil
	}
	return nil, &NotLoadedError{edge: "payments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobRelations) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobrelations.FieldID, jobrelations.FieldYibfNo:
			values[i] = new(sql.NullInt64)
		case jobrelations.FieldCreatedAt, jobrelations.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case jobrelations.ForeignKeys[0]: // company_id
			values[i] = new(sql.NullInt64)
		case jobrelations.ForeignKeys[1]: // static_id
			values[i] = new(sql.NullInt64)
		case jobrelations.ForeignKeys[2]: // mechanic_id
			values[i] = new(sql.NullInt64)
		case jobrelations.ForeignKeys[3]: // electric_id
			values[i] = new(sql.NullInt64)
		case jobrelations.ForeignKeys[4]: // inspector_id
			values[i] = new(sql.NullInt64)
		case jobrelations.ForeignKeys[5]: // architect_id
			values[i] = new(sql.NullInt64)
		case jobrelations.ForeignKeys[6]: // controller_id
			values[i] = new(sql.NullInt64)
		case jobrelations.ForeignKeys[7]: // mechaniccontroller_id
			values[i] = new(sql.NullInt64)
		case jobrelations.ForeignKeys[8]: // electriccontroller_id
			values[i] = new(sql.NullInt64)
		case jobrelations.ForeignKeys[9]: // author_id
			values[i] = new(sql.NullInt64)
		case jobrelations.ForeignKeys[10]: // contractor_id
			values[i] = new(sql.NullInt64)
		case jobrelations.ForeignKeys[11]: // job_id
			values[i] = new(sql.NullInt64)
		case jobrelations.ForeignKeys[12]: // owner_id
			values[i] = new(sql.NullInt64)
		case jobrelations.ForeignKeys[13]: // progress_id
			values[i] = new(sql.NullInt64)
		case jobrelations.ForeignKeys[14]: // supervisor_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobRelations fields.
func (jr *JobRelations) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobrelations.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			jr.ID = int(value.Int64)
		case jobrelations.FieldYibfNo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yibfNo", values[i])
			} else if value.Valid {
				jr.YibfNo = int(value.Int64)
			}
		case jobrelations.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				jr.CreatedAt = value.Time
			}
		case jobrelations.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				jr.UpdatedAt = value.Time
			}
		case jobrelations.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_id", value)
			} else if value.Valid {
				jr.company_id = new(int)
				*jr.company_id = int(value.Int64)
			}
		case jobrelations.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field static_id", value)
			} else if value.Valid {
				jr.static_id = new(int)
				*jr.static_id = int(value.Int64)
			}
		case jobrelations.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field mechanic_id", value)
			} else if value.Valid {
				jr.mechanic_id = new(int)
				*jr.mechanic_id = int(value.Int64)
			}
		case jobrelations.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field electric_id", value)
			} else if value.Valid {
				jr.electric_id = new(int)
				*jr.electric_id = int(value.Int64)
			}
		case jobrelations.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field inspector_id", value)
			} else if value.Valid {
				jr.inspector_id = new(int)
				*jr.inspector_id = int(value.Int64)
			}
		case jobrelations.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field architect_id", value)
			} else if value.Valid {
				jr.architect_id = new(int)
				*jr.architect_id = int(value.Int64)
			}
		case jobrelations.ForeignKeys[6]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field controller_id", value)
			} else if value.Valid {
				jr.controller_id = new(int)
				*jr.controller_id = int(value.Int64)
			}
		case jobrelations.ForeignKeys[7]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field mechaniccontroller_id", value)
			} else if value.Valid {
				jr.mechaniccontroller_id = new(int)
				*jr.mechaniccontroller_id = int(value.Int64)
			}
		case jobrelations.ForeignKeys[8]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field electriccontroller_id", value)
			} else if value.Valid {
				jr.electriccontroller_id = new(int)
				*jr.electriccontroller_id = int(value.Int64)
			}
		case jobrelations.ForeignKeys[9]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field author_id", value)
			} else if value.Valid {
				jr.author_id = new(int)
				*jr.author_id = int(value.Int64)
			}
		case jobrelations.ForeignKeys[10]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field contractor_id", value)
			} else if value.Valid {
				jr.contractor_id = new(int)
				*jr.contractor_id = int(value.Int64)
			}
		case jobrelations.ForeignKeys[11]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field job_id", value)
			} else if value.Valid {
				jr.job_id = new(int)
				*jr.job_id = int(value.Int64)
			}
		case jobrelations.ForeignKeys[12]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field owner_id", value)
			} else if value.Valid {
				jr.owner_id = new(int)
				*jr.owner_id = int(value.Int64)
			}
		case jobrelations.ForeignKeys[13]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field progress_id", value)
			} else if value.Valid {
				jr.progress_id = new(int)
				*jr.progress_id = int(value.Int64)
			}
		case jobrelations.ForeignKeys[14]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field supervisor_id", value)
			} else if value.Valid {
				jr.supervisor_id = new(int)
				*jr.supervisor_id = int(value.Int64)
			}
		default:
			jr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobRelations.
// This includes values selected through modifiers, order, etc.
func (jr *JobRelations) Value(name string) (ent.Value, error) {
	return jr.selectValues.Get(name)
}

// QueryJob queries the "job" edge of the JobRelations entity.
func (jr *JobRelations) QueryJob() *JobDetailQuery {
	return NewJobRelationsClient(jr.config).QueryJob(jr)
}

// QueryOwner queries the "owner" edge of the JobRelations entity.
func (jr *JobRelations) QueryOwner() *JobOwnerQuery {
	return NewJobRelationsClient(jr.config).QueryOwner(jr)
}

// QueryAuthor queries the "author" edge of the JobRelations entity.
func (jr *JobRelations) QueryAuthor() *JobAuthorQuery {
	return NewJobRelationsClient(jr.config).QueryAuthor(jr)
}

// QueryCompany queries the "company" edge of the JobRelations entity.
func (jr *JobRelations) QueryCompany() *CompanyDetailQuery {
	return NewJobRelationsClient(jr.config).QueryCompany(jr)
}

// QueryProgress queries the "progress" edge of the JobRelations entity.
func (jr *JobRelations) QueryProgress() *JobProgressQuery {
	return NewJobRelationsClient(jr.config).QueryProgress(jr)
}

// QueryContractor queries the "contractor" edge of the JobRelations entity.
func (jr *JobRelations) QueryContractor() *JobContractorQuery {
	return NewJobRelationsClient(jr.config).QueryContractor(jr)
}

// QuerySupervisor queries the "supervisor" edge of the JobRelations entity.
func (jr *JobRelations) QuerySupervisor() *JobSupervisorQuery {
	return NewJobRelationsClient(jr.config).QuerySupervisor(jr)
}

// QueryStatic queries the "static" edge of the JobRelations entity.
func (jr *JobRelations) QueryStatic() *CompanyEngineerQuery {
	return NewJobRelationsClient(jr.config).QueryStatic(jr)
}

// QueryMechanic queries the "mechanic" edge of the JobRelations entity.
func (jr *JobRelations) QueryMechanic() *CompanyEngineerQuery {
	return NewJobRelationsClient(jr.config).QueryMechanic(jr)
}

// QueryElectric queries the "electric" edge of the JobRelations entity.
func (jr *JobRelations) QueryElectric() *CompanyEngineerQuery {
	return NewJobRelationsClient(jr.config).QueryElectric(jr)
}

// QueryInspector queries the "inspector" edge of the JobRelations entity.
func (jr *JobRelations) QueryInspector() *CompanyEngineerQuery {
	return NewJobRelationsClient(jr.config).QueryInspector(jr)
}

// QueryArchitect queries the "architect" edge of the JobRelations entity.
func (jr *JobRelations) QueryArchitect() *CompanyEngineerQuery {
	return NewJobRelationsClient(jr.config).QueryArchitect(jr)
}

// QueryController queries the "controller" edge of the JobRelations entity.
func (jr *JobRelations) QueryController() *CompanyEngineerQuery {
	return NewJobRelationsClient(jr.config).QueryController(jr)
}

// QueryMechaniccontroller queries the "mechaniccontroller" edge of the JobRelations entity.
func (jr *JobRelations) QueryMechaniccontroller() *CompanyEngineerQuery {
	return NewJobRelationsClient(jr.config).QueryMechaniccontroller(jr)
}

// QueryElectriccontroller queries the "electriccontroller" edge of the JobRelations entity.
func (jr *JobRelations) QueryElectriccontroller() *CompanyEngineerQuery {
	return NewJobRelationsClient(jr.config).QueryElectriccontroller(jr)
}

// QueryLayers queries the "layers" edge of the JobRelations entity.
func (jr *JobRelations) QueryLayers() *JobLayerQuery {
	return NewJobRelationsClient(jr.config).QueryLayers(jr)
}

// QueryPayments queries the "payments" edge of the JobRelations entity.
func (jr *JobRelations) QueryPayments() *JobPaymentsQuery {
	return NewJobRelationsClient(jr.config).QueryPayments(jr)
}

// Update returns a builder for updating this JobRelations.
// Note that you need to call JobRelations.Unwrap() before calling this method if this JobRelations
// was returned from a transaction, and the transaction was committed or rolled back.
func (jr *JobRelations) Update() *JobRelationsUpdateOne {
	return NewJobRelationsClient(jr.config).UpdateOne(jr)
}

// Unwrap unwraps the JobRelations entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jr *JobRelations) Unwrap() *JobRelations {
	_tx, ok := jr.config.driver.(*txDriver)
	if !ok {
		panic("ent: JobRelations is not a transactional entity")
	}
	jr.config.driver = _tx.drv
	return jr
}

// String implements the fmt.Stringer.
func (jr *JobRelations) String() string {
	var builder strings.Builder
	builder.WriteString("JobRelations(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jr.ID))
	builder.WriteString("yibfNo=")
	builder.WriteString(fmt.Sprintf("%v", jr.YibfNo))
	builder.WriteString(", ")
	builder.WriteString("CreatedAt=")
	builder.WriteString(jr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(jr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedLayers returns the Layers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (jr *JobRelations) NamedLayers(name string) ([]*JobLayer, error) {
	if jr.Edges.namedLayers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := jr.Edges.namedLayers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (jr *JobRelations) appendNamedLayers(name string, edges ...*JobLayer) {
	if jr.Edges.namedLayers == nil {
		jr.Edges.namedLayers = make(map[string][]*JobLayer)
	}
	if len(edges) == 0 {
		jr.Edges.namedLayers[name] = []*JobLayer{}
	} else {
		jr.Edges.namedLayers[name] = append(jr.Edges.namedLayers[name], edges...)
	}
}

// NamedPayments returns the Payments named value or an error if the edge was not
// loaded in eager-loading with this name.
func (jr *JobRelations) NamedPayments(name string) ([]*JobPayments, error) {
	if jr.Edges.namedPayments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := jr.Edges.namedPayments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (jr *JobRelations) appendNamedPayments(name string, edges ...*JobPayments) {
	if jr.Edges.namedPayments == nil {
		jr.Edges.namedPayments = make(map[string][]*JobPayments)
	}
	if len(edges) == 0 {
		jr.Edges.namedPayments[name] = []*JobPayments{}
	} else {
		jr.Edges.namedPayments[name] = append(jr.Edges.namedPayments[name], edges...)
	}
}

// JobRelationsSlice is a parsable slice of JobRelations.
type JobRelationsSlice []*JobRelations
