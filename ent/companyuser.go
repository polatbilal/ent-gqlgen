// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/polatbilal/gqlgen-ent/ent/companydetail"
	"github.com/polatbilal/gqlgen-ent/ent/companyuser"
	"github.com/polatbilal/gqlgen-ent/ent/user"
)

// CompanyUser is the model entity for the CompanyUser schema.
type CompanyUser struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompanyUserQuery when eager-loading is set.
	Edges        CompanyUserEdges `json:"edges"`
	company_id   *int
	user_id      *int
	selectValues sql.SelectValues
}

// CompanyUserEdges holds the relations/edges for other nodes in the graph.
type CompanyUserEdges struct {
	// Company holds the value of the company edge.
	Company *CompanyDetail `json:"company,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompanyUserEdges) CompanyOrErr() (*CompanyDetail, error) {
	if e.Company != nil {
		return e.Company, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: companydetail.Label}
	}
	return nil, &NotLoadedError{edge: "company"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompanyUserEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CompanyUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case companyuser.FieldID:
			values[i] = new(sql.NullInt64)
		case companyuser.ForeignKeys[0]: // company_id
			values[i] = new(sql.NullInt64)
		case companyuser.ForeignKeys[1]: // user_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CompanyUser fields.
func (cu *CompanyUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case companyuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cu.ID = int(value.Int64)
		case companyuser.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_id", value)
			} else if value.Valid {
				cu.company_id = new(int)
				*cu.company_id = int(value.Int64)
			}
		case companyuser.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_id", value)
			} else if value.Valid {
				cu.user_id = new(int)
				*cu.user_id = int(value.Int64)
			}
		default:
			cu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CompanyUser.
// This includes values selected through modifiers, order, etc.
func (cu *CompanyUser) Value(name string) (ent.Value, error) {
	return cu.selectValues.Get(name)
}

// QueryCompany queries the "company" edge of the CompanyUser entity.
func (cu *CompanyUser) QueryCompany() *CompanyDetailQuery {
	return NewCompanyUserClient(cu.config).QueryCompany(cu)
}

// QueryUser queries the "user" edge of the CompanyUser entity.
func (cu *CompanyUser) QueryUser() *UserQuery {
	return NewCompanyUserClient(cu.config).QueryUser(cu)
}

// Update returns a builder for updating this CompanyUser.
// Note that you need to call CompanyUser.Unwrap() before calling this method if this CompanyUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (cu *CompanyUser) Update() *CompanyUserUpdateOne {
	return NewCompanyUserClient(cu.config).UpdateOne(cu)
}

// Unwrap unwraps the CompanyUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cu *CompanyUser) Unwrap() *CompanyUser {
	_tx, ok := cu.config.driver.(*txDriver)
	if !ok {
		panic("ent: CompanyUser is not a transactional entity")
	}
	cu.config.driver = _tx.drv
	return cu
}

// String implements the fmt.Stringer.
func (cu *CompanyUser) String() string {
	var builder strings.Builder
	builder.WriteString("CompanyUser(")
	builder.WriteString(fmt.Sprintf("id=%v", cu.ID))
	builder.WriteByte(')')
	return builder.String()
}

// CompanyUsers is a parsable slice of CompanyUser.
type CompanyUsers []*CompanyUser
