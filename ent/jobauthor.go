// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/polatbilal/gqlgen-ent/ent/jobauthor"
)

// JobAuthor is the model entity for the JobAuthor schema.
type JobAuthor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// YibfNo holds the value of the "yibfNo" field.
	YibfNo int `json:"yibfNo,omitempty"`
	// Static holds the value of the "Static" field.
	Static string `json:"Static,omitempty"`
	// Mechanic holds the value of the "Mechanic" field.
	Mechanic string `json:"Mechanic,omitempty"`
	// Electric holds the value of the "Electric" field.
	Electric string `json:"Electric,omitempty"`
	// Architect holds the value of the "Architect" field.
	Architect string `json:"Architect,omitempty"`
	// GeotechnicalEngineer holds the value of the "GeotechnicalEngineer" field.
	GeotechnicalEngineer string `json:"GeotechnicalEngineer,omitempty"`
	// GeotechnicalGeologist holds the value of the "GeotechnicalGeologist" field.
	GeotechnicalGeologist string `json:"GeotechnicalGeologist,omitempty"`
	// GeotechnicalGeophysicist holds the value of the "GeotechnicalGeophysicist" field.
	GeotechnicalGeophysicist string `json:"GeotechnicalGeophysicist,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobAuthorQuery when eager-loading is set.
	Edges        JobAuthorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// JobAuthorEdges holds the relations/edges for other nodes in the graph.
type JobAuthorEdges struct {
	// Authors holds the value of the authors edge.
	Authors []*JobRelations `json:"authors,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedAuthors map[string][]*JobRelations
}

// AuthorsOrErr returns the Authors value or an error if the edge
// was not loaded in eager-loading.
func (e JobAuthorEdges) AuthorsOrErr() ([]*JobRelations, error) {
	if e.loadedTypes[0] {
		return e.Authors, nil
	}
	return nil, &NotLoadedError{edge: "authors"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobAuthor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobauthor.FieldID, jobauthor.FieldYibfNo:
			values[i] = new(sql.NullInt64)
		case jobauthor.FieldStatic, jobauthor.FieldMechanic, jobauthor.FieldElectric, jobauthor.FieldArchitect, jobauthor.FieldGeotechnicalEngineer, jobauthor.FieldGeotechnicalGeologist, jobauthor.FieldGeotechnicalGeophysicist:
			values[i] = new(sql.NullString)
		case jobauthor.FieldCreatedAt, jobauthor.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobAuthor fields.
func (ja *JobAuthor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobauthor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ja.ID = int(value.Int64)
		case jobauthor.FieldYibfNo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yibfNo", values[i])
			} else if value.Valid {
				ja.YibfNo = int(value.Int64)
			}
		case jobauthor.FieldStatic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Static", values[i])
			} else if value.Valid {
				ja.Static = value.String
			}
		case jobauthor.FieldMechanic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Mechanic", values[i])
			} else if value.Valid {
				ja.Mechanic = value.String
			}
		case jobauthor.FieldElectric:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Electric", values[i])
			} else if value.Valid {
				ja.Electric = value.String
			}
		case jobauthor.FieldArchitect:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Architect", values[i])
			} else if value.Valid {
				ja.Architect = value.String
			}
		case jobauthor.FieldGeotechnicalEngineer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field GeotechnicalEngineer", values[i])
			} else if value.Valid {
				ja.GeotechnicalEngineer = value.String
			}
		case jobauthor.FieldGeotechnicalGeologist:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field GeotechnicalGeologist", values[i])
			} else if value.Valid {
				ja.GeotechnicalGeologist = value.String
			}
		case jobauthor.FieldGeotechnicalGeophysicist:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field GeotechnicalGeophysicist", values[i])
			} else if value.Valid {
				ja.GeotechnicalGeophysicist = value.String
			}
		case jobauthor.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				ja.CreatedAt = value.Time
			}
		case jobauthor.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				ja.UpdatedAt = value.Time
			}
		default:
			ja.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobAuthor.
// This includes values selected through modifiers, order, etc.
func (ja *JobAuthor) Value(name string) (ent.Value, error) {
	return ja.selectValues.Get(name)
}

// QueryAuthors queries the "authors" edge of the JobAuthor entity.
func (ja *JobAuthor) QueryAuthors() *JobRelationsQuery {
	return NewJobAuthorClient(ja.config).QueryAuthors(ja)
}

// Update returns a builder for updating this JobAuthor.
// Note that you need to call JobAuthor.Unwrap() before calling this method if this JobAuthor
// was returned from a transaction, and the transaction was committed or rolled back.
func (ja *JobAuthor) Update() *JobAuthorUpdateOne {
	return NewJobAuthorClient(ja.config).UpdateOne(ja)
}

// Unwrap unwraps the JobAuthor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ja *JobAuthor) Unwrap() *JobAuthor {
	_tx, ok := ja.config.driver.(*txDriver)
	if !ok {
		panic("ent: JobAuthor is not a transactional entity")
	}
	ja.config.driver = _tx.drv
	return ja
}

// String implements the fmt.Stringer.
func (ja *JobAuthor) String() string {
	var builder strings.Builder
	builder.WriteString("JobAuthor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ja.ID))
	builder.WriteString("yibfNo=")
	builder.WriteString(fmt.Sprintf("%v", ja.YibfNo))
	builder.WriteString(", ")
	builder.WriteString("Static=")
	builder.WriteString(ja.Static)
	builder.WriteString(", ")
	builder.WriteString("Mechanic=")
	builder.WriteString(ja.Mechanic)
	builder.WriteString(", ")
	builder.WriteString("Electric=")
	builder.WriteString(ja.Electric)
	builder.WriteString(", ")
	builder.WriteString("Architect=")
	builder.WriteString(ja.Architect)
	builder.WriteString(", ")
	builder.WriteString("GeotechnicalEngineer=")
	builder.WriteString(ja.GeotechnicalEngineer)
	builder.WriteString(", ")
	builder.WriteString("GeotechnicalGeologist=")
	builder.WriteString(ja.GeotechnicalGeologist)
	builder.WriteString(", ")
	builder.WriteString("GeotechnicalGeophysicist=")
	builder.WriteString(ja.GeotechnicalGeophysicist)
	builder.WriteString(", ")
	builder.WriteString("CreatedAt=")
	builder.WriteString(ja.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(ja.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAuthors returns the Authors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ja *JobAuthor) NamedAuthors(name string) ([]*JobRelations, error) {
	if ja.Edges.namedAuthors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ja.Edges.namedAuthors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ja *JobAuthor) appendNamedAuthors(name string, edges ...*JobRelations) {
	if ja.Edges.namedAuthors == nil {
		ja.Edges.namedAuthors = make(map[string][]*JobRelations)
	}
	if len(edges) == 0 {
		ja.Edges.namedAuthors[name] = []*JobRelations{}
	} else {
		ja.Edges.namedAuthors[name] = append(ja.Edges.namedAuthors[name], edges...)
	}
}

// JobAuthors is a parsable slice of JobAuthor.
type JobAuthors []*JobAuthor
