// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/polatbilal/gqlgen-ent/ent/companydetail"
	"github.com/polatbilal/gqlgen-ent/ent/companyengineer"
	"github.com/polatbilal/gqlgen-ent/ent/jobauthor"
	"github.com/polatbilal/gqlgen-ent/ent/jobcontractor"
	"github.com/polatbilal/gqlgen-ent/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/ent/joblayer"
	"github.com/polatbilal/gqlgen-ent/ent/jobowner"
	"github.com/polatbilal/gqlgen-ent/ent/jobpayments"
	"github.com/polatbilal/gqlgen-ent/ent/jobprogress"
	"github.com/polatbilal/gqlgen-ent/ent/jobrelations"
	"github.com/polatbilal/gqlgen-ent/ent/jobsupervisor"
	"github.com/polatbilal/gqlgen-ent/ent/predicate"
)

// JobRelationsUpdate is the builder for updating JobRelations entities.
type JobRelationsUpdate struct {
	config
	hooks    []Hook
	mutation *JobRelationsMutation
}

// Where appends a list predicates to the JobRelationsUpdate builder.
func (jru *JobRelationsUpdate) Where(ps ...predicate.JobRelations) *JobRelationsUpdate {
	jru.mutation.Where(ps...)
	return jru
}

// SetYibfNo sets the "yibfNo" field.
func (jru *JobRelationsUpdate) SetYibfNo(i int) *JobRelationsUpdate {
	jru.mutation.ResetYibfNo()
	jru.mutation.SetYibfNo(i)
	return jru
}

// SetNillableYibfNo sets the "yibfNo" field if the given value is not nil.
func (jru *JobRelationsUpdate) SetNillableYibfNo(i *int) *JobRelationsUpdate {
	if i != nil {
		jru.SetYibfNo(*i)
	}
	return jru
}

// AddYibfNo adds i to the "yibfNo" field.
func (jru *JobRelationsUpdate) AddYibfNo(i int) *JobRelationsUpdate {
	jru.mutation.AddYibfNo(i)
	return jru
}

// SetCreatedAt sets the "CreatedAt" field.
func (jru *JobRelationsUpdate) SetCreatedAt(t time.Time) *JobRelationsUpdate {
	jru.mutation.SetCreatedAt(t)
	return jru
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (jru *JobRelationsUpdate) SetNillableCreatedAt(t *time.Time) *JobRelationsUpdate {
	if t != nil {
		jru.SetCreatedAt(*t)
	}
	return jru
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (jru *JobRelationsUpdate) SetUpdatedAt(t time.Time) *JobRelationsUpdate {
	jru.mutation.SetUpdatedAt(t)
	return jru
}

// SetJobID sets the "job" edge to the JobDetail entity by ID.
func (jru *JobRelationsUpdate) SetJobID(id int) *JobRelationsUpdate {
	jru.mutation.SetJobID(id)
	return jru
}

// SetNillableJobID sets the "job" edge to the JobDetail entity by ID if the given value is not nil.
func (jru *JobRelationsUpdate) SetNillableJobID(id *int) *JobRelationsUpdate {
	if id != nil {
		jru = jru.SetJobID(*id)
	}
	return jru
}

// SetJob sets the "job" edge to the JobDetail entity.
func (jru *JobRelationsUpdate) SetJob(j *JobDetail) *JobRelationsUpdate {
	return jru.SetJobID(j.ID)
}

// SetOwnerID sets the "owner" edge to the JobOwner entity by ID.
func (jru *JobRelationsUpdate) SetOwnerID(id int) *JobRelationsUpdate {
	jru.mutation.SetOwnerID(id)
	return jru
}

// SetNillableOwnerID sets the "owner" edge to the JobOwner entity by ID if the given value is not nil.
func (jru *JobRelationsUpdate) SetNillableOwnerID(id *int) *JobRelationsUpdate {
	if id != nil {
		jru = jru.SetOwnerID(*id)
	}
	return jru
}

// SetOwner sets the "owner" edge to the JobOwner entity.
func (jru *JobRelationsUpdate) SetOwner(j *JobOwner) *JobRelationsUpdate {
	return jru.SetOwnerID(j.ID)
}

// SetAuthorID sets the "author" edge to the JobAuthor entity by ID.
func (jru *JobRelationsUpdate) SetAuthorID(id int) *JobRelationsUpdate {
	jru.mutation.SetAuthorID(id)
	return jru
}

// SetNillableAuthorID sets the "author" edge to the JobAuthor entity by ID if the given value is not nil.
func (jru *JobRelationsUpdate) SetNillableAuthorID(id *int) *JobRelationsUpdate {
	if id != nil {
		jru = jru.SetAuthorID(*id)
	}
	return jru
}

// SetAuthor sets the "author" edge to the JobAuthor entity.
func (jru *JobRelationsUpdate) SetAuthor(j *JobAuthor) *JobRelationsUpdate {
	return jru.SetAuthorID(j.ID)
}

// SetCompanyID sets the "company" edge to the CompanyDetail entity by ID.
func (jru *JobRelationsUpdate) SetCompanyID(id int) *JobRelationsUpdate {
	jru.mutation.SetCompanyID(id)
	return jru
}

// SetNillableCompanyID sets the "company" edge to the CompanyDetail entity by ID if the given value is not nil.
func (jru *JobRelationsUpdate) SetNillableCompanyID(id *int) *JobRelationsUpdate {
	if id != nil {
		jru = jru.SetCompanyID(*id)
	}
	return jru
}

// SetCompany sets the "company" edge to the CompanyDetail entity.
func (jru *JobRelationsUpdate) SetCompany(c *CompanyDetail) *JobRelationsUpdate {
	return jru.SetCompanyID(c.ID)
}

// SetProgressID sets the "progress" edge to the JobProgress entity by ID.
func (jru *JobRelationsUpdate) SetProgressID(id int) *JobRelationsUpdate {
	jru.mutation.SetProgressID(id)
	return jru
}

// SetNillableProgressID sets the "progress" edge to the JobProgress entity by ID if the given value is not nil.
func (jru *JobRelationsUpdate) SetNillableProgressID(id *int) *JobRelationsUpdate {
	if id != nil {
		jru = jru.SetProgressID(*id)
	}
	return jru
}

// SetProgress sets the "progress" edge to the JobProgress entity.
func (jru *JobRelationsUpdate) SetProgress(j *JobProgress) *JobRelationsUpdate {
	return jru.SetProgressID(j.ID)
}

// SetContractorID sets the "contractor" edge to the JobContractor entity by ID.
func (jru *JobRelationsUpdate) SetContractorID(id int) *JobRelationsUpdate {
	jru.mutation.SetContractorID(id)
	return jru
}

// SetNillableContractorID sets the "contractor" edge to the JobContractor entity by ID if the given value is not nil.
func (jru *JobRelationsUpdate) SetNillableContractorID(id *int) *JobRelationsUpdate {
	if id != nil {
		jru = jru.SetContractorID(*id)
	}
	return jru
}

// SetContractor sets the "contractor" edge to the JobContractor entity.
func (jru *JobRelationsUpdate) SetContractor(j *JobContractor) *JobRelationsUpdate {
	return jru.SetContractorID(j.ID)
}

// SetSupervisorID sets the "supervisor" edge to the JobSupervisor entity by ID.
func (jru *JobRelationsUpdate) SetSupervisorID(id int) *JobRelationsUpdate {
	jru.mutation.SetSupervisorID(id)
	return jru
}

// SetNillableSupervisorID sets the "supervisor" edge to the JobSupervisor entity by ID if the given value is not nil.
func (jru *JobRelationsUpdate) SetNillableSupervisorID(id *int) *JobRelationsUpdate {
	if id != nil {
		jru = jru.SetSupervisorID(*id)
	}
	return jru
}

// SetSupervisor sets the "supervisor" edge to the JobSupervisor entity.
func (jru *JobRelationsUpdate) SetSupervisor(j *JobSupervisor) *JobRelationsUpdate {
	return jru.SetSupervisorID(j.ID)
}

// SetStaticID sets the "static" edge to the CompanyEngineer entity by ID.
func (jru *JobRelationsUpdate) SetStaticID(id int) *JobRelationsUpdate {
	jru.mutation.SetStaticID(id)
	return jru
}

// SetNillableStaticID sets the "static" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jru *JobRelationsUpdate) SetNillableStaticID(id *int) *JobRelationsUpdate {
	if id != nil {
		jru = jru.SetStaticID(*id)
	}
	return jru
}

// SetStatic sets the "static" edge to the CompanyEngineer entity.
func (jru *JobRelationsUpdate) SetStatic(c *CompanyEngineer) *JobRelationsUpdate {
	return jru.SetStaticID(c.ID)
}

// SetMechanicID sets the "mechanic" edge to the CompanyEngineer entity by ID.
func (jru *JobRelationsUpdate) SetMechanicID(id int) *JobRelationsUpdate {
	jru.mutation.SetMechanicID(id)
	return jru
}

// SetNillableMechanicID sets the "mechanic" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jru *JobRelationsUpdate) SetNillableMechanicID(id *int) *JobRelationsUpdate {
	if id != nil {
		jru = jru.SetMechanicID(*id)
	}
	return jru
}

// SetMechanic sets the "mechanic" edge to the CompanyEngineer entity.
func (jru *JobRelationsUpdate) SetMechanic(c *CompanyEngineer) *JobRelationsUpdate {
	return jru.SetMechanicID(c.ID)
}

// SetElectricID sets the "electric" edge to the CompanyEngineer entity by ID.
func (jru *JobRelationsUpdate) SetElectricID(id int) *JobRelationsUpdate {
	jru.mutation.SetElectricID(id)
	return jru
}

// SetNillableElectricID sets the "electric" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jru *JobRelationsUpdate) SetNillableElectricID(id *int) *JobRelationsUpdate {
	if id != nil {
		jru = jru.SetElectricID(*id)
	}
	return jru
}

// SetElectric sets the "electric" edge to the CompanyEngineer entity.
func (jru *JobRelationsUpdate) SetElectric(c *CompanyEngineer) *JobRelationsUpdate {
	return jru.SetElectricID(c.ID)
}

// SetInspectorID sets the "inspector" edge to the CompanyEngineer entity by ID.
func (jru *JobRelationsUpdate) SetInspectorID(id int) *JobRelationsUpdate {
	jru.mutation.SetInspectorID(id)
	return jru
}

// SetNillableInspectorID sets the "inspector" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jru *JobRelationsUpdate) SetNillableInspectorID(id *int) *JobRelationsUpdate {
	if id != nil {
		jru = jru.SetInspectorID(*id)
	}
	return jru
}

// SetInspector sets the "inspector" edge to the CompanyEngineer entity.
func (jru *JobRelationsUpdate) SetInspector(c *CompanyEngineer) *JobRelationsUpdate {
	return jru.SetInspectorID(c.ID)
}

// SetArchitectID sets the "architect" edge to the CompanyEngineer entity by ID.
func (jru *JobRelationsUpdate) SetArchitectID(id int) *JobRelationsUpdate {
	jru.mutation.SetArchitectID(id)
	return jru
}

// SetNillableArchitectID sets the "architect" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jru *JobRelationsUpdate) SetNillableArchitectID(id *int) *JobRelationsUpdate {
	if id != nil {
		jru = jru.SetArchitectID(*id)
	}
	return jru
}

// SetArchitect sets the "architect" edge to the CompanyEngineer entity.
func (jru *JobRelationsUpdate) SetArchitect(c *CompanyEngineer) *JobRelationsUpdate {
	return jru.SetArchitectID(c.ID)
}

// SetControllerID sets the "controller" edge to the CompanyEngineer entity by ID.
func (jru *JobRelationsUpdate) SetControllerID(id int) *JobRelationsUpdate {
	jru.mutation.SetControllerID(id)
	return jru
}

// SetNillableControllerID sets the "controller" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jru *JobRelationsUpdate) SetNillableControllerID(id *int) *JobRelationsUpdate {
	if id != nil {
		jru = jru.SetControllerID(*id)
	}
	return jru
}

// SetController sets the "controller" edge to the CompanyEngineer entity.
func (jru *JobRelationsUpdate) SetController(c *CompanyEngineer) *JobRelationsUpdate {
	return jru.SetControllerID(c.ID)
}

// SetMechaniccontrollerID sets the "mechaniccontroller" edge to the CompanyEngineer entity by ID.
func (jru *JobRelationsUpdate) SetMechaniccontrollerID(id int) *JobRelationsUpdate {
	jru.mutation.SetMechaniccontrollerID(id)
	return jru
}

// SetNillableMechaniccontrollerID sets the "mechaniccontroller" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jru *JobRelationsUpdate) SetNillableMechaniccontrollerID(id *int) *JobRelationsUpdate {
	if id != nil {
		jru = jru.SetMechaniccontrollerID(*id)
	}
	return jru
}

// SetMechaniccontroller sets the "mechaniccontroller" edge to the CompanyEngineer entity.
func (jru *JobRelationsUpdate) SetMechaniccontroller(c *CompanyEngineer) *JobRelationsUpdate {
	return jru.SetMechaniccontrollerID(c.ID)
}

// SetElectriccontrollerID sets the "electriccontroller" edge to the CompanyEngineer entity by ID.
func (jru *JobRelationsUpdate) SetElectriccontrollerID(id int) *JobRelationsUpdate {
	jru.mutation.SetElectriccontrollerID(id)
	return jru
}

// SetNillableElectriccontrollerID sets the "electriccontroller" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jru *JobRelationsUpdate) SetNillableElectriccontrollerID(id *int) *JobRelationsUpdate {
	if id != nil {
		jru = jru.SetElectriccontrollerID(*id)
	}
	return jru
}

// SetElectriccontroller sets the "electriccontroller" edge to the CompanyEngineer entity.
func (jru *JobRelationsUpdate) SetElectriccontroller(c *CompanyEngineer) *JobRelationsUpdate {
	return jru.SetElectriccontrollerID(c.ID)
}

// AddLayerIDs adds the "layers" edge to the JobLayer entity by IDs.
func (jru *JobRelationsUpdate) AddLayerIDs(ids ...int) *JobRelationsUpdate {
	jru.mutation.AddLayerIDs(ids...)
	return jru
}

// AddLayers adds the "layers" edges to the JobLayer entity.
func (jru *JobRelationsUpdate) AddLayers(j ...*JobLayer) *JobRelationsUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jru.AddLayerIDs(ids...)
}

// AddPaymentIDs adds the "payments" edge to the JobPayments entity by IDs.
func (jru *JobRelationsUpdate) AddPaymentIDs(ids ...int) *JobRelationsUpdate {
	jru.mutation.AddPaymentIDs(ids...)
	return jru
}

// AddPayments adds the "payments" edges to the JobPayments entity.
func (jru *JobRelationsUpdate) AddPayments(j ...*JobPayments) *JobRelationsUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jru.AddPaymentIDs(ids...)
}

// Mutation returns the JobRelationsMutation object of the builder.
func (jru *JobRelationsUpdate) Mutation() *JobRelationsMutation {
	return jru.mutation
}

// ClearJob clears the "job" edge to the JobDetail entity.
func (jru *JobRelationsUpdate) ClearJob() *JobRelationsUpdate {
	jru.mutation.ClearJob()
	return jru
}

// ClearOwner clears the "owner" edge to the JobOwner entity.
func (jru *JobRelationsUpdate) ClearOwner() *JobRelationsUpdate {
	jru.mutation.ClearOwner()
	return jru
}

// ClearAuthor clears the "author" edge to the JobAuthor entity.
func (jru *JobRelationsUpdate) ClearAuthor() *JobRelationsUpdate {
	jru.mutation.ClearAuthor()
	return jru
}

// ClearCompany clears the "company" edge to the CompanyDetail entity.
func (jru *JobRelationsUpdate) ClearCompany() *JobRelationsUpdate {
	jru.mutation.ClearCompany()
	return jru
}

// ClearProgress clears the "progress" edge to the JobProgress entity.
func (jru *JobRelationsUpdate) ClearProgress() *JobRelationsUpdate {
	jru.mutation.ClearProgress()
	return jru
}

// ClearContractor clears the "contractor" edge to the JobContractor entity.
func (jru *JobRelationsUpdate) ClearContractor() *JobRelationsUpdate {
	jru.mutation.ClearContractor()
	return jru
}

// ClearSupervisor clears the "supervisor" edge to the JobSupervisor entity.
func (jru *JobRelationsUpdate) ClearSupervisor() *JobRelationsUpdate {
	jru.mutation.ClearSupervisor()
	return jru
}

// ClearStatic clears the "static" edge to the CompanyEngineer entity.
func (jru *JobRelationsUpdate) ClearStatic() *JobRelationsUpdate {
	jru.mutation.ClearStatic()
	return jru
}

// ClearMechanic clears the "mechanic" edge to the CompanyEngineer entity.
func (jru *JobRelationsUpdate) ClearMechanic() *JobRelationsUpdate {
	jru.mutation.ClearMechanic()
	return jru
}

// ClearElectric clears the "electric" edge to the CompanyEngineer entity.
func (jru *JobRelationsUpdate) ClearElectric() *JobRelationsUpdate {
	jru.mutation.ClearElectric()
	return jru
}

// ClearInspector clears the "inspector" edge to the CompanyEngineer entity.
func (jru *JobRelationsUpdate) ClearInspector() *JobRelationsUpdate {
	jru.mutation.ClearInspector()
	return jru
}

// ClearArchitect clears the "architect" edge to the CompanyEngineer entity.
func (jru *JobRelationsUpdate) ClearArchitect() *JobRelationsUpdate {
	jru.mutation.ClearArchitect()
	return jru
}

// ClearController clears the "controller" edge to the CompanyEngineer entity.
func (jru *JobRelationsUpdate) ClearController() *JobRelationsUpdate {
	jru.mutation.ClearController()
	return jru
}

// ClearMechaniccontroller clears the "mechaniccontroller" edge to the CompanyEngineer entity.
func (jru *JobRelationsUpdate) ClearMechaniccontroller() *JobRelationsUpdate {
	jru.mutation.ClearMechaniccontroller()
	return jru
}

// ClearElectriccontroller clears the "electriccontroller" edge to the CompanyEngineer entity.
func (jru *JobRelationsUpdate) ClearElectriccontroller() *JobRelationsUpdate {
	jru.mutation.ClearElectriccontroller()
	return jru
}

// ClearLayers clears all "layers" edges to the JobLayer entity.
func (jru *JobRelationsUpdate) ClearLayers() *JobRelationsUpdate {
	jru.mutation.ClearLayers()
	return jru
}

// RemoveLayerIDs removes the "layers" edge to JobLayer entities by IDs.
func (jru *JobRelationsUpdate) RemoveLayerIDs(ids ...int) *JobRelationsUpdate {
	jru.mutation.RemoveLayerIDs(ids...)
	return jru
}

// RemoveLayers removes "layers" edges to JobLayer entities.
func (jru *JobRelationsUpdate) RemoveLayers(j ...*JobLayer) *JobRelationsUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jru.RemoveLayerIDs(ids...)
}

// ClearPayments clears all "payments" edges to the JobPayments entity.
func (jru *JobRelationsUpdate) ClearPayments() *JobRelationsUpdate {
	jru.mutation.ClearPayments()
	return jru
}

// RemovePaymentIDs removes the "payments" edge to JobPayments entities by IDs.
func (jru *JobRelationsUpdate) RemovePaymentIDs(ids ...int) *JobRelationsUpdate {
	jru.mutation.RemovePaymentIDs(ids...)
	return jru
}

// RemovePayments removes "payments" edges to JobPayments entities.
func (jru *JobRelationsUpdate) RemovePayments(j ...*JobPayments) *JobRelationsUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jru.RemovePaymentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jru *JobRelationsUpdate) Save(ctx context.Context) (int, error) {
	jru.defaults()
	return withHooks(ctx, jru.sqlSave, jru.mutation, jru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jru *JobRelationsUpdate) SaveX(ctx context.Context) int {
	affected, err := jru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jru *JobRelationsUpdate) Exec(ctx context.Context) error {
	_, err := jru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jru *JobRelationsUpdate) ExecX(ctx context.Context) {
	if err := jru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jru *JobRelationsUpdate) defaults() {
	if _, ok := jru.mutation.UpdatedAt(); !ok {
		v := jobrelations.UpdateDefaultUpdatedAt()
		jru.mutation.SetUpdatedAt(v)
	}
}

func (jru *JobRelationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(jobrelations.Table, jobrelations.Columns, sqlgraph.NewFieldSpec(jobrelations.FieldID, field.TypeInt))
	if ps := jru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jru.mutation.YibfNo(); ok {
		_spec.SetField(jobrelations.FieldYibfNo, field.TypeInt, value)
	}
	if value, ok := jru.mutation.AddedYibfNo(); ok {
		_spec.AddField(jobrelations.FieldYibfNo, field.TypeInt, value)
	}
	if value, ok := jru.mutation.CreatedAt(); ok {
		_spec.SetField(jobrelations.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := jru.mutation.UpdatedAt(); ok {
		_spec.SetField(jobrelations.FieldUpdatedAt, field.TypeTime, value)
	}
	if jru.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   jobrelations.JobTable,
			Columns: []string{jobrelations.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   jobrelations.JobTable,
			Columns: []string{jobrelations.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jru.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.OwnerTable,
			Columns: []string{jobrelations.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobowner.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.OwnerTable,
			Columns: []string{jobrelations.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobowner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jru.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.AuthorTable,
			Columns: []string{jobrelations.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobauthor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.AuthorTable,
			Columns: []string{jobrelations.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobauthor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jru.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.CompanyTable,
			Columns: []string{jobrelations.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.CompanyTable,
			Columns: []string{jobrelations.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jru.mutation.ProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ProgressTable,
			Columns: []string{jobrelations.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.ProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ProgressTable,
			Columns: []string{jobrelations.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jru.mutation.ContractorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ContractorTable,
			Columns: []string{jobrelations.ContractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobcontractor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.ContractorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ContractorTable,
			Columns: []string{jobrelations.ContractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobcontractor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jru.mutation.SupervisorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.SupervisorTable,
			Columns: []string{jobrelations.SupervisorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobsupervisor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.SupervisorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.SupervisorTable,
			Columns: []string{jobrelations.SupervisorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobsupervisor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jru.mutation.StaticCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.StaticTable,
			Columns: []string{jobrelations.StaticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.StaticIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.StaticTable,
			Columns: []string{jobrelations.StaticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jru.mutation.MechanicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.MechanicTable,
			Columns: []string{jobrelations.MechanicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.MechanicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.MechanicTable,
			Columns: []string{jobrelations.MechanicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jru.mutation.ElectricCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ElectricTable,
			Columns: []string{jobrelations.ElectricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.ElectricIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ElectricTable,
			Columns: []string{jobrelations.ElectricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jru.mutation.InspectorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.InspectorTable,
			Columns: []string{jobrelations.InspectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.InspectorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.InspectorTable,
			Columns: []string{jobrelations.InspectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jru.mutation.ArchitectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ArchitectTable,
			Columns: []string{jobrelations.ArchitectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.ArchitectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ArchitectTable,
			Columns: []string{jobrelations.ArchitectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jru.mutation.ControllerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ControllerTable,
			Columns: []string{jobrelations.ControllerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.ControllerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ControllerTable,
			Columns: []string{jobrelations.ControllerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jru.mutation.MechaniccontrollerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.MechaniccontrollerTable,
			Columns: []string{jobrelations.MechaniccontrollerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.MechaniccontrollerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.MechaniccontrollerTable,
			Columns: []string{jobrelations.MechaniccontrollerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jru.mutation.ElectriccontrollerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ElectriccontrollerTable,
			Columns: []string{jobrelations.ElectriccontrollerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.ElectriccontrollerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ElectriccontrollerTable,
			Columns: []string{jobrelations.ElectriccontrollerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jru.mutation.LayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobrelations.LayersTable,
			Columns: []string{jobrelations.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblayer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.RemovedLayersIDs(); len(nodes) > 0 && !jru.mutation.LayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobrelations.LayersTable,
			Columns: []string{jobrelations.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.LayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobrelations.LayersTable,
			Columns: []string{jobrelations.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jru.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobrelations.PaymentsTable,
			Columns: []string{jobrelations.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobpayments.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !jru.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobrelations.PaymentsTable,
			Columns: []string{jobrelations.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobpayments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jru.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobrelations.PaymentsTable,
			Columns: []string{jobrelations.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobpayments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobrelations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jru.mutation.done = true
	return n, nil
}

// JobRelationsUpdateOne is the builder for updating a single JobRelations entity.
type JobRelationsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobRelationsMutation
}

// SetYibfNo sets the "yibfNo" field.
func (jruo *JobRelationsUpdateOne) SetYibfNo(i int) *JobRelationsUpdateOne {
	jruo.mutation.ResetYibfNo()
	jruo.mutation.SetYibfNo(i)
	return jruo
}

// SetNillableYibfNo sets the "yibfNo" field if the given value is not nil.
func (jruo *JobRelationsUpdateOne) SetNillableYibfNo(i *int) *JobRelationsUpdateOne {
	if i != nil {
		jruo.SetYibfNo(*i)
	}
	return jruo
}

// AddYibfNo adds i to the "yibfNo" field.
func (jruo *JobRelationsUpdateOne) AddYibfNo(i int) *JobRelationsUpdateOne {
	jruo.mutation.AddYibfNo(i)
	return jruo
}

// SetCreatedAt sets the "CreatedAt" field.
func (jruo *JobRelationsUpdateOne) SetCreatedAt(t time.Time) *JobRelationsUpdateOne {
	jruo.mutation.SetCreatedAt(t)
	return jruo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (jruo *JobRelationsUpdateOne) SetNillableCreatedAt(t *time.Time) *JobRelationsUpdateOne {
	if t != nil {
		jruo.SetCreatedAt(*t)
	}
	return jruo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (jruo *JobRelationsUpdateOne) SetUpdatedAt(t time.Time) *JobRelationsUpdateOne {
	jruo.mutation.SetUpdatedAt(t)
	return jruo
}

// SetJobID sets the "job" edge to the JobDetail entity by ID.
func (jruo *JobRelationsUpdateOne) SetJobID(id int) *JobRelationsUpdateOne {
	jruo.mutation.SetJobID(id)
	return jruo
}

// SetNillableJobID sets the "job" edge to the JobDetail entity by ID if the given value is not nil.
func (jruo *JobRelationsUpdateOne) SetNillableJobID(id *int) *JobRelationsUpdateOne {
	if id != nil {
		jruo = jruo.SetJobID(*id)
	}
	return jruo
}

// SetJob sets the "job" edge to the JobDetail entity.
func (jruo *JobRelationsUpdateOne) SetJob(j *JobDetail) *JobRelationsUpdateOne {
	return jruo.SetJobID(j.ID)
}

// SetOwnerID sets the "owner" edge to the JobOwner entity by ID.
func (jruo *JobRelationsUpdateOne) SetOwnerID(id int) *JobRelationsUpdateOne {
	jruo.mutation.SetOwnerID(id)
	return jruo
}

// SetNillableOwnerID sets the "owner" edge to the JobOwner entity by ID if the given value is not nil.
func (jruo *JobRelationsUpdateOne) SetNillableOwnerID(id *int) *JobRelationsUpdateOne {
	if id != nil {
		jruo = jruo.SetOwnerID(*id)
	}
	return jruo
}

// SetOwner sets the "owner" edge to the JobOwner entity.
func (jruo *JobRelationsUpdateOne) SetOwner(j *JobOwner) *JobRelationsUpdateOne {
	return jruo.SetOwnerID(j.ID)
}

// SetAuthorID sets the "author" edge to the JobAuthor entity by ID.
func (jruo *JobRelationsUpdateOne) SetAuthorID(id int) *JobRelationsUpdateOne {
	jruo.mutation.SetAuthorID(id)
	return jruo
}

// SetNillableAuthorID sets the "author" edge to the JobAuthor entity by ID if the given value is not nil.
func (jruo *JobRelationsUpdateOne) SetNillableAuthorID(id *int) *JobRelationsUpdateOne {
	if id != nil {
		jruo = jruo.SetAuthorID(*id)
	}
	return jruo
}

// SetAuthor sets the "author" edge to the JobAuthor entity.
func (jruo *JobRelationsUpdateOne) SetAuthor(j *JobAuthor) *JobRelationsUpdateOne {
	return jruo.SetAuthorID(j.ID)
}

// SetCompanyID sets the "company" edge to the CompanyDetail entity by ID.
func (jruo *JobRelationsUpdateOne) SetCompanyID(id int) *JobRelationsUpdateOne {
	jruo.mutation.SetCompanyID(id)
	return jruo
}

// SetNillableCompanyID sets the "company" edge to the CompanyDetail entity by ID if the given value is not nil.
func (jruo *JobRelationsUpdateOne) SetNillableCompanyID(id *int) *JobRelationsUpdateOne {
	if id != nil {
		jruo = jruo.SetCompanyID(*id)
	}
	return jruo
}

// SetCompany sets the "company" edge to the CompanyDetail entity.
func (jruo *JobRelationsUpdateOne) SetCompany(c *CompanyDetail) *JobRelationsUpdateOne {
	return jruo.SetCompanyID(c.ID)
}

// SetProgressID sets the "progress" edge to the JobProgress entity by ID.
func (jruo *JobRelationsUpdateOne) SetProgressID(id int) *JobRelationsUpdateOne {
	jruo.mutation.SetProgressID(id)
	return jruo
}

// SetNillableProgressID sets the "progress" edge to the JobProgress entity by ID if the given value is not nil.
func (jruo *JobRelationsUpdateOne) SetNillableProgressID(id *int) *JobRelationsUpdateOne {
	if id != nil {
		jruo = jruo.SetProgressID(*id)
	}
	return jruo
}

// SetProgress sets the "progress" edge to the JobProgress entity.
func (jruo *JobRelationsUpdateOne) SetProgress(j *JobProgress) *JobRelationsUpdateOne {
	return jruo.SetProgressID(j.ID)
}

// SetContractorID sets the "contractor" edge to the JobContractor entity by ID.
func (jruo *JobRelationsUpdateOne) SetContractorID(id int) *JobRelationsUpdateOne {
	jruo.mutation.SetContractorID(id)
	return jruo
}

// SetNillableContractorID sets the "contractor" edge to the JobContractor entity by ID if the given value is not nil.
func (jruo *JobRelationsUpdateOne) SetNillableContractorID(id *int) *JobRelationsUpdateOne {
	if id != nil {
		jruo = jruo.SetContractorID(*id)
	}
	return jruo
}

// SetContractor sets the "contractor" edge to the JobContractor entity.
func (jruo *JobRelationsUpdateOne) SetContractor(j *JobContractor) *JobRelationsUpdateOne {
	return jruo.SetContractorID(j.ID)
}

// SetSupervisorID sets the "supervisor" edge to the JobSupervisor entity by ID.
func (jruo *JobRelationsUpdateOne) SetSupervisorID(id int) *JobRelationsUpdateOne {
	jruo.mutation.SetSupervisorID(id)
	return jruo
}

// SetNillableSupervisorID sets the "supervisor" edge to the JobSupervisor entity by ID if the given value is not nil.
func (jruo *JobRelationsUpdateOne) SetNillableSupervisorID(id *int) *JobRelationsUpdateOne {
	if id != nil {
		jruo = jruo.SetSupervisorID(*id)
	}
	return jruo
}

// SetSupervisor sets the "supervisor" edge to the JobSupervisor entity.
func (jruo *JobRelationsUpdateOne) SetSupervisor(j *JobSupervisor) *JobRelationsUpdateOne {
	return jruo.SetSupervisorID(j.ID)
}

// SetStaticID sets the "static" edge to the CompanyEngineer entity by ID.
func (jruo *JobRelationsUpdateOne) SetStaticID(id int) *JobRelationsUpdateOne {
	jruo.mutation.SetStaticID(id)
	return jruo
}

// SetNillableStaticID sets the "static" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jruo *JobRelationsUpdateOne) SetNillableStaticID(id *int) *JobRelationsUpdateOne {
	if id != nil {
		jruo = jruo.SetStaticID(*id)
	}
	return jruo
}

// SetStatic sets the "static" edge to the CompanyEngineer entity.
func (jruo *JobRelationsUpdateOne) SetStatic(c *CompanyEngineer) *JobRelationsUpdateOne {
	return jruo.SetStaticID(c.ID)
}

// SetMechanicID sets the "mechanic" edge to the CompanyEngineer entity by ID.
func (jruo *JobRelationsUpdateOne) SetMechanicID(id int) *JobRelationsUpdateOne {
	jruo.mutation.SetMechanicID(id)
	return jruo
}

// SetNillableMechanicID sets the "mechanic" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jruo *JobRelationsUpdateOne) SetNillableMechanicID(id *int) *JobRelationsUpdateOne {
	if id != nil {
		jruo = jruo.SetMechanicID(*id)
	}
	return jruo
}

// SetMechanic sets the "mechanic" edge to the CompanyEngineer entity.
func (jruo *JobRelationsUpdateOne) SetMechanic(c *CompanyEngineer) *JobRelationsUpdateOne {
	return jruo.SetMechanicID(c.ID)
}

// SetElectricID sets the "electric" edge to the CompanyEngineer entity by ID.
func (jruo *JobRelationsUpdateOne) SetElectricID(id int) *JobRelationsUpdateOne {
	jruo.mutation.SetElectricID(id)
	return jruo
}

// SetNillableElectricID sets the "electric" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jruo *JobRelationsUpdateOne) SetNillableElectricID(id *int) *JobRelationsUpdateOne {
	if id != nil {
		jruo = jruo.SetElectricID(*id)
	}
	return jruo
}

// SetElectric sets the "electric" edge to the CompanyEngineer entity.
func (jruo *JobRelationsUpdateOne) SetElectric(c *CompanyEngineer) *JobRelationsUpdateOne {
	return jruo.SetElectricID(c.ID)
}

// SetInspectorID sets the "inspector" edge to the CompanyEngineer entity by ID.
func (jruo *JobRelationsUpdateOne) SetInspectorID(id int) *JobRelationsUpdateOne {
	jruo.mutation.SetInspectorID(id)
	return jruo
}

// SetNillableInspectorID sets the "inspector" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jruo *JobRelationsUpdateOne) SetNillableInspectorID(id *int) *JobRelationsUpdateOne {
	if id != nil {
		jruo = jruo.SetInspectorID(*id)
	}
	return jruo
}

// SetInspector sets the "inspector" edge to the CompanyEngineer entity.
func (jruo *JobRelationsUpdateOne) SetInspector(c *CompanyEngineer) *JobRelationsUpdateOne {
	return jruo.SetInspectorID(c.ID)
}

// SetArchitectID sets the "architect" edge to the CompanyEngineer entity by ID.
func (jruo *JobRelationsUpdateOne) SetArchitectID(id int) *JobRelationsUpdateOne {
	jruo.mutation.SetArchitectID(id)
	return jruo
}

// SetNillableArchitectID sets the "architect" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jruo *JobRelationsUpdateOne) SetNillableArchitectID(id *int) *JobRelationsUpdateOne {
	if id != nil {
		jruo = jruo.SetArchitectID(*id)
	}
	return jruo
}

// SetArchitect sets the "architect" edge to the CompanyEngineer entity.
func (jruo *JobRelationsUpdateOne) SetArchitect(c *CompanyEngineer) *JobRelationsUpdateOne {
	return jruo.SetArchitectID(c.ID)
}

// SetControllerID sets the "controller" edge to the CompanyEngineer entity by ID.
func (jruo *JobRelationsUpdateOne) SetControllerID(id int) *JobRelationsUpdateOne {
	jruo.mutation.SetControllerID(id)
	return jruo
}

// SetNillableControllerID sets the "controller" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jruo *JobRelationsUpdateOne) SetNillableControllerID(id *int) *JobRelationsUpdateOne {
	if id != nil {
		jruo = jruo.SetControllerID(*id)
	}
	return jruo
}

// SetController sets the "controller" edge to the CompanyEngineer entity.
func (jruo *JobRelationsUpdateOne) SetController(c *CompanyEngineer) *JobRelationsUpdateOne {
	return jruo.SetControllerID(c.ID)
}

// SetMechaniccontrollerID sets the "mechaniccontroller" edge to the CompanyEngineer entity by ID.
func (jruo *JobRelationsUpdateOne) SetMechaniccontrollerID(id int) *JobRelationsUpdateOne {
	jruo.mutation.SetMechaniccontrollerID(id)
	return jruo
}

// SetNillableMechaniccontrollerID sets the "mechaniccontroller" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jruo *JobRelationsUpdateOne) SetNillableMechaniccontrollerID(id *int) *JobRelationsUpdateOne {
	if id != nil {
		jruo = jruo.SetMechaniccontrollerID(*id)
	}
	return jruo
}

// SetMechaniccontroller sets the "mechaniccontroller" edge to the CompanyEngineer entity.
func (jruo *JobRelationsUpdateOne) SetMechaniccontroller(c *CompanyEngineer) *JobRelationsUpdateOne {
	return jruo.SetMechaniccontrollerID(c.ID)
}

// SetElectriccontrollerID sets the "electriccontroller" edge to the CompanyEngineer entity by ID.
func (jruo *JobRelationsUpdateOne) SetElectriccontrollerID(id int) *JobRelationsUpdateOne {
	jruo.mutation.SetElectriccontrollerID(id)
	return jruo
}

// SetNillableElectriccontrollerID sets the "electriccontroller" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jruo *JobRelationsUpdateOne) SetNillableElectriccontrollerID(id *int) *JobRelationsUpdateOne {
	if id != nil {
		jruo = jruo.SetElectriccontrollerID(*id)
	}
	return jruo
}

// SetElectriccontroller sets the "electriccontroller" edge to the CompanyEngineer entity.
func (jruo *JobRelationsUpdateOne) SetElectriccontroller(c *CompanyEngineer) *JobRelationsUpdateOne {
	return jruo.SetElectriccontrollerID(c.ID)
}

// AddLayerIDs adds the "layers" edge to the JobLayer entity by IDs.
func (jruo *JobRelationsUpdateOne) AddLayerIDs(ids ...int) *JobRelationsUpdateOne {
	jruo.mutation.AddLayerIDs(ids...)
	return jruo
}

// AddLayers adds the "layers" edges to the JobLayer entity.
func (jruo *JobRelationsUpdateOne) AddLayers(j ...*JobLayer) *JobRelationsUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jruo.AddLayerIDs(ids...)
}

// AddPaymentIDs adds the "payments" edge to the JobPayments entity by IDs.
func (jruo *JobRelationsUpdateOne) AddPaymentIDs(ids ...int) *JobRelationsUpdateOne {
	jruo.mutation.AddPaymentIDs(ids...)
	return jruo
}

// AddPayments adds the "payments" edges to the JobPayments entity.
func (jruo *JobRelationsUpdateOne) AddPayments(j ...*JobPayments) *JobRelationsUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jruo.AddPaymentIDs(ids...)
}

// Mutation returns the JobRelationsMutation object of the builder.
func (jruo *JobRelationsUpdateOne) Mutation() *JobRelationsMutation {
	return jruo.mutation
}

// ClearJob clears the "job" edge to the JobDetail entity.
func (jruo *JobRelationsUpdateOne) ClearJob() *JobRelationsUpdateOne {
	jruo.mutation.ClearJob()
	return jruo
}

// ClearOwner clears the "owner" edge to the JobOwner entity.
func (jruo *JobRelationsUpdateOne) ClearOwner() *JobRelationsUpdateOne {
	jruo.mutation.ClearOwner()
	return jruo
}

// ClearAuthor clears the "author" edge to the JobAuthor entity.
func (jruo *JobRelationsUpdateOne) ClearAuthor() *JobRelationsUpdateOne {
	jruo.mutation.ClearAuthor()
	return jruo
}

// ClearCompany clears the "company" edge to the CompanyDetail entity.
func (jruo *JobRelationsUpdateOne) ClearCompany() *JobRelationsUpdateOne {
	jruo.mutation.ClearCompany()
	return jruo
}

// ClearProgress clears the "progress" edge to the JobProgress entity.
func (jruo *JobRelationsUpdateOne) ClearProgress() *JobRelationsUpdateOne {
	jruo.mutation.ClearProgress()
	return jruo
}

// ClearContractor clears the "contractor" edge to the JobContractor entity.
func (jruo *JobRelationsUpdateOne) ClearContractor() *JobRelationsUpdateOne {
	jruo.mutation.ClearContractor()
	return jruo
}

// ClearSupervisor clears the "supervisor" edge to the JobSupervisor entity.
func (jruo *JobRelationsUpdateOne) ClearSupervisor() *JobRelationsUpdateOne {
	jruo.mutation.ClearSupervisor()
	return jruo
}

// ClearStatic clears the "static" edge to the CompanyEngineer entity.
func (jruo *JobRelationsUpdateOne) ClearStatic() *JobRelationsUpdateOne {
	jruo.mutation.ClearStatic()
	return jruo
}

// ClearMechanic clears the "mechanic" edge to the CompanyEngineer entity.
func (jruo *JobRelationsUpdateOne) ClearMechanic() *JobRelationsUpdateOne {
	jruo.mutation.ClearMechanic()
	return jruo
}

// ClearElectric clears the "electric" edge to the CompanyEngineer entity.
func (jruo *JobRelationsUpdateOne) ClearElectric() *JobRelationsUpdateOne {
	jruo.mutation.ClearElectric()
	return jruo
}

// ClearInspector clears the "inspector" edge to the CompanyEngineer entity.
func (jruo *JobRelationsUpdateOne) ClearInspector() *JobRelationsUpdateOne {
	jruo.mutation.ClearInspector()
	return jruo
}

// ClearArchitect clears the "architect" edge to the CompanyEngineer entity.
func (jruo *JobRelationsUpdateOne) ClearArchitect() *JobRelationsUpdateOne {
	jruo.mutation.ClearArchitect()
	return jruo
}

// ClearController clears the "controller" edge to the CompanyEngineer entity.
func (jruo *JobRelationsUpdateOne) ClearController() *JobRelationsUpdateOne {
	jruo.mutation.ClearController()
	return jruo
}

// ClearMechaniccontroller clears the "mechaniccontroller" edge to the CompanyEngineer entity.
func (jruo *JobRelationsUpdateOne) ClearMechaniccontroller() *JobRelationsUpdateOne {
	jruo.mutation.ClearMechaniccontroller()
	return jruo
}

// ClearElectriccontroller clears the "electriccontroller" edge to the CompanyEngineer entity.
func (jruo *JobRelationsUpdateOne) ClearElectriccontroller() *JobRelationsUpdateOne {
	jruo.mutation.ClearElectriccontroller()
	return jruo
}

// ClearLayers clears all "layers" edges to the JobLayer entity.
func (jruo *JobRelationsUpdateOne) ClearLayers() *JobRelationsUpdateOne {
	jruo.mutation.ClearLayers()
	return jruo
}

// RemoveLayerIDs removes the "layers" edge to JobLayer entities by IDs.
func (jruo *JobRelationsUpdateOne) RemoveLayerIDs(ids ...int) *JobRelationsUpdateOne {
	jruo.mutation.RemoveLayerIDs(ids...)
	return jruo
}

// RemoveLayers removes "layers" edges to JobLayer entities.
func (jruo *JobRelationsUpdateOne) RemoveLayers(j ...*JobLayer) *JobRelationsUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jruo.RemoveLayerIDs(ids...)
}

// ClearPayments clears all "payments" edges to the JobPayments entity.
func (jruo *JobRelationsUpdateOne) ClearPayments() *JobRelationsUpdateOne {
	jruo.mutation.ClearPayments()
	return jruo
}

// RemovePaymentIDs removes the "payments" edge to JobPayments entities by IDs.
func (jruo *JobRelationsUpdateOne) RemovePaymentIDs(ids ...int) *JobRelationsUpdateOne {
	jruo.mutation.RemovePaymentIDs(ids...)
	return jruo
}

// RemovePayments removes "payments" edges to JobPayments entities.
func (jruo *JobRelationsUpdateOne) RemovePayments(j ...*JobPayments) *JobRelationsUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jruo.RemovePaymentIDs(ids...)
}

// Where appends a list predicates to the JobRelationsUpdate builder.
func (jruo *JobRelationsUpdateOne) Where(ps ...predicate.JobRelations) *JobRelationsUpdateOne {
	jruo.mutation.Where(ps...)
	return jruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jruo *JobRelationsUpdateOne) Select(field string, fields ...string) *JobRelationsUpdateOne {
	jruo.fields = append([]string{field}, fields...)
	return jruo
}

// Save executes the query and returns the updated JobRelations entity.
func (jruo *JobRelationsUpdateOne) Save(ctx context.Context) (*JobRelations, error) {
	jruo.defaults()
	return withHooks(ctx, jruo.sqlSave, jruo.mutation, jruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jruo *JobRelationsUpdateOne) SaveX(ctx context.Context) *JobRelations {
	node, err := jruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jruo *JobRelationsUpdateOne) Exec(ctx context.Context) error {
	_, err := jruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jruo *JobRelationsUpdateOne) ExecX(ctx context.Context) {
	if err := jruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jruo *JobRelationsUpdateOne) defaults() {
	if _, ok := jruo.mutation.UpdatedAt(); !ok {
		v := jobrelations.UpdateDefaultUpdatedAt()
		jruo.mutation.SetUpdatedAt(v)
	}
}

func (jruo *JobRelationsUpdateOne) sqlSave(ctx context.Context) (_node *JobRelations, err error) {
	_spec := sqlgraph.NewUpdateSpec(jobrelations.Table, jobrelations.Columns, sqlgraph.NewFieldSpec(jobrelations.FieldID, field.TypeInt))
	id, ok := jruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JobRelations.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobrelations.FieldID)
		for _, f := range fields {
			if !jobrelations.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jobrelations.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jruo.mutation.YibfNo(); ok {
		_spec.SetField(jobrelations.FieldYibfNo, field.TypeInt, value)
	}
	if value, ok := jruo.mutation.AddedYibfNo(); ok {
		_spec.AddField(jobrelations.FieldYibfNo, field.TypeInt, value)
	}
	if value, ok := jruo.mutation.CreatedAt(); ok {
		_spec.SetField(jobrelations.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := jruo.mutation.UpdatedAt(); ok {
		_spec.SetField(jobrelations.FieldUpdatedAt, field.TypeTime, value)
	}
	if jruo.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   jobrelations.JobTable,
			Columns: []string{jobrelations.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   jobrelations.JobTable,
			Columns: []string{jobrelations.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jruo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.OwnerTable,
			Columns: []string{jobrelations.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobowner.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.OwnerTable,
			Columns: []string{jobrelations.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobowner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jruo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.AuthorTable,
			Columns: []string{jobrelations.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobauthor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.AuthorTable,
			Columns: []string{jobrelations.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobauthor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jruo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.CompanyTable,
			Columns: []string{jobrelations.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.CompanyTable,
			Columns: []string{jobrelations.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jruo.mutation.ProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ProgressTable,
			Columns: []string{jobrelations.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.ProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ProgressTable,
			Columns: []string{jobrelations.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jruo.mutation.ContractorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ContractorTable,
			Columns: []string{jobrelations.ContractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobcontractor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.ContractorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ContractorTable,
			Columns: []string{jobrelations.ContractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobcontractor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jruo.mutation.SupervisorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.SupervisorTable,
			Columns: []string{jobrelations.SupervisorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobsupervisor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.SupervisorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.SupervisorTable,
			Columns: []string{jobrelations.SupervisorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobsupervisor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jruo.mutation.StaticCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.StaticTable,
			Columns: []string{jobrelations.StaticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.StaticIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.StaticTable,
			Columns: []string{jobrelations.StaticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jruo.mutation.MechanicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.MechanicTable,
			Columns: []string{jobrelations.MechanicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.MechanicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.MechanicTable,
			Columns: []string{jobrelations.MechanicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jruo.mutation.ElectricCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ElectricTable,
			Columns: []string{jobrelations.ElectricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.ElectricIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ElectricTable,
			Columns: []string{jobrelations.ElectricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jruo.mutation.InspectorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.InspectorTable,
			Columns: []string{jobrelations.InspectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.InspectorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.InspectorTable,
			Columns: []string{jobrelations.InspectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jruo.mutation.ArchitectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ArchitectTable,
			Columns: []string{jobrelations.ArchitectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.ArchitectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ArchitectTable,
			Columns: []string{jobrelations.ArchitectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jruo.mutation.ControllerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ControllerTable,
			Columns: []string{jobrelations.ControllerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.ControllerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ControllerTable,
			Columns: []string{jobrelations.ControllerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jruo.mutation.MechaniccontrollerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.MechaniccontrollerTable,
			Columns: []string{jobrelations.MechaniccontrollerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.MechaniccontrollerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.MechaniccontrollerTable,
			Columns: []string{jobrelations.MechaniccontrollerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jruo.mutation.ElectriccontrollerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ElectriccontrollerTable,
			Columns: []string{jobrelations.ElectriccontrollerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.ElectriccontrollerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobrelations.ElectriccontrollerTable,
			Columns: []string{jobrelations.ElectriccontrollerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jruo.mutation.LayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobrelations.LayersTable,
			Columns: []string{jobrelations.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblayer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.RemovedLayersIDs(); len(nodes) > 0 && !jruo.mutation.LayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobrelations.LayersTable,
			Columns: []string{jobrelations.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.LayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobrelations.LayersTable,
			Columns: []string{jobrelations.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jruo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobrelations.PaymentsTable,
			Columns: []string{jobrelations.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobpayments.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !jruo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobrelations.PaymentsTable,
			Columns: []string{jobrelations.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobpayments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jruo.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobrelations.PaymentsTable,
			Columns: []string{jobrelations.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobpayments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &JobRelations{config: jruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobrelations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jruo.mutation.done = true
	return _node, nil
}
