// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/polatbilal/gqlgen-ent/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/ent/jobowner"
)

// JobOwnerCreate is the builder for creating a JobOwner entity.
type JobOwnerCreate struct {
	config
	mutation *JobOwnerMutation
	hooks    []Hook
}

// SetName sets the "Name" field.
func (joc *JobOwnerCreate) SetName(s string) *JobOwnerCreate {
	joc.mutation.SetName(s)
	return joc
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (joc *JobOwnerCreate) SetNillableName(s *string) *JobOwnerCreate {
	if s != nil {
		joc.SetName(*s)
	}
	return joc
}

// SetTcNo sets the "TcNo" field.
func (joc *JobOwnerCreate) SetTcNo(i int) *JobOwnerCreate {
	joc.mutation.SetTcNo(i)
	return joc
}

// SetNillableTcNo sets the "TcNo" field if the given value is not nil.
func (joc *JobOwnerCreate) SetNillableTcNo(i *int) *JobOwnerCreate {
	if i != nil {
		joc.SetTcNo(*i)
	}
	return joc
}

// SetAddress sets the "Address" field.
func (joc *JobOwnerCreate) SetAddress(s string) *JobOwnerCreate {
	joc.mutation.SetAddress(s)
	return joc
}

// SetNillableAddress sets the "Address" field if the given value is not nil.
func (joc *JobOwnerCreate) SetNillableAddress(s *string) *JobOwnerCreate {
	if s != nil {
		joc.SetAddress(*s)
	}
	return joc
}

// SetTaxAdmin sets the "TaxAdmin" field.
func (joc *JobOwnerCreate) SetTaxAdmin(s string) *JobOwnerCreate {
	joc.mutation.SetTaxAdmin(s)
	return joc
}

// SetNillableTaxAdmin sets the "TaxAdmin" field if the given value is not nil.
func (joc *JobOwnerCreate) SetNillableTaxAdmin(s *string) *JobOwnerCreate {
	if s != nil {
		joc.SetTaxAdmin(*s)
	}
	return joc
}

// SetTaxNo sets the "TaxNo" field.
func (joc *JobOwnerCreate) SetTaxNo(i int) *JobOwnerCreate {
	joc.mutation.SetTaxNo(i)
	return joc
}

// SetNillableTaxNo sets the "TaxNo" field if the given value is not nil.
func (joc *JobOwnerCreate) SetNillableTaxNo(i *int) *JobOwnerCreate {
	if i != nil {
		joc.SetTaxNo(*i)
	}
	return joc
}

// SetPhone sets the "Phone" field.
func (joc *JobOwnerCreate) SetPhone(s string) *JobOwnerCreate {
	joc.mutation.SetPhone(s)
	return joc
}

// SetNillablePhone sets the "Phone" field if the given value is not nil.
func (joc *JobOwnerCreate) SetNillablePhone(s *string) *JobOwnerCreate {
	if s != nil {
		joc.SetPhone(*s)
	}
	return joc
}

// SetEmail sets the "Email" field.
func (joc *JobOwnerCreate) SetEmail(s string) *JobOwnerCreate {
	joc.mutation.SetEmail(s)
	return joc
}

// SetNillableEmail sets the "Email" field if the given value is not nil.
func (joc *JobOwnerCreate) SetNillableEmail(s *string) *JobOwnerCreate {
	if s != nil {
		joc.SetEmail(*s)
	}
	return joc
}

// SetYdsID sets the "yds_id" field.
func (joc *JobOwnerCreate) SetYdsID(i int) *JobOwnerCreate {
	joc.mutation.SetYdsID(i)
	return joc
}

// SetNillableYdsID sets the "yds_id" field if the given value is not nil.
func (joc *JobOwnerCreate) SetNillableYdsID(i *int) *JobOwnerCreate {
	if i != nil {
		joc.SetYdsID(*i)
	}
	return joc
}

// SetNote sets the "Note" field.
func (joc *JobOwnerCreate) SetNote(s string) *JobOwnerCreate {
	joc.mutation.SetNote(s)
	return joc
}

// SetNillableNote sets the "Note" field if the given value is not nil.
func (joc *JobOwnerCreate) SetNillableNote(s *string) *JobOwnerCreate {
	if s != nil {
		joc.SetNote(*s)
	}
	return joc
}

// SetCreatedAt sets the "CreatedAt" field.
func (joc *JobOwnerCreate) SetCreatedAt(t time.Time) *JobOwnerCreate {
	joc.mutation.SetCreatedAt(t)
	return joc
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (joc *JobOwnerCreate) SetNillableCreatedAt(t *time.Time) *JobOwnerCreate {
	if t != nil {
		joc.SetCreatedAt(*t)
	}
	return joc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (joc *JobOwnerCreate) SetUpdatedAt(t time.Time) *JobOwnerCreate {
	joc.mutation.SetUpdatedAt(t)
	return joc
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (joc *JobOwnerCreate) SetNillableUpdatedAt(t *time.Time) *JobOwnerCreate {
	if t != nil {
		joc.SetUpdatedAt(*t)
	}
	return joc
}

// AddOwnerIDs adds the "owners" edge to the JobDetail entity by IDs.
func (joc *JobOwnerCreate) AddOwnerIDs(ids ...int) *JobOwnerCreate {
	joc.mutation.AddOwnerIDs(ids...)
	return joc
}

// AddOwners adds the "owners" edges to the JobDetail entity.
func (joc *JobOwnerCreate) AddOwners(j ...*JobDetail) *JobOwnerCreate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return joc.AddOwnerIDs(ids...)
}

// Mutation returns the JobOwnerMutation object of the builder.
func (joc *JobOwnerCreate) Mutation() *JobOwnerMutation {
	return joc.mutation
}

// Save creates the JobOwner in the database.
func (joc *JobOwnerCreate) Save(ctx context.Context) (*JobOwner, error) {
	joc.defaults()
	return withHooks(ctx, joc.sqlSave, joc.mutation, joc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (joc *JobOwnerCreate) SaveX(ctx context.Context) *JobOwner {
	v, err := joc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (joc *JobOwnerCreate) Exec(ctx context.Context) error {
	_, err := joc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (joc *JobOwnerCreate) ExecX(ctx context.Context) {
	if err := joc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (joc *JobOwnerCreate) defaults() {
	if _, ok := joc.mutation.Name(); !ok {
		v := jobowner.DefaultName
		joc.mutation.SetName(v)
	}
	if _, ok := joc.mutation.CreatedAt(); !ok {
		v := jobowner.DefaultCreatedAt()
		joc.mutation.SetCreatedAt(v)
	}
	if _, ok := joc.mutation.UpdatedAt(); !ok {
		v := jobowner.DefaultUpdatedAt()
		joc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (joc *JobOwnerCreate) check() error {
	if _, ok := joc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "JobOwner.Name"`)}
	}
	if _, ok := joc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "CreatedAt", err: errors.New(`ent: missing required field "JobOwner.CreatedAt"`)}
	}
	if _, ok := joc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "UpdatedAt", err: errors.New(`ent: missing required field "JobOwner.UpdatedAt"`)}
	}
	return nil
}

func (joc *JobOwnerCreate) sqlSave(ctx context.Context) (*JobOwner, error) {
	if err := joc.check(); err != nil {
		return nil, err
	}
	_node, _spec := joc.createSpec()
	if err := sqlgraph.CreateNode(ctx, joc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	joc.mutation.id = &_node.ID
	joc.mutation.done = true
	return _node, nil
}

func (joc *JobOwnerCreate) createSpec() (*JobOwner, *sqlgraph.CreateSpec) {
	var (
		_node = &JobOwner{config: joc.config}
		_spec = sqlgraph.NewCreateSpec(jobowner.Table, sqlgraph.NewFieldSpec(jobowner.FieldID, field.TypeInt))
	)
	if value, ok := joc.mutation.Name(); ok {
		_spec.SetField(jobowner.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := joc.mutation.TcNo(); ok {
		_spec.SetField(jobowner.FieldTcNo, field.TypeInt, value)
		_node.TcNo = value
	}
	if value, ok := joc.mutation.Address(); ok {
		_spec.SetField(jobowner.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := joc.mutation.TaxAdmin(); ok {
		_spec.SetField(jobowner.FieldTaxAdmin, field.TypeString, value)
		_node.TaxAdmin = value
	}
	if value, ok := joc.mutation.TaxNo(); ok {
		_spec.SetField(jobowner.FieldTaxNo, field.TypeInt, value)
		_node.TaxNo = value
	}
	if value, ok := joc.mutation.Phone(); ok {
		_spec.SetField(jobowner.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := joc.mutation.Email(); ok {
		_spec.SetField(jobowner.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := joc.mutation.YdsID(); ok {
		_spec.SetField(jobowner.FieldYdsID, field.TypeInt, value)
		_node.YdsID = value
	}
	if value, ok := joc.mutation.Note(); ok {
		_spec.SetField(jobowner.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if value, ok := joc.mutation.CreatedAt(); ok {
		_spec.SetField(jobowner.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := joc.mutation.UpdatedAt(); ok {
		_spec.SetField(jobowner.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := joc.mutation.OwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobowner.OwnersTable,
			Columns: []string{jobowner.OwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobOwnerCreateBulk is the builder for creating many JobOwner entities in bulk.
type JobOwnerCreateBulk struct {
	config
	err      error
	builders []*JobOwnerCreate
}

// Save creates the JobOwner entities in the database.
func (jocb *JobOwnerCreateBulk) Save(ctx context.Context) ([]*JobOwner, error) {
	if jocb.err != nil {
		return nil, jocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jocb.builders))
	nodes := make([]*JobOwner, len(jocb.builders))
	mutators := make([]Mutator, len(jocb.builders))
	for i := range jocb.builders {
		func(i int, root context.Context) {
			builder := jocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobOwnerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jocb *JobOwnerCreateBulk) SaveX(ctx context.Context) []*JobOwner {
	v, err := jocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jocb *JobOwnerCreateBulk) Exec(ctx context.Context) error {
	_, err := jocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jocb *JobOwnerCreateBulk) ExecX(ctx context.Context) {
	if err := jocb.Exec(ctx); err != nil {
		panic(err)
	}
}
