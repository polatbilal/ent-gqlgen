// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/polatbilal/gqlgen-ent/ent/jobauthor"
	"github.com/polatbilal/gqlgen-ent/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/ent/predicate"
)

// JobAuthorQuery is the builder for querying JobAuthor entities.
type JobAuthorQuery struct {
	config
	ctx              *QueryContext
	order            []jobauthor.OrderOption
	inters           []Interceptor
	predicates       []predicate.JobAuthor
	withAuthors      *JobDetailQuery
	modifiers        []func(*sql.Selector)
	loadTotal        []func(context.Context, []*JobAuthor) error
	withNamedAuthors map[string]*JobDetailQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the JobAuthorQuery builder.
func (jaq *JobAuthorQuery) Where(ps ...predicate.JobAuthor) *JobAuthorQuery {
	jaq.predicates = append(jaq.predicates, ps...)
	return jaq
}

// Limit the number of records to be returned by this query.
func (jaq *JobAuthorQuery) Limit(limit int) *JobAuthorQuery {
	jaq.ctx.Limit = &limit
	return jaq
}

// Offset to start from.
func (jaq *JobAuthorQuery) Offset(offset int) *JobAuthorQuery {
	jaq.ctx.Offset = &offset
	return jaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (jaq *JobAuthorQuery) Unique(unique bool) *JobAuthorQuery {
	jaq.ctx.Unique = &unique
	return jaq
}

// Order specifies how the records should be ordered.
func (jaq *JobAuthorQuery) Order(o ...jobauthor.OrderOption) *JobAuthorQuery {
	jaq.order = append(jaq.order, o...)
	return jaq
}

// QueryAuthors chains the current query on the "authors" edge.
func (jaq *JobAuthorQuery) QueryAuthors() *JobDetailQuery {
	query := (&JobDetailClient{config: jaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobauthor.Table, jobauthor.FieldID, selector),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobauthor.AuthorsTable, jobauthor.AuthorsColumn),
		)
		fromU = sqlgraph.SetNeighbors(jaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first JobAuthor entity from the query.
// Returns a *NotFoundError when no JobAuthor was found.
func (jaq *JobAuthorQuery) First(ctx context.Context) (*JobAuthor, error) {
	nodes, err := jaq.Limit(1).All(setContextOp(ctx, jaq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{jobauthor.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jaq *JobAuthorQuery) FirstX(ctx context.Context) *JobAuthor {
	node, err := jaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first JobAuthor ID from the query.
// Returns a *NotFoundError when no JobAuthor ID was found.
func (jaq *JobAuthorQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jaq.Limit(1).IDs(setContextOp(ctx, jaq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{jobauthor.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (jaq *JobAuthorQuery) FirstIDX(ctx context.Context) int {
	id, err := jaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single JobAuthor entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one JobAuthor entity is found.
// Returns a *NotFoundError when no JobAuthor entities are found.
func (jaq *JobAuthorQuery) Only(ctx context.Context) (*JobAuthor, error) {
	nodes, err := jaq.Limit(2).All(setContextOp(ctx, jaq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{jobauthor.Label}
	default:
		return nil, &NotSingularError{jobauthor.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jaq *JobAuthorQuery) OnlyX(ctx context.Context) *JobAuthor {
	node, err := jaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only JobAuthor ID in the query.
// Returns a *NotSingularError when more than one JobAuthor ID is found.
// Returns a *NotFoundError when no entities are found.
func (jaq *JobAuthorQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jaq.Limit(2).IDs(setContextOp(ctx, jaq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{jobauthor.Label}
	default:
		err = &NotSingularError{jobauthor.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (jaq *JobAuthorQuery) OnlyIDX(ctx context.Context) int {
	id, err := jaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of JobAuthors.
func (jaq *JobAuthorQuery) All(ctx context.Context) ([]*JobAuthor, error) {
	ctx = setContextOp(ctx, jaq.ctx, ent.OpQueryAll)
	if err := jaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*JobAuthor, *JobAuthorQuery]()
	return withInterceptors[[]*JobAuthor](ctx, jaq, qr, jaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (jaq *JobAuthorQuery) AllX(ctx context.Context) []*JobAuthor {
	nodes, err := jaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of JobAuthor IDs.
func (jaq *JobAuthorQuery) IDs(ctx context.Context) (ids []int, err error) {
	if jaq.ctx.Unique == nil && jaq.path != nil {
		jaq.Unique(true)
	}
	ctx = setContextOp(ctx, jaq.ctx, ent.OpQueryIDs)
	if err = jaq.Select(jobauthor.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jaq *JobAuthorQuery) IDsX(ctx context.Context) []int {
	ids, err := jaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jaq *JobAuthorQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, jaq.ctx, ent.OpQueryCount)
	if err := jaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, jaq, querierCount[*JobAuthorQuery](), jaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (jaq *JobAuthorQuery) CountX(ctx context.Context) int {
	count, err := jaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jaq *JobAuthorQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, jaq.ctx, ent.OpQueryExist)
	switch _, err := jaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (jaq *JobAuthorQuery) ExistX(ctx context.Context) bool {
	exist, err := jaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the JobAuthorQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jaq *JobAuthorQuery) Clone() *JobAuthorQuery {
	if jaq == nil {
		return nil
	}
	return &JobAuthorQuery{
		config:      jaq.config,
		ctx:         jaq.ctx.Clone(),
		order:       append([]jobauthor.OrderOption{}, jaq.order...),
		inters:      append([]Interceptor{}, jaq.inters...),
		predicates:  append([]predicate.JobAuthor{}, jaq.predicates...),
		withAuthors: jaq.withAuthors.Clone(),
		// clone intermediate query.
		sql:  jaq.sql.Clone(),
		path: jaq.path,
	}
}

// WithAuthors tells the query-builder to eager-load the nodes that are connected to
// the "authors" edge. The optional arguments are used to configure the query builder of the edge.
func (jaq *JobAuthorQuery) WithAuthors(opts ...func(*JobDetailQuery)) *JobAuthorQuery {
	query := (&JobDetailClient{config: jaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jaq.withAuthors = query
	return jaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Static string `json:"Static,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.JobAuthor.Query().
//		GroupBy(jobauthor.FieldStatic).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (jaq *JobAuthorQuery) GroupBy(field string, fields ...string) *JobAuthorGroupBy {
	jaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &JobAuthorGroupBy{build: jaq}
	grbuild.flds = &jaq.ctx.Fields
	grbuild.label = jobauthor.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Static string `json:"Static,omitempty"`
//	}
//
//	client.JobAuthor.Query().
//		Select(jobauthor.FieldStatic).
//		Scan(ctx, &v)
func (jaq *JobAuthorQuery) Select(fields ...string) *JobAuthorSelect {
	jaq.ctx.Fields = append(jaq.ctx.Fields, fields...)
	sbuild := &JobAuthorSelect{JobAuthorQuery: jaq}
	sbuild.label = jobauthor.Label
	sbuild.flds, sbuild.scan = &jaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a JobAuthorSelect configured with the given aggregations.
func (jaq *JobAuthorQuery) Aggregate(fns ...AggregateFunc) *JobAuthorSelect {
	return jaq.Select().Aggregate(fns...)
}

func (jaq *JobAuthorQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range jaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, jaq); err != nil {
				return err
			}
		}
	}
	for _, f := range jaq.ctx.Fields {
		if !jobauthor.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if jaq.path != nil {
		prev, err := jaq.path(ctx)
		if err != nil {
			return err
		}
		jaq.sql = prev
	}
	return nil
}

func (jaq *JobAuthorQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*JobAuthor, error) {
	var (
		nodes       = []*JobAuthor{}
		_spec       = jaq.querySpec()
		loadedTypes = [1]bool{
			jaq.withAuthors != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*JobAuthor).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &JobAuthor{config: jaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(jaq.modifiers) > 0 {
		_spec.Modifiers = jaq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, jaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := jaq.withAuthors; query != nil {
		if err := jaq.loadAuthors(ctx, query, nodes,
			func(n *JobAuthor) { n.Edges.Authors = []*JobDetail{} },
			func(n *JobAuthor, e *JobDetail) { n.Edges.Authors = append(n.Edges.Authors, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range jaq.withNamedAuthors {
		if err := jaq.loadAuthors(ctx, query, nodes,
			func(n *JobAuthor) { n.appendNamedAuthors(name) },
			func(n *JobAuthor, e *JobDetail) { n.appendNamedAuthors(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range jaq.loadTotal {
		if err := jaq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (jaq *JobAuthorQuery) loadAuthors(ctx context.Context, query *JobDetailQuery, nodes []*JobAuthor, init func(*JobAuthor), assign func(*JobAuthor, *JobDetail)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*JobAuthor)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobDetail(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(jobauthor.AuthorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.author_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "author_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "author_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (jaq *JobAuthorQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := jaq.querySpec()
	if len(jaq.modifiers) > 0 {
		_spec.Modifiers = jaq.modifiers
	}
	_spec.Node.Columns = jaq.ctx.Fields
	if len(jaq.ctx.Fields) > 0 {
		_spec.Unique = jaq.ctx.Unique != nil && *jaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, jaq.driver, _spec)
}

func (jaq *JobAuthorQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(jobauthor.Table, jobauthor.Columns, sqlgraph.NewFieldSpec(jobauthor.FieldID, field.TypeInt))
	_spec.From = jaq.sql
	if unique := jaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if jaq.path != nil {
		_spec.Unique = true
	}
	if fields := jaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobauthor.FieldID)
		for i := range fields {
			if fields[i] != jobauthor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := jaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := jaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := jaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := jaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (jaq *JobAuthorQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(jaq.driver.Dialect())
	t1 := builder.Table(jobauthor.Table)
	columns := jaq.ctx.Fields
	if len(columns) == 0 {
		columns = jobauthor.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if jaq.sql != nil {
		selector = jaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if jaq.ctx.Unique != nil && *jaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range jaq.predicates {
		p(selector)
	}
	for _, p := range jaq.order {
		p(selector)
	}
	if offset := jaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedAuthors tells the query-builder to eager-load the nodes that are connected to the "authors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (jaq *JobAuthorQuery) WithNamedAuthors(name string, opts ...func(*JobDetailQuery)) *JobAuthorQuery {
	query := (&JobDetailClient{config: jaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if jaq.withNamedAuthors == nil {
		jaq.withNamedAuthors = make(map[string]*JobDetailQuery)
	}
	jaq.withNamedAuthors[name] = query
	return jaq
}

// JobAuthorGroupBy is the group-by builder for JobAuthor entities.
type JobAuthorGroupBy struct {
	selector
	build *JobAuthorQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jagb *JobAuthorGroupBy) Aggregate(fns ...AggregateFunc) *JobAuthorGroupBy {
	jagb.fns = append(jagb.fns, fns...)
	return jagb
}

// Scan applies the selector query and scans the result into the given value.
func (jagb *JobAuthorGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jagb.build.ctx, ent.OpQueryGroupBy)
	if err := jagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobAuthorQuery, *JobAuthorGroupBy](ctx, jagb.build, jagb, jagb.build.inters, v)
}

func (jagb *JobAuthorGroupBy) sqlScan(ctx context.Context, root *JobAuthorQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(jagb.fns))
	for _, fn := range jagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*jagb.flds)+len(jagb.fns))
		for _, f := range *jagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*jagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// JobAuthorSelect is the builder for selecting fields of JobAuthor entities.
type JobAuthorSelect struct {
	*JobAuthorQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (jas *JobAuthorSelect) Aggregate(fns ...AggregateFunc) *JobAuthorSelect {
	jas.fns = append(jas.fns, fns...)
	return jas
}

// Scan applies the selector query and scans the result into the given value.
func (jas *JobAuthorSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jas.ctx, ent.OpQuerySelect)
	if err := jas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobAuthorQuery, *JobAuthorSelect](ctx, jas.JobAuthorQuery, jas, jas.inters, v)
}

func (jas *JobAuthorSelect) sqlScan(ctx context.Context, root *JobAuthorQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(jas.fns))
	for _, fn := range jas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*jas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
