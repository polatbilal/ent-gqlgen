// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/polatbilal/gqlgen-ent/ent/companydetail"
	"github.com/polatbilal/gqlgen-ent/ent/companyengineer"
	"github.com/polatbilal/gqlgen-ent/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/ent/predicate"
)

// CompanyEngineerQuery is the builder for querying CompanyEngineer entities.
type CompanyEngineerQuery struct {
	config
	ctx                          *QueryContext
	order                        []companyengineer.OrderOption
	inters                       []Interceptor
	predicates                   []predicate.CompanyEngineer
	withCompany                  *CompanyDetailQuery
	withInspectors               *JobDetailQuery
	withArchitects               *JobDetailQuery
	withStatics                  *JobDetailQuery
	withMechanics                *JobDetailQuery
	withElectrics                *JobDetailQuery
	withControllers              *JobDetailQuery
	withMechaniccontrollers      *JobDetailQuery
	withElectriccontrollers      *JobDetailQuery
	withFKs                      bool
	modifiers                    []func(*sql.Selector)
	loadTotal                    []func(context.Context, []*CompanyEngineer) error
	withNamedInspectors          map[string]*JobDetailQuery
	withNamedArchitects          map[string]*JobDetailQuery
	withNamedStatics             map[string]*JobDetailQuery
	withNamedMechanics           map[string]*JobDetailQuery
	withNamedElectrics           map[string]*JobDetailQuery
	withNamedControllers         map[string]*JobDetailQuery
	withNamedMechaniccontrollers map[string]*JobDetailQuery
	withNamedElectriccontrollers map[string]*JobDetailQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CompanyEngineerQuery builder.
func (ceq *CompanyEngineerQuery) Where(ps ...predicate.CompanyEngineer) *CompanyEngineerQuery {
	ceq.predicates = append(ceq.predicates, ps...)
	return ceq
}

// Limit the number of records to be returned by this query.
func (ceq *CompanyEngineerQuery) Limit(limit int) *CompanyEngineerQuery {
	ceq.ctx.Limit = &limit
	return ceq
}

// Offset to start from.
func (ceq *CompanyEngineerQuery) Offset(offset int) *CompanyEngineerQuery {
	ceq.ctx.Offset = &offset
	return ceq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ceq *CompanyEngineerQuery) Unique(unique bool) *CompanyEngineerQuery {
	ceq.ctx.Unique = &unique
	return ceq
}

// Order specifies how the records should be ordered.
func (ceq *CompanyEngineerQuery) Order(o ...companyengineer.OrderOption) *CompanyEngineerQuery {
	ceq.order = append(ceq.order, o...)
	return ceq
}

// QueryCompany chains the current query on the "company" edge.
func (ceq *CompanyEngineerQuery) QueryCompany() *CompanyDetailQuery {
	query := (&CompanyDetailClient{config: ceq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ceq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ceq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(companyengineer.Table, companyengineer.FieldID, selector),
			sqlgraph.To(companydetail.Table, companydetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, companyengineer.CompanyTable, companyengineer.CompanyColumn),
		)
		fromU = sqlgraph.SetNeighbors(ceq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInspectors chains the current query on the "inspectors" edge.
func (ceq *CompanyEngineerQuery) QueryInspectors() *JobDetailQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ceq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ceq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(companyengineer.Table, companyengineer.FieldID, selector),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companyengineer.InspectorsTable, companyengineer.InspectorsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ceq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryArchitects chains the current query on the "architects" edge.
func (ceq *CompanyEngineerQuery) QueryArchitects() *JobDetailQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ceq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ceq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(companyengineer.Table, companyengineer.FieldID, selector),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companyengineer.ArchitectsTable, companyengineer.ArchitectsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ceq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStatics chains the current query on the "statics" edge.
func (ceq *CompanyEngineerQuery) QueryStatics() *JobDetailQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ceq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ceq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(companyengineer.Table, companyengineer.FieldID, selector),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companyengineer.StaticsTable, companyengineer.StaticsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ceq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMechanics chains the current query on the "mechanics" edge.
func (ceq *CompanyEngineerQuery) QueryMechanics() *JobDetailQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ceq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ceq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(companyengineer.Table, companyengineer.FieldID, selector),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companyengineer.MechanicsTable, companyengineer.MechanicsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ceq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryElectrics chains the current query on the "electrics" edge.
func (ceq *CompanyEngineerQuery) QueryElectrics() *JobDetailQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ceq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ceq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(companyengineer.Table, companyengineer.FieldID, selector),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companyengineer.ElectricsTable, companyengineer.ElectricsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ceq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControllers chains the current query on the "controllers" edge.
func (ceq *CompanyEngineerQuery) QueryControllers() *JobDetailQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ceq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ceq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(companyengineer.Table, companyengineer.FieldID, selector),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companyengineer.ControllersTable, companyengineer.ControllersColumn),
		)
		fromU = sqlgraph.SetNeighbors(ceq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMechaniccontrollers chains the current query on the "mechaniccontrollers" edge.
func (ceq *CompanyEngineerQuery) QueryMechaniccontrollers() *JobDetailQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ceq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ceq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(companyengineer.Table, companyengineer.FieldID, selector),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companyengineer.MechaniccontrollersTable, companyengineer.MechaniccontrollersColumn),
		)
		fromU = sqlgraph.SetNeighbors(ceq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryElectriccontrollers chains the current query on the "electriccontrollers" edge.
func (ceq *CompanyEngineerQuery) QueryElectriccontrollers() *JobDetailQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ceq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ceq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(companyengineer.Table, companyengineer.FieldID, selector),
			sqlgraph.To(jobdetail.Table, jobdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companyengineer.ElectriccontrollersTable, companyengineer.ElectriccontrollersColumn),
		)
		fromU = sqlgraph.SetNeighbors(ceq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CompanyEngineer entity from the query.
// Returns a *NotFoundError when no CompanyEngineer was found.
func (ceq *CompanyEngineerQuery) First(ctx context.Context) (*CompanyEngineer, error) {
	nodes, err := ceq.Limit(1).All(setContextOp(ctx, ceq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{companyengineer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ceq *CompanyEngineerQuery) FirstX(ctx context.Context) *CompanyEngineer {
	node, err := ceq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CompanyEngineer ID from the query.
// Returns a *NotFoundError when no CompanyEngineer ID was found.
func (ceq *CompanyEngineerQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ceq.Limit(1).IDs(setContextOp(ctx, ceq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{companyengineer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ceq *CompanyEngineerQuery) FirstIDX(ctx context.Context) int {
	id, err := ceq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CompanyEngineer entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CompanyEngineer entity is found.
// Returns a *NotFoundError when no CompanyEngineer entities are found.
func (ceq *CompanyEngineerQuery) Only(ctx context.Context) (*CompanyEngineer, error) {
	nodes, err := ceq.Limit(2).All(setContextOp(ctx, ceq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{companyengineer.Label}
	default:
		return nil, &NotSingularError{companyengineer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ceq *CompanyEngineerQuery) OnlyX(ctx context.Context) *CompanyEngineer {
	node, err := ceq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CompanyEngineer ID in the query.
// Returns a *NotSingularError when more than one CompanyEngineer ID is found.
// Returns a *NotFoundError when no entities are found.
func (ceq *CompanyEngineerQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ceq.Limit(2).IDs(setContextOp(ctx, ceq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{companyengineer.Label}
	default:
		err = &NotSingularError{companyengineer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ceq *CompanyEngineerQuery) OnlyIDX(ctx context.Context) int {
	id, err := ceq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CompanyEngineers.
func (ceq *CompanyEngineerQuery) All(ctx context.Context) ([]*CompanyEngineer, error) {
	ctx = setContextOp(ctx, ceq.ctx, ent.OpQueryAll)
	if err := ceq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CompanyEngineer, *CompanyEngineerQuery]()
	return withInterceptors[[]*CompanyEngineer](ctx, ceq, qr, ceq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ceq *CompanyEngineerQuery) AllX(ctx context.Context) []*CompanyEngineer {
	nodes, err := ceq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CompanyEngineer IDs.
func (ceq *CompanyEngineerQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ceq.ctx.Unique == nil && ceq.path != nil {
		ceq.Unique(true)
	}
	ctx = setContextOp(ctx, ceq.ctx, ent.OpQueryIDs)
	if err = ceq.Select(companyengineer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ceq *CompanyEngineerQuery) IDsX(ctx context.Context) []int {
	ids, err := ceq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ceq *CompanyEngineerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ceq.ctx, ent.OpQueryCount)
	if err := ceq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ceq, querierCount[*CompanyEngineerQuery](), ceq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ceq *CompanyEngineerQuery) CountX(ctx context.Context) int {
	count, err := ceq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ceq *CompanyEngineerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ceq.ctx, ent.OpQueryExist)
	switch _, err := ceq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ceq *CompanyEngineerQuery) ExistX(ctx context.Context) bool {
	exist, err := ceq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CompanyEngineerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ceq *CompanyEngineerQuery) Clone() *CompanyEngineerQuery {
	if ceq == nil {
		return nil
	}
	return &CompanyEngineerQuery{
		config:                  ceq.config,
		ctx:                     ceq.ctx.Clone(),
		order:                   append([]companyengineer.OrderOption{}, ceq.order...),
		inters:                  append([]Interceptor{}, ceq.inters...),
		predicates:              append([]predicate.CompanyEngineer{}, ceq.predicates...),
		withCompany:             ceq.withCompany.Clone(),
		withInspectors:          ceq.withInspectors.Clone(),
		withArchitects:          ceq.withArchitects.Clone(),
		withStatics:             ceq.withStatics.Clone(),
		withMechanics:           ceq.withMechanics.Clone(),
		withElectrics:           ceq.withElectrics.Clone(),
		withControllers:         ceq.withControllers.Clone(),
		withMechaniccontrollers: ceq.withMechaniccontrollers.Clone(),
		withElectriccontrollers: ceq.withElectriccontrollers.Clone(),
		// clone intermediate query.
		sql:  ceq.sql.Clone(),
		path: ceq.path,
	}
}

// WithCompany tells the query-builder to eager-load the nodes that are connected to
// the "company" edge. The optional arguments are used to configure the query builder of the edge.
func (ceq *CompanyEngineerQuery) WithCompany(opts ...func(*CompanyDetailQuery)) *CompanyEngineerQuery {
	query := (&CompanyDetailClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ceq.withCompany = query
	return ceq
}

// WithInspectors tells the query-builder to eager-load the nodes that are connected to
// the "inspectors" edge. The optional arguments are used to configure the query builder of the edge.
func (ceq *CompanyEngineerQuery) WithInspectors(opts ...func(*JobDetailQuery)) *CompanyEngineerQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ceq.withInspectors = query
	return ceq
}

// WithArchitects tells the query-builder to eager-load the nodes that are connected to
// the "architects" edge. The optional arguments are used to configure the query builder of the edge.
func (ceq *CompanyEngineerQuery) WithArchitects(opts ...func(*JobDetailQuery)) *CompanyEngineerQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ceq.withArchitects = query
	return ceq
}

// WithStatics tells the query-builder to eager-load the nodes that are connected to
// the "statics" edge. The optional arguments are used to configure the query builder of the edge.
func (ceq *CompanyEngineerQuery) WithStatics(opts ...func(*JobDetailQuery)) *CompanyEngineerQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ceq.withStatics = query
	return ceq
}

// WithMechanics tells the query-builder to eager-load the nodes that are connected to
// the "mechanics" edge. The optional arguments are used to configure the query builder of the edge.
func (ceq *CompanyEngineerQuery) WithMechanics(opts ...func(*JobDetailQuery)) *CompanyEngineerQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ceq.withMechanics = query
	return ceq
}

// WithElectrics tells the query-builder to eager-load the nodes that are connected to
// the "electrics" edge. The optional arguments are used to configure the query builder of the edge.
func (ceq *CompanyEngineerQuery) WithElectrics(opts ...func(*JobDetailQuery)) *CompanyEngineerQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ceq.withElectrics = query
	return ceq
}

// WithControllers tells the query-builder to eager-load the nodes that are connected to
// the "controllers" edge. The optional arguments are used to configure the query builder of the edge.
func (ceq *CompanyEngineerQuery) WithControllers(opts ...func(*JobDetailQuery)) *CompanyEngineerQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ceq.withControllers = query
	return ceq
}

// WithMechaniccontrollers tells the query-builder to eager-load the nodes that are connected to
// the "mechaniccontrollers" edge. The optional arguments are used to configure the query builder of the edge.
func (ceq *CompanyEngineerQuery) WithMechaniccontrollers(opts ...func(*JobDetailQuery)) *CompanyEngineerQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ceq.withMechaniccontrollers = query
	return ceq
}

// WithElectriccontrollers tells the query-builder to eager-load the nodes that are connected to
// the "electriccontrollers" edge. The optional arguments are used to configure the query builder of the edge.
func (ceq *CompanyEngineerQuery) WithElectriccontrollers(opts ...func(*JobDetailQuery)) *CompanyEngineerQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ceq.withElectriccontrollers = query
	return ceq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"Name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CompanyEngineer.Query().
//		GroupBy(companyengineer.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ceq *CompanyEngineerQuery) GroupBy(field string, fields ...string) *CompanyEngineerGroupBy {
	ceq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CompanyEngineerGroupBy{build: ceq}
	grbuild.flds = &ceq.ctx.Fields
	grbuild.label = companyengineer.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"Name,omitempty"`
//	}
//
//	client.CompanyEngineer.Query().
//		Select(companyengineer.FieldName).
//		Scan(ctx, &v)
func (ceq *CompanyEngineerQuery) Select(fields ...string) *CompanyEngineerSelect {
	ceq.ctx.Fields = append(ceq.ctx.Fields, fields...)
	sbuild := &CompanyEngineerSelect{CompanyEngineerQuery: ceq}
	sbuild.label = companyengineer.Label
	sbuild.flds, sbuild.scan = &ceq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CompanyEngineerSelect configured with the given aggregations.
func (ceq *CompanyEngineerQuery) Aggregate(fns ...AggregateFunc) *CompanyEngineerSelect {
	return ceq.Select().Aggregate(fns...)
}

func (ceq *CompanyEngineerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ceq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ceq); err != nil {
				return err
			}
		}
	}
	for _, f := range ceq.ctx.Fields {
		if !companyengineer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ceq.path != nil {
		prev, err := ceq.path(ctx)
		if err != nil {
			return err
		}
		ceq.sql = prev
	}
	return nil
}

func (ceq *CompanyEngineerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CompanyEngineer, error) {
	var (
		nodes       = []*CompanyEngineer{}
		withFKs     = ceq.withFKs
		_spec       = ceq.querySpec()
		loadedTypes = [9]bool{
			ceq.withCompany != nil,
			ceq.withInspectors != nil,
			ceq.withArchitects != nil,
			ceq.withStatics != nil,
			ceq.withMechanics != nil,
			ceq.withElectrics != nil,
			ceq.withControllers != nil,
			ceq.withMechaniccontrollers != nil,
			ceq.withElectriccontrollers != nil,
		}
	)
	if ceq.withCompany != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, companyengineer.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CompanyEngineer).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CompanyEngineer{config: ceq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ceq.modifiers) > 0 {
		_spec.Modifiers = ceq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ceq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ceq.withCompany; query != nil {
		if err := ceq.loadCompany(ctx, query, nodes, nil,
			func(n *CompanyEngineer, e *CompanyDetail) { n.Edges.Company = e }); err != nil {
			return nil, err
		}
	}
	if query := ceq.withInspectors; query != nil {
		if err := ceq.loadInspectors(ctx, query, nodes,
			func(n *CompanyEngineer) { n.Edges.Inspectors = []*JobDetail{} },
			func(n *CompanyEngineer, e *JobDetail) { n.Edges.Inspectors = append(n.Edges.Inspectors, e) }); err != nil {
			return nil, err
		}
	}
	if query := ceq.withArchitects; query != nil {
		if err := ceq.loadArchitects(ctx, query, nodes,
			func(n *CompanyEngineer) { n.Edges.Architects = []*JobDetail{} },
			func(n *CompanyEngineer, e *JobDetail) { n.Edges.Architects = append(n.Edges.Architects, e) }); err != nil {
			return nil, err
		}
	}
	if query := ceq.withStatics; query != nil {
		if err := ceq.loadStatics(ctx, query, nodes,
			func(n *CompanyEngineer) { n.Edges.Statics = []*JobDetail{} },
			func(n *CompanyEngineer, e *JobDetail) { n.Edges.Statics = append(n.Edges.Statics, e) }); err != nil {
			return nil, err
		}
	}
	if query := ceq.withMechanics; query != nil {
		if err := ceq.loadMechanics(ctx, query, nodes,
			func(n *CompanyEngineer) { n.Edges.Mechanics = []*JobDetail{} },
			func(n *CompanyEngineer, e *JobDetail) { n.Edges.Mechanics = append(n.Edges.Mechanics, e) }); err != nil {
			return nil, err
		}
	}
	if query := ceq.withElectrics; query != nil {
		if err := ceq.loadElectrics(ctx, query, nodes,
			func(n *CompanyEngineer) { n.Edges.Electrics = []*JobDetail{} },
			func(n *CompanyEngineer, e *JobDetail) { n.Edges.Electrics = append(n.Edges.Electrics, e) }); err != nil {
			return nil, err
		}
	}
	if query := ceq.withControllers; query != nil {
		if err := ceq.loadControllers(ctx, query, nodes,
			func(n *CompanyEngineer) { n.Edges.Controllers = []*JobDetail{} },
			func(n *CompanyEngineer, e *JobDetail) { n.Edges.Controllers = append(n.Edges.Controllers, e) }); err != nil {
			return nil, err
		}
	}
	if query := ceq.withMechaniccontrollers; query != nil {
		if err := ceq.loadMechaniccontrollers(ctx, query, nodes,
			func(n *CompanyEngineer) { n.Edges.Mechaniccontrollers = []*JobDetail{} },
			func(n *CompanyEngineer, e *JobDetail) {
				n.Edges.Mechaniccontrollers = append(n.Edges.Mechaniccontrollers, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := ceq.withElectriccontrollers; query != nil {
		if err := ceq.loadElectriccontrollers(ctx, query, nodes,
			func(n *CompanyEngineer) { n.Edges.Electriccontrollers = []*JobDetail{} },
			func(n *CompanyEngineer, e *JobDetail) {
				n.Edges.Electriccontrollers = append(n.Edges.Electriccontrollers, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range ceq.withNamedInspectors {
		if err := ceq.loadInspectors(ctx, query, nodes,
			func(n *CompanyEngineer) { n.appendNamedInspectors(name) },
			func(n *CompanyEngineer, e *JobDetail) { n.appendNamedInspectors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ceq.withNamedArchitects {
		if err := ceq.loadArchitects(ctx, query, nodes,
			func(n *CompanyEngineer) { n.appendNamedArchitects(name) },
			func(n *CompanyEngineer, e *JobDetail) { n.appendNamedArchitects(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ceq.withNamedStatics {
		if err := ceq.loadStatics(ctx, query, nodes,
			func(n *CompanyEngineer) { n.appendNamedStatics(name) },
			func(n *CompanyEngineer, e *JobDetail) { n.appendNamedStatics(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ceq.withNamedMechanics {
		if err := ceq.loadMechanics(ctx, query, nodes,
			func(n *CompanyEngineer) { n.appendNamedMechanics(name) },
			func(n *CompanyEngineer, e *JobDetail) { n.appendNamedMechanics(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ceq.withNamedElectrics {
		if err := ceq.loadElectrics(ctx, query, nodes,
			func(n *CompanyEngineer) { n.appendNamedElectrics(name) },
			func(n *CompanyEngineer, e *JobDetail) { n.appendNamedElectrics(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ceq.withNamedControllers {
		if err := ceq.loadControllers(ctx, query, nodes,
			func(n *CompanyEngineer) { n.appendNamedControllers(name) },
			func(n *CompanyEngineer, e *JobDetail) { n.appendNamedControllers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ceq.withNamedMechaniccontrollers {
		if err := ceq.loadMechaniccontrollers(ctx, query, nodes,
			func(n *CompanyEngineer) { n.appendNamedMechaniccontrollers(name) },
			func(n *CompanyEngineer, e *JobDetail) { n.appendNamedMechaniccontrollers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ceq.withNamedElectriccontrollers {
		if err := ceq.loadElectriccontrollers(ctx, query, nodes,
			func(n *CompanyEngineer) { n.appendNamedElectriccontrollers(name) },
			func(n *CompanyEngineer, e *JobDetail) { n.appendNamedElectriccontrollers(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range ceq.loadTotal {
		if err := ceq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ceq *CompanyEngineerQuery) loadCompany(ctx context.Context, query *CompanyDetailQuery, nodes []*CompanyEngineer, init func(*CompanyEngineer), assign func(*CompanyEngineer, *CompanyDetail)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CompanyEngineer)
	for i := range nodes {
		if nodes[i].company_id == nil {
			continue
		}
		fk := *nodes[i].company_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companydetail.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "company_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ceq *CompanyEngineerQuery) loadInspectors(ctx context.Context, query *JobDetailQuery, nodes []*CompanyEngineer, init func(*CompanyEngineer), assign func(*CompanyEngineer, *JobDetail)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*CompanyEngineer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobDetail(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(companyengineer.InspectorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.inspector_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "inspector_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "inspector_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ceq *CompanyEngineerQuery) loadArchitects(ctx context.Context, query *JobDetailQuery, nodes []*CompanyEngineer, init func(*CompanyEngineer), assign func(*CompanyEngineer, *JobDetail)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*CompanyEngineer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobDetail(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(companyengineer.ArchitectsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.architect_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "architect_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "architect_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ceq *CompanyEngineerQuery) loadStatics(ctx context.Context, query *JobDetailQuery, nodes []*CompanyEngineer, init func(*CompanyEngineer), assign func(*CompanyEngineer, *JobDetail)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*CompanyEngineer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobDetail(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(companyengineer.StaticsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.static_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "static_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "static_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ceq *CompanyEngineerQuery) loadMechanics(ctx context.Context, query *JobDetailQuery, nodes []*CompanyEngineer, init func(*CompanyEngineer), assign func(*CompanyEngineer, *JobDetail)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*CompanyEngineer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobDetail(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(companyengineer.MechanicsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.mechanic_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "mechanic_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "mechanic_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ceq *CompanyEngineerQuery) loadElectrics(ctx context.Context, query *JobDetailQuery, nodes []*CompanyEngineer, init func(*CompanyEngineer), assign func(*CompanyEngineer, *JobDetail)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*CompanyEngineer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobDetail(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(companyengineer.ElectricsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.electric_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "electric_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "electric_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ceq *CompanyEngineerQuery) loadControllers(ctx context.Context, query *JobDetailQuery, nodes []*CompanyEngineer, init func(*CompanyEngineer), assign func(*CompanyEngineer, *JobDetail)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*CompanyEngineer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobDetail(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(companyengineer.ControllersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.controller_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "controller_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "controller_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ceq *CompanyEngineerQuery) loadMechaniccontrollers(ctx context.Context, query *JobDetailQuery, nodes []*CompanyEngineer, init func(*CompanyEngineer), assign func(*CompanyEngineer, *JobDetail)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*CompanyEngineer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobDetail(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(companyengineer.MechaniccontrollersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.mechaniccontroller_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "mechaniccontroller_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "mechaniccontroller_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ceq *CompanyEngineerQuery) loadElectriccontrollers(ctx context.Context, query *JobDetailQuery, nodes []*CompanyEngineer, init func(*CompanyEngineer), assign func(*CompanyEngineer, *JobDetail)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*CompanyEngineer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobDetail(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(companyengineer.ElectriccontrollersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.electriccontroller_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "electriccontroller_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "electriccontroller_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ceq *CompanyEngineerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ceq.querySpec()
	if len(ceq.modifiers) > 0 {
		_spec.Modifiers = ceq.modifiers
	}
	_spec.Node.Columns = ceq.ctx.Fields
	if len(ceq.ctx.Fields) > 0 {
		_spec.Unique = ceq.ctx.Unique != nil && *ceq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ceq.driver, _spec)
}

func (ceq *CompanyEngineerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(companyengineer.Table, companyengineer.Columns, sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt))
	_spec.From = ceq.sql
	if unique := ceq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ceq.path != nil {
		_spec.Unique = true
	}
	if fields := ceq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, companyengineer.FieldID)
		for i := range fields {
			if fields[i] != companyengineer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ceq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ceq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ceq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ceq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ceq *CompanyEngineerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ceq.driver.Dialect())
	t1 := builder.Table(companyengineer.Table)
	columns := ceq.ctx.Fields
	if len(columns) == 0 {
		columns = companyengineer.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ceq.sql != nil {
		selector = ceq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ceq.ctx.Unique != nil && *ceq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ceq.predicates {
		p(selector)
	}
	for _, p := range ceq.order {
		p(selector)
	}
	if offset := ceq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ceq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedInspectors tells the query-builder to eager-load the nodes that are connected to the "inspectors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ceq *CompanyEngineerQuery) WithNamedInspectors(name string, opts ...func(*JobDetailQuery)) *CompanyEngineerQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ceq.withNamedInspectors == nil {
		ceq.withNamedInspectors = make(map[string]*JobDetailQuery)
	}
	ceq.withNamedInspectors[name] = query
	return ceq
}

// WithNamedArchitects tells the query-builder to eager-load the nodes that are connected to the "architects"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ceq *CompanyEngineerQuery) WithNamedArchitects(name string, opts ...func(*JobDetailQuery)) *CompanyEngineerQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ceq.withNamedArchitects == nil {
		ceq.withNamedArchitects = make(map[string]*JobDetailQuery)
	}
	ceq.withNamedArchitects[name] = query
	return ceq
}

// WithNamedStatics tells the query-builder to eager-load the nodes that are connected to the "statics"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ceq *CompanyEngineerQuery) WithNamedStatics(name string, opts ...func(*JobDetailQuery)) *CompanyEngineerQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ceq.withNamedStatics == nil {
		ceq.withNamedStatics = make(map[string]*JobDetailQuery)
	}
	ceq.withNamedStatics[name] = query
	return ceq
}

// WithNamedMechanics tells the query-builder to eager-load the nodes that are connected to the "mechanics"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ceq *CompanyEngineerQuery) WithNamedMechanics(name string, opts ...func(*JobDetailQuery)) *CompanyEngineerQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ceq.withNamedMechanics == nil {
		ceq.withNamedMechanics = make(map[string]*JobDetailQuery)
	}
	ceq.withNamedMechanics[name] = query
	return ceq
}

// WithNamedElectrics tells the query-builder to eager-load the nodes that are connected to the "electrics"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ceq *CompanyEngineerQuery) WithNamedElectrics(name string, opts ...func(*JobDetailQuery)) *CompanyEngineerQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ceq.withNamedElectrics == nil {
		ceq.withNamedElectrics = make(map[string]*JobDetailQuery)
	}
	ceq.withNamedElectrics[name] = query
	return ceq
}

// WithNamedControllers tells the query-builder to eager-load the nodes that are connected to the "controllers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ceq *CompanyEngineerQuery) WithNamedControllers(name string, opts ...func(*JobDetailQuery)) *CompanyEngineerQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ceq.withNamedControllers == nil {
		ceq.withNamedControllers = make(map[string]*JobDetailQuery)
	}
	ceq.withNamedControllers[name] = query
	return ceq
}

// WithNamedMechaniccontrollers tells the query-builder to eager-load the nodes that are connected to the "mechaniccontrollers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ceq *CompanyEngineerQuery) WithNamedMechaniccontrollers(name string, opts ...func(*JobDetailQuery)) *CompanyEngineerQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ceq.withNamedMechaniccontrollers == nil {
		ceq.withNamedMechaniccontrollers = make(map[string]*JobDetailQuery)
	}
	ceq.withNamedMechaniccontrollers[name] = query
	return ceq
}

// WithNamedElectriccontrollers tells the query-builder to eager-load the nodes that are connected to the "electriccontrollers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ceq *CompanyEngineerQuery) WithNamedElectriccontrollers(name string, opts ...func(*JobDetailQuery)) *CompanyEngineerQuery {
	query := (&JobDetailClient{config: ceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ceq.withNamedElectriccontrollers == nil {
		ceq.withNamedElectriccontrollers = make(map[string]*JobDetailQuery)
	}
	ceq.withNamedElectriccontrollers[name] = query
	return ceq
}

// CompanyEngineerGroupBy is the group-by builder for CompanyEngineer entities.
type CompanyEngineerGroupBy struct {
	selector
	build *CompanyEngineerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cegb *CompanyEngineerGroupBy) Aggregate(fns ...AggregateFunc) *CompanyEngineerGroupBy {
	cegb.fns = append(cegb.fns, fns...)
	return cegb
}

// Scan applies the selector query and scans the result into the given value.
func (cegb *CompanyEngineerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cegb.build.ctx, ent.OpQueryGroupBy)
	if err := cegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CompanyEngineerQuery, *CompanyEngineerGroupBy](ctx, cegb.build, cegb, cegb.build.inters, v)
}

func (cegb *CompanyEngineerGroupBy) sqlScan(ctx context.Context, root *CompanyEngineerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cegb.fns))
	for _, fn := range cegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cegb.flds)+len(cegb.fns))
		for _, f := range *cegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CompanyEngineerSelect is the builder for selecting fields of CompanyEngineer entities.
type CompanyEngineerSelect struct {
	*CompanyEngineerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ces *CompanyEngineerSelect) Aggregate(fns ...AggregateFunc) *CompanyEngineerSelect {
	ces.fns = append(ces.fns, fns...)
	return ces
}

// Scan applies the selector query and scans the result into the given value.
func (ces *CompanyEngineerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ces.ctx, ent.OpQuerySelect)
	if err := ces.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CompanyEngineerQuery, *CompanyEngineerSelect](ctx, ces.CompanyEngineerQuery, ces, ces.inters, v)
}

func (ces *CompanyEngineerSelect) sqlScan(ctx context.Context, root *CompanyEngineerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ces.fns))
	for _, fn := range ces.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ces.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ces.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
