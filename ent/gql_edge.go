// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (cd *CompanyDetail) Jobs(ctx context.Context) (result []*JobRelations, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = cd.NamedJobs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = cd.Edges.JobsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = cd.QueryJobs().All(ctx)
	}
	return result, err
}

func (cd *CompanyDetail) Users(ctx context.Context) (result []*CompanyUser, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = cd.NamedUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = cd.Edges.UsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = cd.QueryUsers().All(ctx)
	}
	return result, err
}

func (cd *CompanyDetail) Tokens(ctx context.Context) (result []*CompanyToken, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = cd.NamedTokens(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = cd.Edges.TokensOrErr()
	}
	if IsNotLoaded(err) {
		result, err = cd.QueryTokens().All(ctx)
	}
	return result, err
}

func (cd *CompanyDetail) Engineers(ctx context.Context) (result []*CompanyEngineer, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = cd.NamedEngineers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = cd.Edges.EngineersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = cd.QueryEngineers().All(ctx)
	}
	return result, err
}

func (ce *CompanyEngineer) Company(ctx context.Context) (*CompanyDetail, error) {
	result, err := ce.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = ce.QueryCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ce *CompanyEngineer) Statics(ctx context.Context) (result []*JobRelations, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ce.NamedStatics(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ce.Edges.StaticsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ce.QueryStatics().All(ctx)
	}
	return result, err
}

func (ce *CompanyEngineer) Mechanics(ctx context.Context) (result []*JobRelations, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ce.NamedMechanics(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ce.Edges.MechanicsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ce.QueryMechanics().All(ctx)
	}
	return result, err
}

func (ce *CompanyEngineer) Electrics(ctx context.Context) (result []*JobRelations, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ce.NamedElectrics(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ce.Edges.ElectricsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ce.QueryElectrics().All(ctx)
	}
	return result, err
}

func (ce *CompanyEngineer) Inspectors(ctx context.Context) (result []*JobRelations, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ce.NamedInspectors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ce.Edges.InspectorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ce.QueryInspectors().All(ctx)
	}
	return result, err
}

func (ce *CompanyEngineer) Architects(ctx context.Context) (result []*JobRelations, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ce.NamedArchitects(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ce.Edges.ArchitectsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ce.QueryArchitects().All(ctx)
	}
	return result, err
}

func (ce *CompanyEngineer) Controllers(ctx context.Context) (result []*JobRelations, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ce.NamedControllers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ce.Edges.ControllersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ce.QueryControllers().All(ctx)
	}
	return result, err
}

func (ce *CompanyEngineer) Mechaniccontrollers(ctx context.Context) (result []*JobRelations, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ce.NamedMechaniccontrollers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ce.Edges.MechaniccontrollersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ce.QueryMechaniccontrollers().All(ctx)
	}
	return result, err
}

func (ce *CompanyEngineer) Electriccontrollers(ctx context.Context) (result []*JobRelations, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ce.NamedElectriccontrollers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ce.Edges.ElectriccontrollersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ce.QueryElectriccontrollers().All(ctx)
	}
	return result, err
}

func (ct *CompanyToken) Company(ctx context.Context) (*CompanyDetail, error) {
	result, err := ct.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = ct.QueryCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cu *CompanyUser) Company(ctx context.Context) (*CompanyDetail, error) {
	result, err := cu.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = cu.QueryCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (cu *CompanyUser) User(ctx context.Context) (*User, error) {
	result, err := cu.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = cu.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ja *JobAuthor) Authors(ctx context.Context) (result []*JobRelations, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ja.NamedAuthors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ja.Edges.AuthorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ja.QueryAuthors().All(ctx)
	}
	return result, err
}

func (jc *JobContractor) Contractors(ctx context.Context) (result []*JobRelations, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = jc.NamedContractors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = jc.Edges.ContractorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = jc.QueryContractors().All(ctx)
	}
	return result, err
}

func (jd *JobDetail) Relations(ctx context.Context) (*JobRelations, error) {
	result, err := jd.Edges.RelationsOrErr()
	if IsNotLoaded(err) {
		result, err = jd.QueryRelations().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jl *JobLayer) Layer(ctx context.Context) (*JobRelations, error) {
	result, err := jl.Edges.LayerOrErr()
	if IsNotLoaded(err) {
		result, err = jl.QueryLayer().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jo *JobOwner) Owners(ctx context.Context) (result []*JobRelations, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = jo.NamedOwners(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = jo.Edges.OwnersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = jo.QueryOwners().All(ctx)
	}
	return result, err
}

func (jp *JobPayments) Payments(ctx context.Context) (*JobRelations, error) {
	result, err := jp.Edges.PaymentsOrErr()
	if IsNotLoaded(err) {
		result, err = jp.QueryPayments().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jp *JobProgress) Progress(ctx context.Context) (result []*JobRelations, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = jp.NamedProgress(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = jp.Edges.ProgressOrErr()
	}
	if IsNotLoaded(err) {
		result, err = jp.QueryProgress().All(ctx)
	}
	return result, err
}

func (jr *JobRelations) Job(ctx context.Context) (*JobDetail, error) {
	result, err := jr.Edges.JobOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QueryJob().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jr *JobRelations) Owner(ctx context.Context) (*JobOwner, error) {
	result, err := jr.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jr *JobRelations) Author(ctx context.Context) (*JobAuthor, error) {
	result, err := jr.Edges.AuthorOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QueryAuthor().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jr *JobRelations) Company(ctx context.Context) (*CompanyDetail, error) {
	result, err := jr.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QueryCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jr *JobRelations) Progress(ctx context.Context) (*JobProgress, error) {
	result, err := jr.Edges.ProgressOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QueryProgress().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jr *JobRelations) Contractor(ctx context.Context) (*JobContractor, error) {
	result, err := jr.Edges.ContractorOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QueryContractor().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jr *JobRelations) Supervisor(ctx context.Context) (*JobSupervisor, error) {
	result, err := jr.Edges.SupervisorOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QuerySupervisor().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jr *JobRelations) Static(ctx context.Context) (*CompanyEngineer, error) {
	result, err := jr.Edges.StaticOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QueryStatic().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jr *JobRelations) Mechanic(ctx context.Context) (*CompanyEngineer, error) {
	result, err := jr.Edges.MechanicOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QueryMechanic().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jr *JobRelations) Electric(ctx context.Context) (*CompanyEngineer, error) {
	result, err := jr.Edges.ElectricOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QueryElectric().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jr *JobRelations) Inspector(ctx context.Context) (*CompanyEngineer, error) {
	result, err := jr.Edges.InspectorOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QueryInspector().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jr *JobRelations) Architect(ctx context.Context) (*CompanyEngineer, error) {
	result, err := jr.Edges.ArchitectOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QueryArchitect().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jr *JobRelations) Controller(ctx context.Context) (*CompanyEngineer, error) {
	result, err := jr.Edges.ControllerOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QueryController().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jr *JobRelations) Mechaniccontroller(ctx context.Context) (*CompanyEngineer, error) {
	result, err := jr.Edges.MechaniccontrollerOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QueryMechaniccontroller().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jr *JobRelations) Electriccontroller(ctx context.Context) (*CompanyEngineer, error) {
	result, err := jr.Edges.ElectriccontrollerOrErr()
	if IsNotLoaded(err) {
		result, err = jr.QueryElectriccontroller().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (jr *JobRelations) Layers(ctx context.Context) (result []*JobLayer, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = jr.NamedLayers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = jr.Edges.LayersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = jr.QueryLayers().All(ctx)
	}
	return result, err
}

func (jr *JobRelations) Payments(ctx context.Context) (result []*JobPayments, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = jr.NamedPayments(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = jr.Edges.PaymentsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = jr.QueryPayments().All(ctx)
	}
	return result, err
}

func (js *JobSupervisor) Supervisors(ctx context.Context) (result []*JobRelations, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = js.NamedSupervisors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = js.Edges.SupervisorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = js.QuerySupervisors().All(ctx)
	}
	return result, err
}

func (u *User) Companies(ctx context.Context) (result []*CompanyUser, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedCompanies(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.CompaniesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryCompanies().All(ctx)
	}
	return result, err
}
