// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gqlgen-ent/ent/companydetail"
	"gqlgen-ent/ent/companyengineer"
	"gqlgen-ent/ent/companyuser"
	"gqlgen-ent/ent/jobdetail"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyDetailCreate is the builder for creating a CompanyDetail entity.
type CompanyDetailCreate struct {
	config
	mutation *CompanyDetailMutation
	hooks    []Hook
}

// SetCompanyCode sets the "CompanyCode" field.
func (cdc *CompanyDetailCreate) SetCompanyCode(i int) *CompanyDetailCreate {
	cdc.mutation.SetCompanyCode(i)
	return cdc
}

// SetName sets the "Name" field.
func (cdc *CompanyDetailCreate) SetName(s string) *CompanyDetailCreate {
	cdc.mutation.SetName(s)
	return cdc
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (cdc *CompanyDetailCreate) SetNillableName(s *string) *CompanyDetailCreate {
	if s != nil {
		cdc.SetName(*s)
	}
	return cdc
}

// SetAddress sets the "Address" field.
func (cdc *CompanyDetailCreate) SetAddress(s string) *CompanyDetailCreate {
	cdc.mutation.SetAddress(s)
	return cdc
}

// SetNillableAddress sets the "Address" field if the given value is not nil.
func (cdc *CompanyDetailCreate) SetNillableAddress(s *string) *CompanyDetailCreate {
	if s != nil {
		cdc.SetAddress(*s)
	}
	return cdc
}

// SetCity sets the "City" field.
func (cdc *CompanyDetailCreate) SetCity(s string) *CompanyDetailCreate {
	cdc.mutation.SetCity(s)
	return cdc
}

// SetNillableCity sets the "City" field if the given value is not nil.
func (cdc *CompanyDetailCreate) SetNillableCity(s *string) *CompanyDetailCreate {
	if s != nil {
		cdc.SetCity(*s)
	}
	return cdc
}

// SetState sets the "State" field.
func (cdc *CompanyDetailCreate) SetState(s string) *CompanyDetailCreate {
	cdc.mutation.SetState(s)
	return cdc
}

// SetNillableState sets the "State" field if the given value is not nil.
func (cdc *CompanyDetailCreate) SetNillableState(s *string) *CompanyDetailCreate {
	if s != nil {
		cdc.SetState(*s)
	}
	return cdc
}

// SetPhone sets the "Phone" field.
func (cdc *CompanyDetailCreate) SetPhone(s string) *CompanyDetailCreate {
	cdc.mutation.SetPhone(s)
	return cdc
}

// SetNillablePhone sets the "Phone" field if the given value is not nil.
func (cdc *CompanyDetailCreate) SetNillablePhone(s *string) *CompanyDetailCreate {
	if s != nil {
		cdc.SetPhone(*s)
	}
	return cdc
}

// SetFax sets the "Fax" field.
func (cdc *CompanyDetailCreate) SetFax(s string) *CompanyDetailCreate {
	cdc.mutation.SetFax(s)
	return cdc
}

// SetNillableFax sets the "Fax" field if the given value is not nil.
func (cdc *CompanyDetailCreate) SetNillableFax(s *string) *CompanyDetailCreate {
	if s != nil {
		cdc.SetFax(*s)
	}
	return cdc
}

// SetMobile sets the "Mobile" field.
func (cdc *CompanyDetailCreate) SetMobile(s string) *CompanyDetailCreate {
	cdc.mutation.SetMobile(s)
	return cdc
}

// SetNillableMobile sets the "Mobile" field if the given value is not nil.
func (cdc *CompanyDetailCreate) SetNillableMobile(s *string) *CompanyDetailCreate {
	if s != nil {
		cdc.SetMobile(*s)
	}
	return cdc
}

// SetEmail sets the "Email" field.
func (cdc *CompanyDetailCreate) SetEmail(s string) *CompanyDetailCreate {
	cdc.mutation.SetEmail(s)
	return cdc
}

// SetNillableEmail sets the "Email" field if the given value is not nil.
func (cdc *CompanyDetailCreate) SetNillableEmail(s *string) *CompanyDetailCreate {
	if s != nil {
		cdc.SetEmail(*s)
	}
	return cdc
}

// SetWebsite sets the "Website" field.
func (cdc *CompanyDetailCreate) SetWebsite(s string) *CompanyDetailCreate {
	cdc.mutation.SetWebsite(s)
	return cdc
}

// SetNillableWebsite sets the "Website" field if the given value is not nil.
func (cdc *CompanyDetailCreate) SetNillableWebsite(s *string) *CompanyDetailCreate {
	if s != nil {
		cdc.SetWebsite(*s)
	}
	return cdc
}

// SetTaxAdmin sets the "TaxAdmin" field.
func (cdc *CompanyDetailCreate) SetTaxAdmin(s string) *CompanyDetailCreate {
	cdc.mutation.SetTaxAdmin(s)
	return cdc
}

// SetNillableTaxAdmin sets the "TaxAdmin" field if the given value is not nil.
func (cdc *CompanyDetailCreate) SetNillableTaxAdmin(s *string) *CompanyDetailCreate {
	if s != nil {
		cdc.SetTaxAdmin(*s)
	}
	return cdc
}

// SetTaxNo sets the "TaxNo" field.
func (cdc *CompanyDetailCreate) SetTaxNo(i int) *CompanyDetailCreate {
	cdc.mutation.SetTaxNo(i)
	return cdc
}

// SetNillableTaxNo sets the "TaxNo" field if the given value is not nil.
func (cdc *CompanyDetailCreate) SetNillableTaxNo(i *int) *CompanyDetailCreate {
	if i != nil {
		cdc.SetTaxNo(*i)
	}
	return cdc
}

// SetCommerce sets the "Commerce" field.
func (cdc *CompanyDetailCreate) SetCommerce(s string) *CompanyDetailCreate {
	cdc.mutation.SetCommerce(s)
	return cdc
}

// SetNillableCommerce sets the "Commerce" field if the given value is not nil.
func (cdc *CompanyDetailCreate) SetNillableCommerce(s *string) *CompanyDetailCreate {
	if s != nil {
		cdc.SetCommerce(*s)
	}
	return cdc
}

// SetCommerceReg sets the "CommerceReg" field.
func (cdc *CompanyDetailCreate) SetCommerceReg(s string) *CompanyDetailCreate {
	cdc.mutation.SetCommerceReg(s)
	return cdc
}

// SetNillableCommerceReg sets the "CommerceReg" field if the given value is not nil.
func (cdc *CompanyDetailCreate) SetNillableCommerceReg(s *string) *CompanyDetailCreate {
	if s != nil {
		cdc.SetCommerceReg(*s)
	}
	return cdc
}

// SetVisaDate sets the "VisaDate" field.
func (cdc *CompanyDetailCreate) SetVisaDate(t time.Time) *CompanyDetailCreate {
	cdc.mutation.SetVisaDate(t)
	return cdc
}

// SetNillableVisaDate sets the "VisaDate" field if the given value is not nil.
func (cdc *CompanyDetailCreate) SetNillableVisaDate(t *time.Time) *CompanyDetailCreate {
	if t != nil {
		cdc.SetVisaDate(*t)
	}
	return cdc
}

// SetCreatedAt sets the "CreatedAt" field.
func (cdc *CompanyDetailCreate) SetCreatedAt(t time.Time) *CompanyDetailCreate {
	cdc.mutation.SetCreatedAt(t)
	return cdc
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (cdc *CompanyDetailCreate) SetNillableCreatedAt(t *time.Time) *CompanyDetailCreate {
	if t != nil {
		cdc.SetCreatedAt(*t)
	}
	return cdc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (cdc *CompanyDetailCreate) SetUpdatedAt(t time.Time) *CompanyDetailCreate {
	cdc.mutation.SetUpdatedAt(t)
	return cdc
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (cdc *CompanyDetailCreate) SetNillableUpdatedAt(t *time.Time) *CompanyDetailCreate {
	if t != nil {
		cdc.SetUpdatedAt(*t)
	}
	return cdc
}

// SetCompanyOwnerID sets the "companyOwner" edge to the CompanyEngineer entity by ID.
func (cdc *CompanyDetailCreate) SetCompanyOwnerID(id int) *CompanyDetailCreate {
	cdc.mutation.SetCompanyOwnerID(id)
	return cdc
}

// SetNillableCompanyOwnerID sets the "companyOwner" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (cdc *CompanyDetailCreate) SetNillableCompanyOwnerID(id *int) *CompanyDetailCreate {
	if id != nil {
		cdc = cdc.SetCompanyOwnerID(*id)
	}
	return cdc
}

// SetCompanyOwner sets the "companyOwner" edge to the CompanyEngineer entity.
func (cdc *CompanyDetailCreate) SetCompanyOwner(c *CompanyEngineer) *CompanyDetailCreate {
	return cdc.SetCompanyOwnerID(c.ID)
}

// AddEngineerIDs adds the "engineers" edge to the CompanyEngineer entity by IDs.
func (cdc *CompanyDetailCreate) AddEngineerIDs(ids ...int) *CompanyDetailCreate {
	cdc.mutation.AddEngineerIDs(ids...)
	return cdc
}

// AddEngineers adds the "engineers" edges to the CompanyEngineer entity.
func (cdc *CompanyDetailCreate) AddEngineers(c ...*CompanyEngineer) *CompanyDetailCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cdc.AddEngineerIDs(ids...)
}

// AddUserIDs adds the "users" edge to the CompanyUser entity by IDs.
func (cdc *CompanyDetailCreate) AddUserIDs(ids ...int) *CompanyDetailCreate {
	cdc.mutation.AddUserIDs(ids...)
	return cdc
}

// AddUsers adds the "users" edges to the CompanyUser entity.
func (cdc *CompanyDetailCreate) AddUsers(c ...*CompanyUser) *CompanyDetailCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cdc.AddUserIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the JobDetail entity by IDs.
func (cdc *CompanyDetailCreate) AddJobIDs(ids ...int) *CompanyDetailCreate {
	cdc.mutation.AddJobIDs(ids...)
	return cdc
}

// AddJobs adds the "jobs" edges to the JobDetail entity.
func (cdc *CompanyDetailCreate) AddJobs(j ...*JobDetail) *CompanyDetailCreate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cdc.AddJobIDs(ids...)
}

// Mutation returns the CompanyDetailMutation object of the builder.
func (cdc *CompanyDetailCreate) Mutation() *CompanyDetailMutation {
	return cdc.mutation
}

// Save creates the CompanyDetail in the database.
func (cdc *CompanyDetailCreate) Save(ctx context.Context) (*CompanyDetail, error) {
	cdc.defaults()
	return withHooks(ctx, cdc.sqlSave, cdc.mutation, cdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cdc *CompanyDetailCreate) SaveX(ctx context.Context) *CompanyDetail {
	v, err := cdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdc *CompanyDetailCreate) Exec(ctx context.Context) error {
	_, err := cdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdc *CompanyDetailCreate) ExecX(ctx context.Context) {
	if err := cdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdc *CompanyDetailCreate) defaults() {
	if _, ok := cdc.mutation.Name(); !ok {
		v := companydetail.DefaultName
		cdc.mutation.SetName(v)
	}
	if _, ok := cdc.mutation.TaxNo(); !ok {
		v := companydetail.DefaultTaxNo
		cdc.mutation.SetTaxNo(v)
	}
	if _, ok := cdc.mutation.CreatedAt(); !ok {
		v := companydetail.DefaultCreatedAt()
		cdc.mutation.SetCreatedAt(v)
	}
	if _, ok := cdc.mutation.UpdatedAt(); !ok {
		v := companydetail.DefaultUpdatedAt()
		cdc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cdc *CompanyDetailCreate) check() error {
	if _, ok := cdc.mutation.CompanyCode(); !ok {
		return &ValidationError{Name: "CompanyCode", err: errors.New(`ent: missing required field "CompanyDetail.CompanyCode"`)}
	}
	if _, ok := cdc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "CompanyDetail.Name"`)}
	}
	if _, ok := cdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "CreatedAt", err: errors.New(`ent: missing required field "CompanyDetail.CreatedAt"`)}
	}
	if _, ok := cdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "UpdatedAt", err: errors.New(`ent: missing required field "CompanyDetail.UpdatedAt"`)}
	}
	return nil
}

func (cdc *CompanyDetailCreate) sqlSave(ctx context.Context) (*CompanyDetail, error) {
	if err := cdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cdc.mutation.id = &_node.ID
	cdc.mutation.done = true
	return _node, nil
}

func (cdc *CompanyDetailCreate) createSpec() (*CompanyDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &CompanyDetail{config: cdc.config}
		_spec = sqlgraph.NewCreateSpec(companydetail.Table, sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt))
	)
	if value, ok := cdc.mutation.CompanyCode(); ok {
		_spec.SetField(companydetail.FieldCompanyCode, field.TypeInt, value)
		_node.CompanyCode = value
	}
	if value, ok := cdc.mutation.Name(); ok {
		_spec.SetField(companydetail.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cdc.mutation.Address(); ok {
		_spec.SetField(companydetail.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := cdc.mutation.City(); ok {
		_spec.SetField(companydetail.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := cdc.mutation.State(); ok {
		_spec.SetField(companydetail.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := cdc.mutation.Phone(); ok {
		_spec.SetField(companydetail.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := cdc.mutation.Fax(); ok {
		_spec.SetField(companydetail.FieldFax, field.TypeString, value)
		_node.Fax = value
	}
	if value, ok := cdc.mutation.Mobile(); ok {
		_spec.SetField(companydetail.FieldMobile, field.TypeString, value)
		_node.Mobile = value
	}
	if value, ok := cdc.mutation.Email(); ok {
		_spec.SetField(companydetail.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := cdc.mutation.Website(); ok {
		_spec.SetField(companydetail.FieldWebsite, field.TypeString, value)
		_node.Website = value
	}
	if value, ok := cdc.mutation.TaxAdmin(); ok {
		_spec.SetField(companydetail.FieldTaxAdmin, field.TypeString, value)
		_node.TaxAdmin = value
	}
	if value, ok := cdc.mutation.TaxNo(); ok {
		_spec.SetField(companydetail.FieldTaxNo, field.TypeInt, value)
		_node.TaxNo = value
	}
	if value, ok := cdc.mutation.Commerce(); ok {
		_spec.SetField(companydetail.FieldCommerce, field.TypeString, value)
		_node.Commerce = value
	}
	if value, ok := cdc.mutation.CommerceReg(); ok {
		_spec.SetField(companydetail.FieldCommerceReg, field.TypeString, value)
		_node.CommerceReg = value
	}
	if value, ok := cdc.mutation.VisaDate(); ok {
		_spec.SetField(companydetail.FieldVisaDate, field.TypeTime, value)
		_node.VisaDate = value
	}
	if value, ok := cdc.mutation.CreatedAt(); ok {
		_spec.SetField(companydetail.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cdc.mutation.UpdatedAt(); ok {
		_spec.SetField(companydetail.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cdc.mutation.CompanyOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companydetail.CompanyOwnerTable,
			Columns: []string{companydetail.CompanyOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.owner_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cdc.mutation.EngineersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.EngineersTable,
			Columns: []string{companydetail.EngineersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cdc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.UsersTable,
			Columns: []string{companydetail.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cdc.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companydetail.JobsTable,
			Columns: []string{companydetail.JobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CompanyDetailCreateBulk is the builder for creating many CompanyDetail entities in bulk.
type CompanyDetailCreateBulk struct {
	config
	err      error
	builders []*CompanyDetailCreate
}

// Save creates the CompanyDetail entities in the database.
func (cdcb *CompanyDetailCreateBulk) Save(ctx context.Context) ([]*CompanyDetail, error) {
	if cdcb.err != nil {
		return nil, cdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cdcb.builders))
	nodes := make([]*CompanyDetail, len(cdcb.builders))
	mutators := make([]Mutator, len(cdcb.builders))
	for i := range cdcb.builders {
		func(i int, root context.Context) {
			builder := cdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompanyDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cdcb *CompanyDetailCreateBulk) SaveX(ctx context.Context) []*CompanyDetail {
	v, err := cdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdcb *CompanyDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := cdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdcb *CompanyDetailCreateBulk) ExecX(ctx context.Context) {
	if err := cdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
