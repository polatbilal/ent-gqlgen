// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/polatbilal/gqlgen-ent/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/ent/jobprogress"
	"github.com/polatbilal/gqlgen-ent/ent/predicate"
)

// JobProgressUpdate is the builder for updating JobProgress entities.
type JobProgressUpdate struct {
	config
	hooks    []Hook
	mutation *JobProgressMutation
}

// Where appends a list predicates to the JobProgressUpdate builder.
func (jpu *JobProgressUpdate) Where(ps ...predicate.JobProgress) *JobProgressUpdate {
	jpu.mutation.Where(ps...)
	return jpu
}

// SetOne sets the "One" field.
func (jpu *JobProgressUpdate) SetOne(i int) *JobProgressUpdate {
	jpu.mutation.ResetOne()
	jpu.mutation.SetOne(i)
	return jpu
}

// SetNillableOne sets the "One" field if the given value is not nil.
func (jpu *JobProgressUpdate) SetNillableOne(i *int) *JobProgressUpdate {
	if i != nil {
		jpu.SetOne(*i)
	}
	return jpu
}

// AddOne adds i to the "One" field.
func (jpu *JobProgressUpdate) AddOne(i int) *JobProgressUpdate {
	jpu.mutation.AddOne(i)
	return jpu
}

// ClearOne clears the value of the "One" field.
func (jpu *JobProgressUpdate) ClearOne() *JobProgressUpdate {
	jpu.mutation.ClearOne()
	return jpu
}

// SetTwo sets the "Two" field.
func (jpu *JobProgressUpdate) SetTwo(i int) *JobProgressUpdate {
	jpu.mutation.ResetTwo()
	jpu.mutation.SetTwo(i)
	return jpu
}

// SetNillableTwo sets the "Two" field if the given value is not nil.
func (jpu *JobProgressUpdate) SetNillableTwo(i *int) *JobProgressUpdate {
	if i != nil {
		jpu.SetTwo(*i)
	}
	return jpu
}

// AddTwo adds i to the "Two" field.
func (jpu *JobProgressUpdate) AddTwo(i int) *JobProgressUpdate {
	jpu.mutation.AddTwo(i)
	return jpu
}

// ClearTwo clears the value of the "Two" field.
func (jpu *JobProgressUpdate) ClearTwo() *JobProgressUpdate {
	jpu.mutation.ClearTwo()
	return jpu
}

// SetThree sets the "Three" field.
func (jpu *JobProgressUpdate) SetThree(i int) *JobProgressUpdate {
	jpu.mutation.ResetThree()
	jpu.mutation.SetThree(i)
	return jpu
}

// SetNillableThree sets the "Three" field if the given value is not nil.
func (jpu *JobProgressUpdate) SetNillableThree(i *int) *JobProgressUpdate {
	if i != nil {
		jpu.SetThree(*i)
	}
	return jpu
}

// AddThree adds i to the "Three" field.
func (jpu *JobProgressUpdate) AddThree(i int) *JobProgressUpdate {
	jpu.mutation.AddThree(i)
	return jpu
}

// ClearThree clears the value of the "Three" field.
func (jpu *JobProgressUpdate) ClearThree() *JobProgressUpdate {
	jpu.mutation.ClearThree()
	return jpu
}

// SetFour sets the "Four" field.
func (jpu *JobProgressUpdate) SetFour(i int) *JobProgressUpdate {
	jpu.mutation.ResetFour()
	jpu.mutation.SetFour(i)
	return jpu
}

// SetNillableFour sets the "Four" field if the given value is not nil.
func (jpu *JobProgressUpdate) SetNillableFour(i *int) *JobProgressUpdate {
	if i != nil {
		jpu.SetFour(*i)
	}
	return jpu
}

// AddFour adds i to the "Four" field.
func (jpu *JobProgressUpdate) AddFour(i int) *JobProgressUpdate {
	jpu.mutation.AddFour(i)
	return jpu
}

// ClearFour clears the value of the "Four" field.
func (jpu *JobProgressUpdate) ClearFour() *JobProgressUpdate {
	jpu.mutation.ClearFour()
	return jpu
}

// SetFive sets the "Five" field.
func (jpu *JobProgressUpdate) SetFive(i int) *JobProgressUpdate {
	jpu.mutation.ResetFive()
	jpu.mutation.SetFive(i)
	return jpu
}

// SetNillableFive sets the "Five" field if the given value is not nil.
func (jpu *JobProgressUpdate) SetNillableFive(i *int) *JobProgressUpdate {
	if i != nil {
		jpu.SetFive(*i)
	}
	return jpu
}

// AddFive adds i to the "Five" field.
func (jpu *JobProgressUpdate) AddFive(i int) *JobProgressUpdate {
	jpu.mutation.AddFive(i)
	return jpu
}

// ClearFive clears the value of the "Five" field.
func (jpu *JobProgressUpdate) ClearFive() *JobProgressUpdate {
	jpu.mutation.ClearFive()
	return jpu
}

// SetSix sets the "Six" field.
func (jpu *JobProgressUpdate) SetSix(i int) *JobProgressUpdate {
	jpu.mutation.ResetSix()
	jpu.mutation.SetSix(i)
	return jpu
}

// SetNillableSix sets the "Six" field if the given value is not nil.
func (jpu *JobProgressUpdate) SetNillableSix(i *int) *JobProgressUpdate {
	if i != nil {
		jpu.SetSix(*i)
	}
	return jpu
}

// AddSix adds i to the "Six" field.
func (jpu *JobProgressUpdate) AddSix(i int) *JobProgressUpdate {
	jpu.mutation.AddSix(i)
	return jpu
}

// ClearSix clears the value of the "Six" field.
func (jpu *JobProgressUpdate) ClearSix() *JobProgressUpdate {
	jpu.mutation.ClearSix()
	return jpu
}

// SetCreatedAt sets the "CreatedAt" field.
func (jpu *JobProgressUpdate) SetCreatedAt(t time.Time) *JobProgressUpdate {
	jpu.mutation.SetCreatedAt(t)
	return jpu
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (jpu *JobProgressUpdate) SetNillableCreatedAt(t *time.Time) *JobProgressUpdate {
	if t != nil {
		jpu.SetCreatedAt(*t)
	}
	return jpu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (jpu *JobProgressUpdate) SetUpdatedAt(t time.Time) *JobProgressUpdate {
	jpu.mutation.SetUpdatedAt(t)
	return jpu
}

// AddProgresIDs adds the "progress" edge to the JobDetail entity by IDs.
func (jpu *JobProgressUpdate) AddProgresIDs(ids ...int) *JobProgressUpdate {
	jpu.mutation.AddProgresIDs(ids...)
	return jpu
}

// AddProgress adds the "progress" edges to the JobDetail entity.
func (jpu *JobProgressUpdate) AddProgress(j ...*JobDetail) *JobProgressUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpu.AddProgresIDs(ids...)
}

// Mutation returns the JobProgressMutation object of the builder.
func (jpu *JobProgressUpdate) Mutation() *JobProgressMutation {
	return jpu.mutation
}

// ClearProgress clears all "progress" edges to the JobDetail entity.
func (jpu *JobProgressUpdate) ClearProgress() *JobProgressUpdate {
	jpu.mutation.ClearProgress()
	return jpu
}

// RemoveProgresIDs removes the "progress" edge to JobDetail entities by IDs.
func (jpu *JobProgressUpdate) RemoveProgresIDs(ids ...int) *JobProgressUpdate {
	jpu.mutation.RemoveProgresIDs(ids...)
	return jpu
}

// RemoveProgress removes "progress" edges to JobDetail entities.
func (jpu *JobProgressUpdate) RemoveProgress(j ...*JobDetail) *JobProgressUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpu.RemoveProgresIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jpu *JobProgressUpdate) Save(ctx context.Context) (int, error) {
	jpu.defaults()
	return withHooks(ctx, jpu.sqlSave, jpu.mutation, jpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jpu *JobProgressUpdate) SaveX(ctx context.Context) int {
	affected, err := jpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jpu *JobProgressUpdate) Exec(ctx context.Context) error {
	_, err := jpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jpu *JobProgressUpdate) ExecX(ctx context.Context) {
	if err := jpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jpu *JobProgressUpdate) defaults() {
	if _, ok := jpu.mutation.UpdatedAt(); !ok {
		v := jobprogress.UpdateDefaultUpdatedAt()
		jpu.mutation.SetUpdatedAt(v)
	}
}

func (jpu *JobProgressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(jobprogress.Table, jobprogress.Columns, sqlgraph.NewFieldSpec(jobprogress.FieldID, field.TypeInt))
	if ps := jpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jpu.mutation.One(); ok {
		_spec.SetField(jobprogress.FieldOne, field.TypeInt, value)
	}
	if value, ok := jpu.mutation.AddedOne(); ok {
		_spec.AddField(jobprogress.FieldOne, field.TypeInt, value)
	}
	if jpu.mutation.OneCleared() {
		_spec.ClearField(jobprogress.FieldOne, field.TypeInt)
	}
	if value, ok := jpu.mutation.Two(); ok {
		_spec.SetField(jobprogress.FieldTwo, field.TypeInt, value)
	}
	if value, ok := jpu.mutation.AddedTwo(); ok {
		_spec.AddField(jobprogress.FieldTwo, field.TypeInt, value)
	}
	if jpu.mutation.TwoCleared() {
		_spec.ClearField(jobprogress.FieldTwo, field.TypeInt)
	}
	if value, ok := jpu.mutation.Three(); ok {
		_spec.SetField(jobprogress.FieldThree, field.TypeInt, value)
	}
	if value, ok := jpu.mutation.AddedThree(); ok {
		_spec.AddField(jobprogress.FieldThree, field.TypeInt, value)
	}
	if jpu.mutation.ThreeCleared() {
		_spec.ClearField(jobprogress.FieldThree, field.TypeInt)
	}
	if value, ok := jpu.mutation.Four(); ok {
		_spec.SetField(jobprogress.FieldFour, field.TypeInt, value)
	}
	if value, ok := jpu.mutation.AddedFour(); ok {
		_spec.AddField(jobprogress.FieldFour, field.TypeInt, value)
	}
	if jpu.mutation.FourCleared() {
		_spec.ClearField(jobprogress.FieldFour, field.TypeInt)
	}
	if value, ok := jpu.mutation.Five(); ok {
		_spec.SetField(jobprogress.FieldFive, field.TypeInt, value)
	}
	if value, ok := jpu.mutation.AddedFive(); ok {
		_spec.AddField(jobprogress.FieldFive, field.TypeInt, value)
	}
	if jpu.mutation.FiveCleared() {
		_spec.ClearField(jobprogress.FieldFive, field.TypeInt)
	}
	if value, ok := jpu.mutation.Six(); ok {
		_spec.SetField(jobprogress.FieldSix, field.TypeInt, value)
	}
	if value, ok := jpu.mutation.AddedSix(); ok {
		_spec.AddField(jobprogress.FieldSix, field.TypeInt, value)
	}
	if jpu.mutation.SixCleared() {
		_spec.ClearField(jobprogress.FieldSix, field.TypeInt)
	}
	if value, ok := jpu.mutation.CreatedAt(); ok {
		_spec.SetField(jobprogress.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := jpu.mutation.UpdatedAt(); ok {
		_spec.SetField(jobprogress.FieldUpdatedAt, field.TypeTime, value)
	}
	if jpu.mutation.ProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobprogress.ProgressTable,
			Columns: []string{jobprogress.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpu.mutation.RemovedProgressIDs(); len(nodes) > 0 && !jpu.mutation.ProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobprogress.ProgressTable,
			Columns: []string{jobprogress.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpu.mutation.ProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobprogress.ProgressTable,
			Columns: []string{jobprogress.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobprogress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jpu.mutation.done = true
	return n, nil
}

// JobProgressUpdateOne is the builder for updating a single JobProgress entity.
type JobProgressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobProgressMutation
}

// SetOne sets the "One" field.
func (jpuo *JobProgressUpdateOne) SetOne(i int) *JobProgressUpdateOne {
	jpuo.mutation.ResetOne()
	jpuo.mutation.SetOne(i)
	return jpuo
}

// SetNillableOne sets the "One" field if the given value is not nil.
func (jpuo *JobProgressUpdateOne) SetNillableOne(i *int) *JobProgressUpdateOne {
	if i != nil {
		jpuo.SetOne(*i)
	}
	return jpuo
}

// AddOne adds i to the "One" field.
func (jpuo *JobProgressUpdateOne) AddOne(i int) *JobProgressUpdateOne {
	jpuo.mutation.AddOne(i)
	return jpuo
}

// ClearOne clears the value of the "One" field.
func (jpuo *JobProgressUpdateOne) ClearOne() *JobProgressUpdateOne {
	jpuo.mutation.ClearOne()
	return jpuo
}

// SetTwo sets the "Two" field.
func (jpuo *JobProgressUpdateOne) SetTwo(i int) *JobProgressUpdateOne {
	jpuo.mutation.ResetTwo()
	jpuo.mutation.SetTwo(i)
	return jpuo
}

// SetNillableTwo sets the "Two" field if the given value is not nil.
func (jpuo *JobProgressUpdateOne) SetNillableTwo(i *int) *JobProgressUpdateOne {
	if i != nil {
		jpuo.SetTwo(*i)
	}
	return jpuo
}

// AddTwo adds i to the "Two" field.
func (jpuo *JobProgressUpdateOne) AddTwo(i int) *JobProgressUpdateOne {
	jpuo.mutation.AddTwo(i)
	return jpuo
}

// ClearTwo clears the value of the "Two" field.
func (jpuo *JobProgressUpdateOne) ClearTwo() *JobProgressUpdateOne {
	jpuo.mutation.ClearTwo()
	return jpuo
}

// SetThree sets the "Three" field.
func (jpuo *JobProgressUpdateOne) SetThree(i int) *JobProgressUpdateOne {
	jpuo.mutation.ResetThree()
	jpuo.mutation.SetThree(i)
	return jpuo
}

// SetNillableThree sets the "Three" field if the given value is not nil.
func (jpuo *JobProgressUpdateOne) SetNillableThree(i *int) *JobProgressUpdateOne {
	if i != nil {
		jpuo.SetThree(*i)
	}
	return jpuo
}

// AddThree adds i to the "Three" field.
func (jpuo *JobProgressUpdateOne) AddThree(i int) *JobProgressUpdateOne {
	jpuo.mutation.AddThree(i)
	return jpuo
}

// ClearThree clears the value of the "Three" field.
func (jpuo *JobProgressUpdateOne) ClearThree() *JobProgressUpdateOne {
	jpuo.mutation.ClearThree()
	return jpuo
}

// SetFour sets the "Four" field.
func (jpuo *JobProgressUpdateOne) SetFour(i int) *JobProgressUpdateOne {
	jpuo.mutation.ResetFour()
	jpuo.mutation.SetFour(i)
	return jpuo
}

// SetNillableFour sets the "Four" field if the given value is not nil.
func (jpuo *JobProgressUpdateOne) SetNillableFour(i *int) *JobProgressUpdateOne {
	if i != nil {
		jpuo.SetFour(*i)
	}
	return jpuo
}

// AddFour adds i to the "Four" field.
func (jpuo *JobProgressUpdateOne) AddFour(i int) *JobProgressUpdateOne {
	jpuo.mutation.AddFour(i)
	return jpuo
}

// ClearFour clears the value of the "Four" field.
func (jpuo *JobProgressUpdateOne) ClearFour() *JobProgressUpdateOne {
	jpuo.mutation.ClearFour()
	return jpuo
}

// SetFive sets the "Five" field.
func (jpuo *JobProgressUpdateOne) SetFive(i int) *JobProgressUpdateOne {
	jpuo.mutation.ResetFive()
	jpuo.mutation.SetFive(i)
	return jpuo
}

// SetNillableFive sets the "Five" field if the given value is not nil.
func (jpuo *JobProgressUpdateOne) SetNillableFive(i *int) *JobProgressUpdateOne {
	if i != nil {
		jpuo.SetFive(*i)
	}
	return jpuo
}

// AddFive adds i to the "Five" field.
func (jpuo *JobProgressUpdateOne) AddFive(i int) *JobProgressUpdateOne {
	jpuo.mutation.AddFive(i)
	return jpuo
}

// ClearFive clears the value of the "Five" field.
func (jpuo *JobProgressUpdateOne) ClearFive() *JobProgressUpdateOne {
	jpuo.mutation.ClearFive()
	return jpuo
}

// SetSix sets the "Six" field.
func (jpuo *JobProgressUpdateOne) SetSix(i int) *JobProgressUpdateOne {
	jpuo.mutation.ResetSix()
	jpuo.mutation.SetSix(i)
	return jpuo
}

// SetNillableSix sets the "Six" field if the given value is not nil.
func (jpuo *JobProgressUpdateOne) SetNillableSix(i *int) *JobProgressUpdateOne {
	if i != nil {
		jpuo.SetSix(*i)
	}
	return jpuo
}

// AddSix adds i to the "Six" field.
func (jpuo *JobProgressUpdateOne) AddSix(i int) *JobProgressUpdateOne {
	jpuo.mutation.AddSix(i)
	return jpuo
}

// ClearSix clears the value of the "Six" field.
func (jpuo *JobProgressUpdateOne) ClearSix() *JobProgressUpdateOne {
	jpuo.mutation.ClearSix()
	return jpuo
}

// SetCreatedAt sets the "CreatedAt" field.
func (jpuo *JobProgressUpdateOne) SetCreatedAt(t time.Time) *JobProgressUpdateOne {
	jpuo.mutation.SetCreatedAt(t)
	return jpuo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (jpuo *JobProgressUpdateOne) SetNillableCreatedAt(t *time.Time) *JobProgressUpdateOne {
	if t != nil {
		jpuo.SetCreatedAt(*t)
	}
	return jpuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (jpuo *JobProgressUpdateOne) SetUpdatedAt(t time.Time) *JobProgressUpdateOne {
	jpuo.mutation.SetUpdatedAt(t)
	return jpuo
}

// AddProgresIDs adds the "progress" edge to the JobDetail entity by IDs.
func (jpuo *JobProgressUpdateOne) AddProgresIDs(ids ...int) *JobProgressUpdateOne {
	jpuo.mutation.AddProgresIDs(ids...)
	return jpuo
}

// AddProgress adds the "progress" edges to the JobDetail entity.
func (jpuo *JobProgressUpdateOne) AddProgress(j ...*JobDetail) *JobProgressUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpuo.AddProgresIDs(ids...)
}

// Mutation returns the JobProgressMutation object of the builder.
func (jpuo *JobProgressUpdateOne) Mutation() *JobProgressMutation {
	return jpuo.mutation
}

// ClearProgress clears all "progress" edges to the JobDetail entity.
func (jpuo *JobProgressUpdateOne) ClearProgress() *JobProgressUpdateOne {
	jpuo.mutation.ClearProgress()
	return jpuo
}

// RemoveProgresIDs removes the "progress" edge to JobDetail entities by IDs.
func (jpuo *JobProgressUpdateOne) RemoveProgresIDs(ids ...int) *JobProgressUpdateOne {
	jpuo.mutation.RemoveProgresIDs(ids...)
	return jpuo
}

// RemoveProgress removes "progress" edges to JobDetail entities.
func (jpuo *JobProgressUpdateOne) RemoveProgress(j ...*JobDetail) *JobProgressUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jpuo.RemoveProgresIDs(ids...)
}

// Where appends a list predicates to the JobProgressUpdate builder.
func (jpuo *JobProgressUpdateOne) Where(ps ...predicate.JobProgress) *JobProgressUpdateOne {
	jpuo.mutation.Where(ps...)
	return jpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jpuo *JobProgressUpdateOne) Select(field string, fields ...string) *JobProgressUpdateOne {
	jpuo.fields = append([]string{field}, fields...)
	return jpuo
}

// Save executes the query and returns the updated JobProgress entity.
func (jpuo *JobProgressUpdateOne) Save(ctx context.Context) (*JobProgress, error) {
	jpuo.defaults()
	return withHooks(ctx, jpuo.sqlSave, jpuo.mutation, jpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jpuo *JobProgressUpdateOne) SaveX(ctx context.Context) *JobProgress {
	node, err := jpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jpuo *JobProgressUpdateOne) Exec(ctx context.Context) error {
	_, err := jpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jpuo *JobProgressUpdateOne) ExecX(ctx context.Context) {
	if err := jpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jpuo *JobProgressUpdateOne) defaults() {
	if _, ok := jpuo.mutation.UpdatedAt(); !ok {
		v := jobprogress.UpdateDefaultUpdatedAt()
		jpuo.mutation.SetUpdatedAt(v)
	}
}

func (jpuo *JobProgressUpdateOne) sqlSave(ctx context.Context) (_node *JobProgress, err error) {
	_spec := sqlgraph.NewUpdateSpec(jobprogress.Table, jobprogress.Columns, sqlgraph.NewFieldSpec(jobprogress.FieldID, field.TypeInt))
	id, ok := jpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JobProgress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobprogress.FieldID)
		for _, f := range fields {
			if !jobprogress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jobprogress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jpuo.mutation.One(); ok {
		_spec.SetField(jobprogress.FieldOne, field.TypeInt, value)
	}
	if value, ok := jpuo.mutation.AddedOne(); ok {
		_spec.AddField(jobprogress.FieldOne, field.TypeInt, value)
	}
	if jpuo.mutation.OneCleared() {
		_spec.ClearField(jobprogress.FieldOne, field.TypeInt)
	}
	if value, ok := jpuo.mutation.Two(); ok {
		_spec.SetField(jobprogress.FieldTwo, field.TypeInt, value)
	}
	if value, ok := jpuo.mutation.AddedTwo(); ok {
		_spec.AddField(jobprogress.FieldTwo, field.TypeInt, value)
	}
	if jpuo.mutation.TwoCleared() {
		_spec.ClearField(jobprogress.FieldTwo, field.TypeInt)
	}
	if value, ok := jpuo.mutation.Three(); ok {
		_spec.SetField(jobprogress.FieldThree, field.TypeInt, value)
	}
	if value, ok := jpuo.mutation.AddedThree(); ok {
		_spec.AddField(jobprogress.FieldThree, field.TypeInt, value)
	}
	if jpuo.mutation.ThreeCleared() {
		_spec.ClearField(jobprogress.FieldThree, field.TypeInt)
	}
	if value, ok := jpuo.mutation.Four(); ok {
		_spec.SetField(jobprogress.FieldFour, field.TypeInt, value)
	}
	if value, ok := jpuo.mutation.AddedFour(); ok {
		_spec.AddField(jobprogress.FieldFour, field.TypeInt, value)
	}
	if jpuo.mutation.FourCleared() {
		_spec.ClearField(jobprogress.FieldFour, field.TypeInt)
	}
	if value, ok := jpuo.mutation.Five(); ok {
		_spec.SetField(jobprogress.FieldFive, field.TypeInt, value)
	}
	if value, ok := jpuo.mutation.AddedFive(); ok {
		_spec.AddField(jobprogress.FieldFive, field.TypeInt, value)
	}
	if jpuo.mutation.FiveCleared() {
		_spec.ClearField(jobprogress.FieldFive, field.TypeInt)
	}
	if value, ok := jpuo.mutation.Six(); ok {
		_spec.SetField(jobprogress.FieldSix, field.TypeInt, value)
	}
	if value, ok := jpuo.mutation.AddedSix(); ok {
		_spec.AddField(jobprogress.FieldSix, field.TypeInt, value)
	}
	if jpuo.mutation.SixCleared() {
		_spec.ClearField(jobprogress.FieldSix, field.TypeInt)
	}
	if value, ok := jpuo.mutation.CreatedAt(); ok {
		_spec.SetField(jobprogress.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := jpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(jobprogress.FieldUpdatedAt, field.TypeTime, value)
	}
	if jpuo.mutation.ProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobprogress.ProgressTable,
			Columns: []string{jobprogress.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpuo.mutation.RemovedProgressIDs(); len(nodes) > 0 && !jpuo.mutation.ProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobprogress.ProgressTable,
			Columns: []string{jobprogress.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jpuo.mutation.ProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobprogress.ProgressTable,
			Columns: []string{jobprogress.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &JobProgress{config: jpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobprogress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jpuo.mutation.done = true
	return _node, nil
}
