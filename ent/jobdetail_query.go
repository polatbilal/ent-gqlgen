// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"gqlgen-ent/ent/companydetail"
	"gqlgen-ent/ent/companyengineer"
	"gqlgen-ent/ent/jobauthor"
	"gqlgen-ent/ent/jobcontractor"
	"gqlgen-ent/ent/jobdetail"
	"gqlgen-ent/ent/joblayer"
	"gqlgen-ent/ent/jobowner"
	"gqlgen-ent/ent/jobpayments"
	"gqlgen-ent/ent/jobprogress"
	"gqlgen-ent/ent/predicate"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobDetailQuery is the builder for querying JobDetail entities.
type JobDetailQuery struct {
	config
	ctx                    *QueryContext
	order                  []jobdetail.OrderOption
	inters                 []Interceptor
	predicates             []predicate.JobDetail
	withOwner              *JobOwnerQuery
	withContractor         *JobContractorQuery
	withAuthor             *JobAuthorQuery
	withProgress           *JobProgressQuery
	withInspector          *CompanyEngineerQuery
	withArchitect          *CompanyEngineerQuery
	withStatic             *CompanyEngineerQuery
	withMechanic           *CompanyEngineerQuery
	withElectric           *CompanyEngineerQuery
	withController         *CompanyEngineerQuery
	withMechaniccontroller *CompanyEngineerQuery
	withElectriccontroller *CompanyEngineerQuery
	withLayers             *JobLayerQuery
	withPayments           *JobPaymentsQuery
	withCompany            *CompanyDetailQuery
	withFKs                bool
	modifiers              []func(*sql.Selector)
	loadTotal              []func(context.Context, []*JobDetail) error
	withNamedLayers        map[string]*JobLayerQuery
	withNamedPayments      map[string]*JobPaymentsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the JobDetailQuery builder.
func (jdq *JobDetailQuery) Where(ps ...predicate.JobDetail) *JobDetailQuery {
	jdq.predicates = append(jdq.predicates, ps...)
	return jdq
}

// Limit the number of records to be returned by this query.
func (jdq *JobDetailQuery) Limit(limit int) *JobDetailQuery {
	jdq.ctx.Limit = &limit
	return jdq
}

// Offset to start from.
func (jdq *JobDetailQuery) Offset(offset int) *JobDetailQuery {
	jdq.ctx.Offset = &offset
	return jdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (jdq *JobDetailQuery) Unique(unique bool) *JobDetailQuery {
	jdq.ctx.Unique = &unique
	return jdq
}

// Order specifies how the records should be ordered.
func (jdq *JobDetailQuery) Order(o ...jobdetail.OrderOption) *JobDetailQuery {
	jdq.order = append(jdq.order, o...)
	return jdq
}

// QueryOwner chains the current query on the "owner" edge.
func (jdq *JobDetailQuery) QueryOwner() *JobOwnerQuery {
	query := (&JobOwnerClient{config: jdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, selector),
			sqlgraph.To(jobowner.Table, jobowner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.OwnerTable, jobdetail.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(jdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContractor chains the current query on the "contractor" edge.
func (jdq *JobDetailQuery) QueryContractor() *JobContractorQuery {
	query := (&JobContractorClient{config: jdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, selector),
			sqlgraph.To(jobcontractor.Table, jobcontractor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.ContractorTable, jobdetail.ContractorColumn),
		)
		fromU = sqlgraph.SetNeighbors(jdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAuthor chains the current query on the "author" edge.
func (jdq *JobDetailQuery) QueryAuthor() *JobAuthorQuery {
	query := (&JobAuthorClient{config: jdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, selector),
			sqlgraph.To(jobauthor.Table, jobauthor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.AuthorTable, jobdetail.AuthorColumn),
		)
		fromU = sqlgraph.SetNeighbors(jdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProgress chains the current query on the "progress" edge.
func (jdq *JobDetailQuery) QueryProgress() *JobProgressQuery {
	query := (&JobProgressClient{config: jdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, selector),
			sqlgraph.To(jobprogress.Table, jobprogress.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.ProgressTable, jobdetail.ProgressColumn),
		)
		fromU = sqlgraph.SetNeighbors(jdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInspector chains the current query on the "inspector" edge.
func (jdq *JobDetailQuery) QueryInspector() *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: jdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, selector),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.InspectorTable, jobdetail.InspectorColumn),
		)
		fromU = sqlgraph.SetNeighbors(jdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryArchitect chains the current query on the "architect" edge.
func (jdq *JobDetailQuery) QueryArchitect() *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: jdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, selector),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.ArchitectTable, jobdetail.ArchitectColumn),
		)
		fromU = sqlgraph.SetNeighbors(jdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStatic chains the current query on the "static" edge.
func (jdq *JobDetailQuery) QueryStatic() *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: jdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, selector),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.StaticTable, jobdetail.StaticColumn),
		)
		fromU = sqlgraph.SetNeighbors(jdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMechanic chains the current query on the "mechanic" edge.
func (jdq *JobDetailQuery) QueryMechanic() *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: jdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, selector),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.MechanicTable, jobdetail.MechanicColumn),
		)
		fromU = sqlgraph.SetNeighbors(jdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryElectric chains the current query on the "electric" edge.
func (jdq *JobDetailQuery) QueryElectric() *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: jdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, selector),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.ElectricTable, jobdetail.ElectricColumn),
		)
		fromU = sqlgraph.SetNeighbors(jdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryController chains the current query on the "controller" edge.
func (jdq *JobDetailQuery) QueryController() *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: jdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, selector),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.ControllerTable, jobdetail.ControllerColumn),
		)
		fromU = sqlgraph.SetNeighbors(jdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMechaniccontroller chains the current query on the "mechaniccontroller" edge.
func (jdq *JobDetailQuery) QueryMechaniccontroller() *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: jdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, selector),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.MechaniccontrollerTable, jobdetail.MechaniccontrollerColumn),
		)
		fromU = sqlgraph.SetNeighbors(jdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryElectriccontroller chains the current query on the "electriccontroller" edge.
func (jdq *JobDetailQuery) QueryElectriccontroller() *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: jdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, selector),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.ElectriccontrollerTable, jobdetail.ElectriccontrollerColumn),
		)
		fromU = sqlgraph.SetNeighbors(jdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLayers chains the current query on the "layers" edge.
func (jdq *JobDetailQuery) QueryLayers() *JobLayerQuery {
	query := (&JobLayerClient{config: jdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, selector),
			sqlgraph.To(joblayer.Table, joblayer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobdetail.LayersTable, jobdetail.LayersColumn),
		)
		fromU = sqlgraph.SetNeighbors(jdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPayments chains the current query on the "payments" edge.
func (jdq *JobDetailQuery) QueryPayments() *JobPaymentsQuery {
	query := (&JobPaymentsClient{config: jdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, selector),
			sqlgraph.To(jobpayments.Table, jobpayments.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobdetail.PaymentsTable, jobdetail.PaymentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(jdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCompany chains the current query on the "company" edge.
func (jdq *JobDetailQuery) QueryCompany() *CompanyDetailQuery {
	query := (&CompanyDetailClient{config: jdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobdetail.Table, jobdetail.FieldID, selector),
			sqlgraph.To(companydetail.Table, companydetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobdetail.CompanyTable, jobdetail.CompanyColumn),
		)
		fromU = sqlgraph.SetNeighbors(jdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first JobDetail entity from the query.
// Returns a *NotFoundError when no JobDetail was found.
func (jdq *JobDetailQuery) First(ctx context.Context) (*JobDetail, error) {
	nodes, err := jdq.Limit(1).All(setContextOp(ctx, jdq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{jobdetail.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jdq *JobDetailQuery) FirstX(ctx context.Context) *JobDetail {
	node, err := jdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first JobDetail ID from the query.
// Returns a *NotFoundError when no JobDetail ID was found.
func (jdq *JobDetailQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jdq.Limit(1).IDs(setContextOp(ctx, jdq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{jobdetail.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (jdq *JobDetailQuery) FirstIDX(ctx context.Context) int {
	id, err := jdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single JobDetail entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one JobDetail entity is found.
// Returns a *NotFoundError when no JobDetail entities are found.
func (jdq *JobDetailQuery) Only(ctx context.Context) (*JobDetail, error) {
	nodes, err := jdq.Limit(2).All(setContextOp(ctx, jdq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{jobdetail.Label}
	default:
		return nil, &NotSingularError{jobdetail.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jdq *JobDetailQuery) OnlyX(ctx context.Context) *JobDetail {
	node, err := jdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only JobDetail ID in the query.
// Returns a *NotSingularError when more than one JobDetail ID is found.
// Returns a *NotFoundError when no entities are found.
func (jdq *JobDetailQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jdq.Limit(2).IDs(setContextOp(ctx, jdq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{jobdetail.Label}
	default:
		err = &NotSingularError{jobdetail.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (jdq *JobDetailQuery) OnlyIDX(ctx context.Context) int {
	id, err := jdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of JobDetails.
func (jdq *JobDetailQuery) All(ctx context.Context) ([]*JobDetail, error) {
	ctx = setContextOp(ctx, jdq.ctx, ent.OpQueryAll)
	if err := jdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*JobDetail, *JobDetailQuery]()
	return withInterceptors[[]*JobDetail](ctx, jdq, qr, jdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (jdq *JobDetailQuery) AllX(ctx context.Context) []*JobDetail {
	nodes, err := jdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of JobDetail IDs.
func (jdq *JobDetailQuery) IDs(ctx context.Context) (ids []int, err error) {
	if jdq.ctx.Unique == nil && jdq.path != nil {
		jdq.Unique(true)
	}
	ctx = setContextOp(ctx, jdq.ctx, ent.OpQueryIDs)
	if err = jdq.Select(jobdetail.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jdq *JobDetailQuery) IDsX(ctx context.Context) []int {
	ids, err := jdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jdq *JobDetailQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, jdq.ctx, ent.OpQueryCount)
	if err := jdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, jdq, querierCount[*JobDetailQuery](), jdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (jdq *JobDetailQuery) CountX(ctx context.Context) int {
	count, err := jdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jdq *JobDetailQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, jdq.ctx, ent.OpQueryExist)
	switch _, err := jdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (jdq *JobDetailQuery) ExistX(ctx context.Context) bool {
	exist, err := jdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the JobDetailQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jdq *JobDetailQuery) Clone() *JobDetailQuery {
	if jdq == nil {
		return nil
	}
	return &JobDetailQuery{
		config:                 jdq.config,
		ctx:                    jdq.ctx.Clone(),
		order:                  append([]jobdetail.OrderOption{}, jdq.order...),
		inters:                 append([]Interceptor{}, jdq.inters...),
		predicates:             append([]predicate.JobDetail{}, jdq.predicates...),
		withOwner:              jdq.withOwner.Clone(),
		withContractor:         jdq.withContractor.Clone(),
		withAuthor:             jdq.withAuthor.Clone(),
		withProgress:           jdq.withProgress.Clone(),
		withInspector:          jdq.withInspector.Clone(),
		withArchitect:          jdq.withArchitect.Clone(),
		withStatic:             jdq.withStatic.Clone(),
		withMechanic:           jdq.withMechanic.Clone(),
		withElectric:           jdq.withElectric.Clone(),
		withController:         jdq.withController.Clone(),
		withMechaniccontroller: jdq.withMechaniccontroller.Clone(),
		withElectriccontroller: jdq.withElectriccontroller.Clone(),
		withLayers:             jdq.withLayers.Clone(),
		withPayments:           jdq.withPayments.Clone(),
		withCompany:            jdq.withCompany.Clone(),
		// clone intermediate query.
		sql:  jdq.sql.Clone(),
		path: jdq.path,
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (jdq *JobDetailQuery) WithOwner(opts ...func(*JobOwnerQuery)) *JobDetailQuery {
	query := (&JobOwnerClient{config: jdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jdq.withOwner = query
	return jdq
}

// WithContractor tells the query-builder to eager-load the nodes that are connected to
// the "contractor" edge. The optional arguments are used to configure the query builder of the edge.
func (jdq *JobDetailQuery) WithContractor(opts ...func(*JobContractorQuery)) *JobDetailQuery {
	query := (&JobContractorClient{config: jdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jdq.withContractor = query
	return jdq
}

// WithAuthor tells the query-builder to eager-load the nodes that are connected to
// the "author" edge. The optional arguments are used to configure the query builder of the edge.
func (jdq *JobDetailQuery) WithAuthor(opts ...func(*JobAuthorQuery)) *JobDetailQuery {
	query := (&JobAuthorClient{config: jdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jdq.withAuthor = query
	return jdq
}

// WithProgress tells the query-builder to eager-load the nodes that are connected to
// the "progress" edge. The optional arguments are used to configure the query builder of the edge.
func (jdq *JobDetailQuery) WithProgress(opts ...func(*JobProgressQuery)) *JobDetailQuery {
	query := (&JobProgressClient{config: jdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jdq.withProgress = query
	return jdq
}

// WithInspector tells the query-builder to eager-load the nodes that are connected to
// the "inspector" edge. The optional arguments are used to configure the query builder of the edge.
func (jdq *JobDetailQuery) WithInspector(opts ...func(*CompanyEngineerQuery)) *JobDetailQuery {
	query := (&CompanyEngineerClient{config: jdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jdq.withInspector = query
	return jdq
}

// WithArchitect tells the query-builder to eager-load the nodes that are connected to
// the "architect" edge. The optional arguments are used to configure the query builder of the edge.
func (jdq *JobDetailQuery) WithArchitect(opts ...func(*CompanyEngineerQuery)) *JobDetailQuery {
	query := (&CompanyEngineerClient{config: jdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jdq.withArchitect = query
	return jdq
}

// WithStatic tells the query-builder to eager-load the nodes that are connected to
// the "static" edge. The optional arguments are used to configure the query builder of the edge.
func (jdq *JobDetailQuery) WithStatic(opts ...func(*CompanyEngineerQuery)) *JobDetailQuery {
	query := (&CompanyEngineerClient{config: jdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jdq.withStatic = query
	return jdq
}

// WithMechanic tells the query-builder to eager-load the nodes that are connected to
// the "mechanic" edge. The optional arguments are used to configure the query builder of the edge.
func (jdq *JobDetailQuery) WithMechanic(opts ...func(*CompanyEngineerQuery)) *JobDetailQuery {
	query := (&CompanyEngineerClient{config: jdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jdq.withMechanic = query
	return jdq
}

// WithElectric tells the query-builder to eager-load the nodes that are connected to
// the "electric" edge. The optional arguments are used to configure the query builder of the edge.
func (jdq *JobDetailQuery) WithElectric(opts ...func(*CompanyEngineerQuery)) *JobDetailQuery {
	query := (&CompanyEngineerClient{config: jdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jdq.withElectric = query
	return jdq
}

// WithController tells the query-builder to eager-load the nodes that are connected to
// the "controller" edge. The optional arguments are used to configure the query builder of the edge.
func (jdq *JobDetailQuery) WithController(opts ...func(*CompanyEngineerQuery)) *JobDetailQuery {
	query := (&CompanyEngineerClient{config: jdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jdq.withController = query
	return jdq
}

// WithMechaniccontroller tells the query-builder to eager-load the nodes that are connected to
// the "mechaniccontroller" edge. The optional arguments are used to configure the query builder of the edge.
func (jdq *JobDetailQuery) WithMechaniccontroller(opts ...func(*CompanyEngineerQuery)) *JobDetailQuery {
	query := (&CompanyEngineerClient{config: jdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jdq.withMechaniccontroller = query
	return jdq
}

// WithElectriccontroller tells the query-builder to eager-load the nodes that are connected to
// the "electriccontroller" edge. The optional arguments are used to configure the query builder of the edge.
func (jdq *JobDetailQuery) WithElectriccontroller(opts ...func(*CompanyEngineerQuery)) *JobDetailQuery {
	query := (&CompanyEngineerClient{config: jdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jdq.withElectriccontroller = query
	return jdq
}

// WithLayers tells the query-builder to eager-load the nodes that are connected to
// the "layers" edge. The optional arguments are used to configure the query builder of the edge.
func (jdq *JobDetailQuery) WithLayers(opts ...func(*JobLayerQuery)) *JobDetailQuery {
	query := (&JobLayerClient{config: jdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jdq.withLayers = query
	return jdq
}

// WithPayments tells the query-builder to eager-load the nodes that are connected to
// the "payments" edge. The optional arguments are used to configure the query builder of the edge.
func (jdq *JobDetailQuery) WithPayments(opts ...func(*JobPaymentsQuery)) *JobDetailQuery {
	query := (&JobPaymentsClient{config: jdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jdq.withPayments = query
	return jdq
}

// WithCompany tells the query-builder to eager-load the nodes that are connected to
// the "company" edge. The optional arguments are used to configure the query builder of the edge.
func (jdq *JobDetailQuery) WithCompany(opts ...func(*CompanyDetailQuery)) *JobDetailQuery {
	query := (&CompanyDetailClient{config: jdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jdq.withCompany = query
	return jdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		YibfNo int `json:"YibfNo,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.JobDetail.Query().
//		GroupBy(jobdetail.FieldYibfNo).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (jdq *JobDetailQuery) GroupBy(field string, fields ...string) *JobDetailGroupBy {
	jdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &JobDetailGroupBy{build: jdq}
	grbuild.flds = &jdq.ctx.Fields
	grbuild.label = jobdetail.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		YibfNo int `json:"YibfNo,omitempty"`
//	}
//
//	client.JobDetail.Query().
//		Select(jobdetail.FieldYibfNo).
//		Scan(ctx, &v)
func (jdq *JobDetailQuery) Select(fields ...string) *JobDetailSelect {
	jdq.ctx.Fields = append(jdq.ctx.Fields, fields...)
	sbuild := &JobDetailSelect{JobDetailQuery: jdq}
	sbuild.label = jobdetail.Label
	sbuild.flds, sbuild.scan = &jdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a JobDetailSelect configured with the given aggregations.
func (jdq *JobDetailQuery) Aggregate(fns ...AggregateFunc) *JobDetailSelect {
	return jdq.Select().Aggregate(fns...)
}

func (jdq *JobDetailQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range jdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, jdq); err != nil {
				return err
			}
		}
	}
	for _, f := range jdq.ctx.Fields {
		if !jobdetail.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if jdq.path != nil {
		prev, err := jdq.path(ctx)
		if err != nil {
			return err
		}
		jdq.sql = prev
	}
	return nil
}

func (jdq *JobDetailQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*JobDetail, error) {
	var (
		nodes       = []*JobDetail{}
		withFKs     = jdq.withFKs
		_spec       = jdq.querySpec()
		loadedTypes = [15]bool{
			jdq.withOwner != nil,
			jdq.withContractor != nil,
			jdq.withAuthor != nil,
			jdq.withProgress != nil,
			jdq.withInspector != nil,
			jdq.withArchitect != nil,
			jdq.withStatic != nil,
			jdq.withMechanic != nil,
			jdq.withElectric != nil,
			jdq.withController != nil,
			jdq.withMechaniccontroller != nil,
			jdq.withElectriccontroller != nil,
			jdq.withLayers != nil,
			jdq.withPayments != nil,
			jdq.withCompany != nil,
		}
	)
	if jdq.withOwner != nil || jdq.withContractor != nil || jdq.withAuthor != nil || jdq.withProgress != nil || jdq.withInspector != nil || jdq.withArchitect != nil || jdq.withStatic != nil || jdq.withMechanic != nil || jdq.withElectric != nil || jdq.withController != nil || jdq.withMechaniccontroller != nil || jdq.withElectriccontroller != nil || jdq.withCompany != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, jobdetail.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*JobDetail).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &JobDetail{config: jdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(jdq.modifiers) > 0 {
		_spec.Modifiers = jdq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, jdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := jdq.withOwner; query != nil {
		if err := jdq.loadOwner(ctx, query, nodes, nil,
			func(n *JobDetail, e *JobOwner) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := jdq.withContractor; query != nil {
		if err := jdq.loadContractor(ctx, query, nodes, nil,
			func(n *JobDetail, e *JobContractor) { n.Edges.Contractor = e }); err != nil {
			return nil, err
		}
	}
	if query := jdq.withAuthor; query != nil {
		if err := jdq.loadAuthor(ctx, query, nodes, nil,
			func(n *JobDetail, e *JobAuthor) { n.Edges.Author = e }); err != nil {
			return nil, err
		}
	}
	if query := jdq.withProgress; query != nil {
		if err := jdq.loadProgress(ctx, query, nodes, nil,
			func(n *JobDetail, e *JobProgress) { n.Edges.Progress = e }); err != nil {
			return nil, err
		}
	}
	if query := jdq.withInspector; query != nil {
		if err := jdq.loadInspector(ctx, query, nodes, nil,
			func(n *JobDetail, e *CompanyEngineer) { n.Edges.Inspector = e }); err != nil {
			return nil, err
		}
	}
	if query := jdq.withArchitect; query != nil {
		if err := jdq.loadArchitect(ctx, query, nodes, nil,
			func(n *JobDetail, e *CompanyEngineer) { n.Edges.Architect = e }); err != nil {
			return nil, err
		}
	}
	if query := jdq.withStatic; query != nil {
		if err := jdq.loadStatic(ctx, query, nodes, nil,
			func(n *JobDetail, e *CompanyEngineer) { n.Edges.Static = e }); err != nil {
			return nil, err
		}
	}
	if query := jdq.withMechanic; query != nil {
		if err := jdq.loadMechanic(ctx, query, nodes, nil,
			func(n *JobDetail, e *CompanyEngineer) { n.Edges.Mechanic = e }); err != nil {
			return nil, err
		}
	}
	if query := jdq.withElectric; query != nil {
		if err := jdq.loadElectric(ctx, query, nodes, nil,
			func(n *JobDetail, e *CompanyEngineer) { n.Edges.Electric = e }); err != nil {
			return nil, err
		}
	}
	if query := jdq.withController; query != nil {
		if err := jdq.loadController(ctx, query, nodes, nil,
			func(n *JobDetail, e *CompanyEngineer) { n.Edges.Controller = e }); err != nil {
			return nil, err
		}
	}
	if query := jdq.withMechaniccontroller; query != nil {
		if err := jdq.loadMechaniccontroller(ctx, query, nodes, nil,
			func(n *JobDetail, e *CompanyEngineer) { n.Edges.Mechaniccontroller = e }); err != nil {
			return nil, err
		}
	}
	if query := jdq.withElectriccontroller; query != nil {
		if err := jdq.loadElectriccontroller(ctx, query, nodes, nil,
			func(n *JobDetail, e *CompanyEngineer) { n.Edges.Electriccontroller = e }); err != nil {
			return nil, err
		}
	}
	if query := jdq.withLayers; query != nil {
		if err := jdq.loadLayers(ctx, query, nodes,
			func(n *JobDetail) { n.Edges.Layers = []*JobLayer{} },
			func(n *JobDetail, e *JobLayer) { n.Edges.Layers = append(n.Edges.Layers, e) }); err != nil {
			return nil, err
		}
	}
	if query := jdq.withPayments; query != nil {
		if err := jdq.loadPayments(ctx, query, nodes,
			func(n *JobDetail) { n.Edges.Payments = []*JobPayments{} },
			func(n *JobDetail, e *JobPayments) { n.Edges.Payments = append(n.Edges.Payments, e) }); err != nil {
			return nil, err
		}
	}
	if query := jdq.withCompany; query != nil {
		if err := jdq.loadCompany(ctx, query, nodes, nil,
			func(n *JobDetail, e *CompanyDetail) { n.Edges.Company = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range jdq.withNamedLayers {
		if err := jdq.loadLayers(ctx, query, nodes,
			func(n *JobDetail) { n.appendNamedLayers(name) },
			func(n *JobDetail, e *JobLayer) { n.appendNamedLayers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range jdq.withNamedPayments {
		if err := jdq.loadPayments(ctx, query, nodes,
			func(n *JobDetail) { n.appendNamedPayments(name) },
			func(n *JobDetail, e *JobPayments) { n.appendNamedPayments(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range jdq.loadTotal {
		if err := jdq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (jdq *JobDetailQuery) loadOwner(ctx context.Context, query *JobOwnerQuery, nodes []*JobDetail, init func(*JobDetail), assign func(*JobDetail, *JobOwner)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobDetail)
	for i := range nodes {
		if nodes[i].owner_id == nil {
			continue
		}
		fk := *nodes[i].owner_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(jobowner.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jdq *JobDetailQuery) loadContractor(ctx context.Context, query *JobContractorQuery, nodes []*JobDetail, init func(*JobDetail), assign func(*JobDetail, *JobContractor)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobDetail)
	for i := range nodes {
		if nodes[i].contractor_id == nil {
			continue
		}
		fk := *nodes[i].contractor_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(jobcontractor.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "contractor_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jdq *JobDetailQuery) loadAuthor(ctx context.Context, query *JobAuthorQuery, nodes []*JobDetail, init func(*JobDetail), assign func(*JobDetail, *JobAuthor)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobDetail)
	for i := range nodes {
		if nodes[i].author_id == nil {
			continue
		}
		fk := *nodes[i].author_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(jobauthor.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "author_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jdq *JobDetailQuery) loadProgress(ctx context.Context, query *JobProgressQuery, nodes []*JobDetail, init func(*JobDetail), assign func(*JobDetail, *JobProgress)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobDetail)
	for i := range nodes {
		if nodes[i].progress_id == nil {
			continue
		}
		fk := *nodes[i].progress_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(jobprogress.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "progress_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jdq *JobDetailQuery) loadInspector(ctx context.Context, query *CompanyEngineerQuery, nodes []*JobDetail, init func(*JobDetail), assign func(*JobDetail, *CompanyEngineer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobDetail)
	for i := range nodes {
		if nodes[i].inspector_id == nil {
			continue
		}
		fk := *nodes[i].inspector_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companyengineer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "inspector_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jdq *JobDetailQuery) loadArchitect(ctx context.Context, query *CompanyEngineerQuery, nodes []*JobDetail, init func(*JobDetail), assign func(*JobDetail, *CompanyEngineer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobDetail)
	for i := range nodes {
		if nodes[i].architect_id == nil {
			continue
		}
		fk := *nodes[i].architect_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companyengineer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "architect_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jdq *JobDetailQuery) loadStatic(ctx context.Context, query *CompanyEngineerQuery, nodes []*JobDetail, init func(*JobDetail), assign func(*JobDetail, *CompanyEngineer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobDetail)
	for i := range nodes {
		if nodes[i].static_id == nil {
			continue
		}
		fk := *nodes[i].static_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companyengineer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "static_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jdq *JobDetailQuery) loadMechanic(ctx context.Context, query *CompanyEngineerQuery, nodes []*JobDetail, init func(*JobDetail), assign func(*JobDetail, *CompanyEngineer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobDetail)
	for i := range nodes {
		if nodes[i].mechanic_id == nil {
			continue
		}
		fk := *nodes[i].mechanic_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companyengineer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "mechanic_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jdq *JobDetailQuery) loadElectric(ctx context.Context, query *CompanyEngineerQuery, nodes []*JobDetail, init func(*JobDetail), assign func(*JobDetail, *CompanyEngineer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobDetail)
	for i := range nodes {
		if nodes[i].electric_id == nil {
			continue
		}
		fk := *nodes[i].electric_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companyengineer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "electric_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jdq *JobDetailQuery) loadController(ctx context.Context, query *CompanyEngineerQuery, nodes []*JobDetail, init func(*JobDetail), assign func(*JobDetail, *CompanyEngineer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobDetail)
	for i := range nodes {
		if nodes[i].controller_id == nil {
			continue
		}
		fk := *nodes[i].controller_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companyengineer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "controller_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jdq *JobDetailQuery) loadMechaniccontroller(ctx context.Context, query *CompanyEngineerQuery, nodes []*JobDetail, init func(*JobDetail), assign func(*JobDetail, *CompanyEngineer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobDetail)
	for i := range nodes {
		if nodes[i].mechaniccontroller_id == nil {
			continue
		}
		fk := *nodes[i].mechaniccontroller_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companyengineer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "mechaniccontroller_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jdq *JobDetailQuery) loadElectriccontroller(ctx context.Context, query *CompanyEngineerQuery, nodes []*JobDetail, init func(*JobDetail), assign func(*JobDetail, *CompanyEngineer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobDetail)
	for i := range nodes {
		if nodes[i].electriccontroller_id == nil {
			continue
		}
		fk := *nodes[i].electriccontroller_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companyengineer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "electriccontroller_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jdq *JobDetailQuery) loadLayers(ctx context.Context, query *JobLayerQuery, nodes []*JobDetail, init func(*JobDetail), assign func(*JobDetail, *JobLayer)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*JobDetail)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobLayer(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(jobdetail.LayersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.job_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "job_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "job_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (jdq *JobDetailQuery) loadPayments(ctx context.Context, query *JobPaymentsQuery, nodes []*JobDetail, init func(*JobDetail), assign func(*JobDetail, *JobPayments)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*JobDetail)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.JobPayments(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(jobdetail.PaymentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.payments_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "payments_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "payments_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (jdq *JobDetailQuery) loadCompany(ctx context.Context, query *CompanyDetailQuery, nodes []*JobDetail, init func(*JobDetail), assign func(*JobDetail, *CompanyDetail)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*JobDetail)
	for i := range nodes {
		if nodes[i].company_id == nil {
			continue
		}
		fk := *nodes[i].company_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companydetail.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "company_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (jdq *JobDetailQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := jdq.querySpec()
	if len(jdq.modifiers) > 0 {
		_spec.Modifiers = jdq.modifiers
	}
	_spec.Node.Columns = jdq.ctx.Fields
	if len(jdq.ctx.Fields) > 0 {
		_spec.Unique = jdq.ctx.Unique != nil && *jdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, jdq.driver, _spec)
}

func (jdq *JobDetailQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(jobdetail.Table, jobdetail.Columns, sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt))
	_spec.From = jdq.sql
	if unique := jdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if jdq.path != nil {
		_spec.Unique = true
	}
	if fields := jdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobdetail.FieldID)
		for i := range fields {
			if fields[i] != jobdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := jdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := jdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := jdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := jdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (jdq *JobDetailQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(jdq.driver.Dialect())
	t1 := builder.Table(jobdetail.Table)
	columns := jdq.ctx.Fields
	if len(columns) == 0 {
		columns = jobdetail.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if jdq.sql != nil {
		selector = jdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if jdq.ctx.Unique != nil && *jdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range jdq.predicates {
		p(selector)
	}
	for _, p := range jdq.order {
		p(selector)
	}
	if offset := jdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedLayers tells the query-builder to eager-load the nodes that are connected to the "layers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (jdq *JobDetailQuery) WithNamedLayers(name string, opts ...func(*JobLayerQuery)) *JobDetailQuery {
	query := (&JobLayerClient{config: jdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if jdq.withNamedLayers == nil {
		jdq.withNamedLayers = make(map[string]*JobLayerQuery)
	}
	jdq.withNamedLayers[name] = query
	return jdq
}

// WithNamedPayments tells the query-builder to eager-load the nodes that are connected to the "payments"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (jdq *JobDetailQuery) WithNamedPayments(name string, opts ...func(*JobPaymentsQuery)) *JobDetailQuery {
	query := (&JobPaymentsClient{config: jdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if jdq.withNamedPayments == nil {
		jdq.withNamedPayments = make(map[string]*JobPaymentsQuery)
	}
	jdq.withNamedPayments[name] = query
	return jdq
}

// JobDetailGroupBy is the group-by builder for JobDetail entities.
type JobDetailGroupBy struct {
	selector
	build *JobDetailQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jdgb *JobDetailGroupBy) Aggregate(fns ...AggregateFunc) *JobDetailGroupBy {
	jdgb.fns = append(jdgb.fns, fns...)
	return jdgb
}

// Scan applies the selector query and scans the result into the given value.
func (jdgb *JobDetailGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jdgb.build.ctx, ent.OpQueryGroupBy)
	if err := jdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobDetailQuery, *JobDetailGroupBy](ctx, jdgb.build, jdgb, jdgb.build.inters, v)
}

func (jdgb *JobDetailGroupBy) sqlScan(ctx context.Context, root *JobDetailQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(jdgb.fns))
	for _, fn := range jdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*jdgb.flds)+len(jdgb.fns))
		for _, f := range *jdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*jdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// JobDetailSelect is the builder for selecting fields of JobDetail entities.
type JobDetailSelect struct {
	*JobDetailQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (jds *JobDetailSelect) Aggregate(fns ...AggregateFunc) *JobDetailSelect {
	jds.fns = append(jds.fns, fns...)
	return jds
}

// Scan applies the selector query and scans the result into the given value.
func (jds *JobDetailSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jds.ctx, ent.OpQuerySelect)
	if err := jds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobDetailQuery, *JobDetailSelect](ctx, jds.JobDetailQuery, jds, jds.inters, v)
}

func (jds *JobDetailSelect) sqlScan(ctx context.Context, root *JobDetailQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(jds.fns))
	for _, fn := range jds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*jds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
