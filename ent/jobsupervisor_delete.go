// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/polatbilal/gqlgen-ent/ent/jobsupervisor"
	"github.com/polatbilal/gqlgen-ent/ent/predicate"
)

// JobSuperVisorDelete is the builder for deleting a JobSuperVisor entity.
type JobSuperVisorDelete struct {
	config
	hooks    []Hook
	mutation *JobSuperVisorMutation
}

// Where appends a list predicates to the JobSuperVisorDelete builder.
func (jsvd *JobSuperVisorDelete) Where(ps ...predicate.JobSuperVisor) *JobSuperVisorDelete {
	jsvd.mutation.Where(ps...)
	return jsvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (jsvd *JobSuperVisorDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, jsvd.sqlExec, jsvd.mutation, jsvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (jsvd *JobSuperVisorDelete) ExecX(ctx context.Context) int {
	n, err := jsvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (jsvd *JobSuperVisorDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(jobsupervisor.Table, sqlgraph.NewFieldSpec(jobsupervisor.FieldID, field.TypeInt))
	if ps := jsvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, jsvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	jsvd.mutation.done = true
	return affected, err
}

// JobSuperVisorDeleteOne is the builder for deleting a single JobSuperVisor entity.
type JobSuperVisorDeleteOne struct {
	jsvd *JobSuperVisorDelete
}

// Where appends a list predicates to the JobSuperVisorDelete builder.
func (jsvdo *JobSuperVisorDeleteOne) Where(ps ...predicate.JobSuperVisor) *JobSuperVisorDeleteOne {
	jsvdo.jsvd.mutation.Where(ps...)
	return jsvdo
}

// Exec executes the deletion query.
func (jsvdo *JobSuperVisorDeleteOne) Exec(ctx context.Context) error {
	n, err := jsvdo.jsvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{jobsupervisor.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (jsvdo *JobSuperVisorDeleteOne) ExecX(ctx context.Context) {
	if err := jsvdo.Exec(ctx); err != nil {
		panic(err)
	}
}
