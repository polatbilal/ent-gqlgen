// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gqlgen-ent/ent/companyengineer"
	"gqlgen-ent/ent/jobauthor"
	"gqlgen-ent/ent/jobcontractor"
	"gqlgen-ent/ent/jobdetail"
	"gqlgen-ent/ent/joblayer"
	"gqlgen-ent/ent/jobowner"
	"gqlgen-ent/ent/jobpayments"
	"gqlgen-ent/ent/jobprogress"
	"gqlgen-ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobDetailUpdate is the builder for updating JobDetail entities.
type JobDetailUpdate struct {
	config
	hooks    []Hook
	mutation *JobDetailMutation
}

// Where appends a list predicates to the JobDetailUpdate builder.
func (jdu *JobDetailUpdate) Where(ps ...predicate.JobDetail) *JobDetailUpdate {
	jdu.mutation.Where(ps...)
	return jdu
}

// SetYibfNo sets the "YibfNo" field.
func (jdu *JobDetailUpdate) SetYibfNo(i int) *JobDetailUpdate {
	jdu.mutation.ResetYibfNo()
	jdu.mutation.SetYibfNo(i)
	return jdu
}

// SetNillableYibfNo sets the "YibfNo" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableYibfNo(i *int) *JobDetailUpdate {
	if i != nil {
		jdu.SetYibfNo(*i)
	}
	return jdu
}

// AddYibfNo adds i to the "YibfNo" field.
func (jdu *JobDetailUpdate) AddYibfNo(i int) *JobDetailUpdate {
	jdu.mutation.AddYibfNo(i)
	return jdu
}

// SetIdare sets the "Idare" field.
func (jdu *JobDetailUpdate) SetIdare(s string) *JobDetailUpdate {
	jdu.mutation.SetIdare(s)
	return jdu
}

// SetNillableIdare sets the "Idare" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableIdare(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetIdare(*s)
	}
	return jdu
}

// ClearIdare clears the value of the "Idare" field.
func (jdu *JobDetailUpdate) ClearIdare() *JobDetailUpdate {
	jdu.mutation.ClearIdare()
	return jdu
}

// SetPafta sets the "Pafta" field.
func (jdu *JobDetailUpdate) SetPafta(s string) *JobDetailUpdate {
	jdu.mutation.SetPafta(s)
	return jdu
}

// SetNillablePafta sets the "Pafta" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillablePafta(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetPafta(*s)
	}
	return jdu
}

// ClearPafta clears the value of the "Pafta" field.
func (jdu *JobDetailUpdate) ClearPafta() *JobDetailUpdate {
	jdu.mutation.ClearPafta()
	return jdu
}

// SetAda sets the "Ada" field.
func (jdu *JobDetailUpdate) SetAda(s string) *JobDetailUpdate {
	jdu.mutation.SetAda(s)
	return jdu
}

// SetNillableAda sets the "Ada" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableAda(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetAda(*s)
	}
	return jdu
}

// ClearAda clears the value of the "Ada" field.
func (jdu *JobDetailUpdate) ClearAda() *JobDetailUpdate {
	jdu.mutation.ClearAda()
	return jdu
}

// SetParsel sets the "Parsel" field.
func (jdu *JobDetailUpdate) SetParsel(s string) *JobDetailUpdate {
	jdu.mutation.SetParsel(s)
	return jdu
}

// SetNillableParsel sets the "Parsel" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableParsel(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetParsel(*s)
	}
	return jdu
}

// ClearParsel clears the value of the "Parsel" field.
func (jdu *JobDetailUpdate) ClearParsel() *JobDetailUpdate {
	jdu.mutation.ClearParsel()
	return jdu
}

// SetFolderNo sets the "FolderNo" field.
func (jdu *JobDetailUpdate) SetFolderNo(s string) *JobDetailUpdate {
	jdu.mutation.SetFolderNo(s)
	return jdu
}

// SetNillableFolderNo sets the "FolderNo" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableFolderNo(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetFolderNo(*s)
	}
	return jdu
}

// ClearFolderNo clears the value of the "FolderNo" field.
func (jdu *JobDetailUpdate) ClearFolderNo() *JobDetailUpdate {
	jdu.mutation.ClearFolderNo()
	return jdu
}

// SetStatus sets the "Status" field.
func (jdu *JobDetailUpdate) SetStatus(i int) *JobDetailUpdate {
	jdu.mutation.ResetStatus()
	jdu.mutation.SetStatus(i)
	return jdu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableStatus(i *int) *JobDetailUpdate {
	if i != nil {
		jdu.SetStatus(*i)
	}
	return jdu
}

// AddStatus adds i to the "Status" field.
func (jdu *JobDetailUpdate) AddStatus(i int) *JobDetailUpdate {
	jdu.mutation.AddStatus(i)
	return jdu
}

// SetContractDate sets the "ContractDate" field.
func (jdu *JobDetailUpdate) SetContractDate(t time.Time) *JobDetailUpdate {
	jdu.mutation.SetContractDate(t)
	return jdu
}

// SetNillableContractDate sets the "ContractDate" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableContractDate(t *time.Time) *JobDetailUpdate {
	if t != nil {
		jdu.SetContractDate(*t)
	}
	return jdu
}

// ClearContractDate clears the value of the "ContractDate" field.
func (jdu *JobDetailUpdate) ClearContractDate() *JobDetailUpdate {
	jdu.mutation.ClearContractDate()
	return jdu
}

// SetCompletionDate sets the "CompletionDate" field.
func (jdu *JobDetailUpdate) SetCompletionDate(t time.Time) *JobDetailUpdate {
	jdu.mutation.SetCompletionDate(t)
	return jdu
}

// SetNillableCompletionDate sets the "CompletionDate" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableCompletionDate(t *time.Time) *JobDetailUpdate {
	if t != nil {
		jdu.SetCompletionDate(*t)
	}
	return jdu
}

// ClearCompletionDate clears the value of the "CompletionDate" field.
func (jdu *JobDetailUpdate) ClearCompletionDate() *JobDetailUpdate {
	jdu.mutation.ClearCompletionDate()
	return jdu
}

// SetStartDate sets the "StartDate" field.
func (jdu *JobDetailUpdate) SetStartDate(t time.Time) *JobDetailUpdate {
	jdu.mutation.SetStartDate(t)
	return jdu
}

// SetNillableStartDate sets the "StartDate" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableStartDate(t *time.Time) *JobDetailUpdate {
	if t != nil {
		jdu.SetStartDate(*t)
	}
	return jdu
}

// ClearStartDate clears the value of the "StartDate" field.
func (jdu *JobDetailUpdate) ClearStartDate() *JobDetailUpdate {
	jdu.mutation.ClearStartDate()
	return jdu
}

// SetLicenseDate sets the "LicenseDate" field.
func (jdu *JobDetailUpdate) SetLicenseDate(t time.Time) *JobDetailUpdate {
	jdu.mutation.SetLicenseDate(t)
	return jdu
}

// SetNillableLicenseDate sets the "LicenseDate" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableLicenseDate(t *time.Time) *JobDetailUpdate {
	if t != nil {
		jdu.SetLicenseDate(*t)
	}
	return jdu
}

// ClearLicenseDate clears the value of the "LicenseDate" field.
func (jdu *JobDetailUpdate) ClearLicenseDate() *JobDetailUpdate {
	jdu.mutation.ClearLicenseDate()
	return jdu
}

// SetLicenseNo sets the "LicenseNo" field.
func (jdu *JobDetailUpdate) SetLicenseNo(s string) *JobDetailUpdate {
	jdu.mutation.SetLicenseNo(s)
	return jdu
}

// SetNillableLicenseNo sets the "LicenseNo" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableLicenseNo(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetLicenseNo(*s)
	}
	return jdu
}

// ClearLicenseNo clears the value of the "LicenseNo" field.
func (jdu *JobDetailUpdate) ClearLicenseNo() *JobDetailUpdate {
	jdu.mutation.ClearLicenseNo()
	return jdu
}

// SetConstructionArea sets the "ConstructionArea" field.
func (jdu *JobDetailUpdate) SetConstructionArea(s string) *JobDetailUpdate {
	jdu.mutation.SetConstructionArea(s)
	return jdu
}

// SetNillableConstructionArea sets the "ConstructionArea" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableConstructionArea(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetConstructionArea(*s)
	}
	return jdu
}

// ClearConstructionArea clears the value of the "ConstructionArea" field.
func (jdu *JobDetailUpdate) ClearConstructionArea() *JobDetailUpdate {
	jdu.mutation.ClearConstructionArea()
	return jdu
}

// SetCity sets the "City" field.
func (jdu *JobDetailUpdate) SetCity(s string) *JobDetailUpdate {
	jdu.mutation.SetCity(s)
	return jdu
}

// SetNillableCity sets the "City" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableCity(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetCity(*s)
	}
	return jdu
}

// ClearCity clears the value of the "City" field.
func (jdu *JobDetailUpdate) ClearCity() *JobDetailUpdate {
	jdu.mutation.ClearCity()
	return jdu
}

// SetDistrict sets the "District" field.
func (jdu *JobDetailUpdate) SetDistrict(s string) *JobDetailUpdate {
	jdu.mutation.SetDistrict(s)
	return jdu
}

// SetNillableDistrict sets the "District" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableDistrict(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetDistrict(*s)
	}
	return jdu
}

// ClearDistrict clears the value of the "District" field.
func (jdu *JobDetailUpdate) ClearDistrict() *JobDetailUpdate {
	jdu.mutation.ClearDistrict()
	return jdu
}

// SetVillage sets the "Village" field.
func (jdu *JobDetailUpdate) SetVillage(s string) *JobDetailUpdate {
	jdu.mutation.SetVillage(s)
	return jdu
}

// SetNillableVillage sets the "Village" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableVillage(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetVillage(*s)
	}
	return jdu
}

// ClearVillage clears the value of the "Village" field.
func (jdu *JobDetailUpdate) ClearVillage() *JobDetailUpdate {
	jdu.mutation.ClearVillage()
	return jdu
}

// SetStreet sets the "Street" field.
func (jdu *JobDetailUpdate) SetStreet(s string) *JobDetailUpdate {
	jdu.mutation.SetStreet(s)
	return jdu
}

// SetNillableStreet sets the "Street" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableStreet(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetStreet(*s)
	}
	return jdu
}

// ClearStreet clears the value of the "Street" field.
func (jdu *JobDetailUpdate) ClearStreet() *JobDetailUpdate {
	jdu.mutation.ClearStreet()
	return jdu
}

// SetBuildingClass sets the "BuildingClass" field.
func (jdu *JobDetailUpdate) SetBuildingClass(s string) *JobDetailUpdate {
	jdu.mutation.SetBuildingClass(s)
	return jdu
}

// SetNillableBuildingClass sets the "BuildingClass" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableBuildingClass(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetBuildingClass(*s)
	}
	return jdu
}

// ClearBuildingClass clears the value of the "BuildingClass" field.
func (jdu *JobDetailUpdate) ClearBuildingClass() *JobDetailUpdate {
	jdu.mutation.ClearBuildingClass()
	return jdu
}

// SetBuildingType sets the "BuildingType" field.
func (jdu *JobDetailUpdate) SetBuildingType(s string) *JobDetailUpdate {
	jdu.mutation.SetBuildingType(s)
	return jdu
}

// SetNillableBuildingType sets the "BuildingType" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableBuildingType(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetBuildingType(*s)
	}
	return jdu
}

// ClearBuildingType clears the value of the "BuildingType" field.
func (jdu *JobDetailUpdate) ClearBuildingType() *JobDetailUpdate {
	jdu.mutation.ClearBuildingType()
	return jdu
}

// SetBuildingBlock sets the "BuildingBlock" field.
func (jdu *JobDetailUpdate) SetBuildingBlock(s string) *JobDetailUpdate {
	jdu.mutation.SetBuildingBlock(s)
	return jdu
}

// SetNillableBuildingBlock sets the "BuildingBlock" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableBuildingBlock(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetBuildingBlock(*s)
	}
	return jdu
}

// ClearBuildingBlock clears the value of the "BuildingBlock" field.
func (jdu *JobDetailUpdate) ClearBuildingBlock() *JobDetailUpdate {
	jdu.mutation.ClearBuildingBlock()
	return jdu
}

// SetLandArea sets the "LandArea" field.
func (jdu *JobDetailUpdate) SetLandArea(s string) *JobDetailUpdate {
	jdu.mutation.SetLandArea(s)
	return jdu
}

// SetNillableLandArea sets the "LandArea" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableLandArea(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetLandArea(*s)
	}
	return jdu
}

// ClearLandArea clears the value of the "LandArea" field.
func (jdu *JobDetailUpdate) ClearLandArea() *JobDetailUpdate {
	jdu.mutation.ClearLandArea()
	return jdu
}

// SetFloors sets the "Floors" field.
func (jdu *JobDetailUpdate) SetFloors(i int) *JobDetailUpdate {
	jdu.mutation.ResetFloors()
	jdu.mutation.SetFloors(i)
	return jdu
}

// SetNillableFloors sets the "Floors" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableFloors(i *int) *JobDetailUpdate {
	if i != nil {
		jdu.SetFloors(*i)
	}
	return jdu
}

// AddFloors adds i to the "Floors" field.
func (jdu *JobDetailUpdate) AddFloors(i int) *JobDetailUpdate {
	jdu.mutation.AddFloors(i)
	return jdu
}

// ClearFloors clears the value of the "Floors" field.
func (jdu *JobDetailUpdate) ClearFloors() *JobDetailUpdate {
	jdu.mutation.ClearFloors()
	return jdu
}

// SetUsagePurpose sets the "UsagePurpose" field.
func (jdu *JobDetailUpdate) SetUsagePurpose(s string) *JobDetailUpdate {
	jdu.mutation.SetUsagePurpose(s)
	return jdu
}

// SetNillableUsagePurpose sets the "UsagePurpose" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableUsagePurpose(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetUsagePurpose(*s)
	}
	return jdu
}

// ClearUsagePurpose clears the value of the "UsagePurpose" field.
func (jdu *JobDetailUpdate) ClearUsagePurpose() *JobDetailUpdate {
	jdu.mutation.ClearUsagePurpose()
	return jdu
}

// SetNote sets the "Note" field.
func (jdu *JobDetailUpdate) SetNote(s string) *JobDetailUpdate {
	jdu.mutation.SetNote(s)
	return jdu
}

// SetNillableNote sets the "Note" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableNote(s *string) *JobDetailUpdate {
	if s != nil {
		jdu.SetNote(*s)
	}
	return jdu
}

// ClearNote clears the value of the "Note" field.
func (jdu *JobDetailUpdate) ClearNote() *JobDetailUpdate {
	jdu.mutation.ClearNote()
	return jdu
}

// SetStarted sets the "Started" field.
func (jdu *JobDetailUpdate) SetStarted(i int) *JobDetailUpdate {
	jdu.mutation.ResetStarted()
	jdu.mutation.SetStarted(i)
	return jdu
}

// SetNillableStarted sets the "Started" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableStarted(i *int) *JobDetailUpdate {
	if i != nil {
		jdu.SetStarted(*i)
	}
	return jdu
}

// AddStarted adds i to the "Started" field.
func (jdu *JobDetailUpdate) AddStarted(i int) *JobDetailUpdate {
	jdu.mutation.AddStarted(i)
	return jdu
}

// SetDeleted sets the "Deleted" field.
func (jdu *JobDetailUpdate) SetDeleted(i int) *JobDetailUpdate {
	jdu.mutation.ResetDeleted()
	jdu.mutation.SetDeleted(i)
	return jdu
}

// SetNillableDeleted sets the "Deleted" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableDeleted(i *int) *JobDetailUpdate {
	if i != nil {
		jdu.SetDeleted(*i)
	}
	return jdu
}

// AddDeleted adds i to the "Deleted" field.
func (jdu *JobDetailUpdate) AddDeleted(i int) *JobDetailUpdate {
	jdu.mutation.AddDeleted(i)
	return jdu
}

// SetCreatedAt sets the "CreatedAt" field.
func (jdu *JobDetailUpdate) SetCreatedAt(t time.Time) *JobDetailUpdate {
	jdu.mutation.SetCreatedAt(t)
	return jdu
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableCreatedAt(t *time.Time) *JobDetailUpdate {
	if t != nil {
		jdu.SetCreatedAt(*t)
	}
	return jdu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (jdu *JobDetailUpdate) SetUpdatedAt(t time.Time) *JobDetailUpdate {
	jdu.mutation.SetUpdatedAt(t)
	return jdu
}

// SetOwnerID sets the "owner" edge to the JobOwner entity by ID.
func (jdu *JobDetailUpdate) SetOwnerID(id int) *JobDetailUpdate {
	jdu.mutation.SetOwnerID(id)
	return jdu
}

// SetNillableOwnerID sets the "owner" edge to the JobOwner entity by ID if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableOwnerID(id *int) *JobDetailUpdate {
	if id != nil {
		jdu = jdu.SetOwnerID(*id)
	}
	return jdu
}

// SetOwner sets the "owner" edge to the JobOwner entity.
func (jdu *JobDetailUpdate) SetOwner(j *JobOwner) *JobDetailUpdate {
	return jdu.SetOwnerID(j.ID)
}

// SetContractorID sets the "contractor" edge to the JobContractor entity by ID.
func (jdu *JobDetailUpdate) SetContractorID(id int) *JobDetailUpdate {
	jdu.mutation.SetContractorID(id)
	return jdu
}

// SetNillableContractorID sets the "contractor" edge to the JobContractor entity by ID if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableContractorID(id *int) *JobDetailUpdate {
	if id != nil {
		jdu = jdu.SetContractorID(*id)
	}
	return jdu
}

// SetContractor sets the "contractor" edge to the JobContractor entity.
func (jdu *JobDetailUpdate) SetContractor(j *JobContractor) *JobDetailUpdate {
	return jdu.SetContractorID(j.ID)
}

// SetAuthorID sets the "author" edge to the JobAuthor entity by ID.
func (jdu *JobDetailUpdate) SetAuthorID(id int) *JobDetailUpdate {
	jdu.mutation.SetAuthorID(id)
	return jdu
}

// SetNillableAuthorID sets the "author" edge to the JobAuthor entity by ID if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableAuthorID(id *int) *JobDetailUpdate {
	if id != nil {
		jdu = jdu.SetAuthorID(*id)
	}
	return jdu
}

// SetAuthor sets the "author" edge to the JobAuthor entity.
func (jdu *JobDetailUpdate) SetAuthor(j *JobAuthor) *JobDetailUpdate {
	return jdu.SetAuthorID(j.ID)
}

// SetProgressID sets the "progress" edge to the JobProgress entity by ID.
func (jdu *JobDetailUpdate) SetProgressID(id int) *JobDetailUpdate {
	jdu.mutation.SetProgressID(id)
	return jdu
}

// SetNillableProgressID sets the "progress" edge to the JobProgress entity by ID if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableProgressID(id *int) *JobDetailUpdate {
	if id != nil {
		jdu = jdu.SetProgressID(*id)
	}
	return jdu
}

// SetProgress sets the "progress" edge to the JobProgress entity.
func (jdu *JobDetailUpdate) SetProgress(j *JobProgress) *JobDetailUpdate {
	return jdu.SetProgressID(j.ID)
}

// SetInspectorID sets the "inspector" edge to the CompanyEngineer entity by ID.
func (jdu *JobDetailUpdate) SetInspectorID(id int) *JobDetailUpdate {
	jdu.mutation.SetInspectorID(id)
	return jdu
}

// SetNillableInspectorID sets the "inspector" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableInspectorID(id *int) *JobDetailUpdate {
	if id != nil {
		jdu = jdu.SetInspectorID(*id)
	}
	return jdu
}

// SetInspector sets the "inspector" edge to the CompanyEngineer entity.
func (jdu *JobDetailUpdate) SetInspector(c *CompanyEngineer) *JobDetailUpdate {
	return jdu.SetInspectorID(c.ID)
}

// SetArchitectID sets the "architect" edge to the CompanyEngineer entity by ID.
func (jdu *JobDetailUpdate) SetArchitectID(id int) *JobDetailUpdate {
	jdu.mutation.SetArchitectID(id)
	return jdu
}

// SetNillableArchitectID sets the "architect" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableArchitectID(id *int) *JobDetailUpdate {
	if id != nil {
		jdu = jdu.SetArchitectID(*id)
	}
	return jdu
}

// SetArchitect sets the "architect" edge to the CompanyEngineer entity.
func (jdu *JobDetailUpdate) SetArchitect(c *CompanyEngineer) *JobDetailUpdate {
	return jdu.SetArchitectID(c.ID)
}

// SetStaticID sets the "static" edge to the CompanyEngineer entity by ID.
func (jdu *JobDetailUpdate) SetStaticID(id int) *JobDetailUpdate {
	jdu.mutation.SetStaticID(id)
	return jdu
}

// SetNillableStaticID sets the "static" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableStaticID(id *int) *JobDetailUpdate {
	if id != nil {
		jdu = jdu.SetStaticID(*id)
	}
	return jdu
}

// SetStatic sets the "static" edge to the CompanyEngineer entity.
func (jdu *JobDetailUpdate) SetStatic(c *CompanyEngineer) *JobDetailUpdate {
	return jdu.SetStaticID(c.ID)
}

// SetMechanicID sets the "mechanic" edge to the CompanyEngineer entity by ID.
func (jdu *JobDetailUpdate) SetMechanicID(id int) *JobDetailUpdate {
	jdu.mutation.SetMechanicID(id)
	return jdu
}

// SetNillableMechanicID sets the "mechanic" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableMechanicID(id *int) *JobDetailUpdate {
	if id != nil {
		jdu = jdu.SetMechanicID(*id)
	}
	return jdu
}

// SetMechanic sets the "mechanic" edge to the CompanyEngineer entity.
func (jdu *JobDetailUpdate) SetMechanic(c *CompanyEngineer) *JobDetailUpdate {
	return jdu.SetMechanicID(c.ID)
}

// SetElectricID sets the "electric" edge to the CompanyEngineer entity by ID.
func (jdu *JobDetailUpdate) SetElectricID(id int) *JobDetailUpdate {
	jdu.mutation.SetElectricID(id)
	return jdu
}

// SetNillableElectricID sets the "electric" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableElectricID(id *int) *JobDetailUpdate {
	if id != nil {
		jdu = jdu.SetElectricID(*id)
	}
	return jdu
}

// SetElectric sets the "electric" edge to the CompanyEngineer entity.
func (jdu *JobDetailUpdate) SetElectric(c *CompanyEngineer) *JobDetailUpdate {
	return jdu.SetElectricID(c.ID)
}

// SetControllerID sets the "controller" edge to the CompanyEngineer entity by ID.
func (jdu *JobDetailUpdate) SetControllerID(id int) *JobDetailUpdate {
	jdu.mutation.SetControllerID(id)
	return jdu
}

// SetNillableControllerID sets the "controller" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableControllerID(id *int) *JobDetailUpdate {
	if id != nil {
		jdu = jdu.SetControllerID(*id)
	}
	return jdu
}

// SetController sets the "controller" edge to the CompanyEngineer entity.
func (jdu *JobDetailUpdate) SetController(c *CompanyEngineer) *JobDetailUpdate {
	return jdu.SetControllerID(c.ID)
}

// SetMechaniccontrollerID sets the "mechaniccontroller" edge to the CompanyEngineer entity by ID.
func (jdu *JobDetailUpdate) SetMechaniccontrollerID(id int) *JobDetailUpdate {
	jdu.mutation.SetMechaniccontrollerID(id)
	return jdu
}

// SetNillableMechaniccontrollerID sets the "mechaniccontroller" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableMechaniccontrollerID(id *int) *JobDetailUpdate {
	if id != nil {
		jdu = jdu.SetMechaniccontrollerID(*id)
	}
	return jdu
}

// SetMechaniccontroller sets the "mechaniccontroller" edge to the CompanyEngineer entity.
func (jdu *JobDetailUpdate) SetMechaniccontroller(c *CompanyEngineer) *JobDetailUpdate {
	return jdu.SetMechaniccontrollerID(c.ID)
}

// SetElectriccontrollerID sets the "electriccontroller" edge to the CompanyEngineer entity by ID.
func (jdu *JobDetailUpdate) SetElectriccontrollerID(id int) *JobDetailUpdate {
	jdu.mutation.SetElectriccontrollerID(id)
	return jdu
}

// SetNillableElectriccontrollerID sets the "electriccontroller" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jdu *JobDetailUpdate) SetNillableElectriccontrollerID(id *int) *JobDetailUpdate {
	if id != nil {
		jdu = jdu.SetElectriccontrollerID(*id)
	}
	return jdu
}

// SetElectriccontroller sets the "electriccontroller" edge to the CompanyEngineer entity.
func (jdu *JobDetailUpdate) SetElectriccontroller(c *CompanyEngineer) *JobDetailUpdate {
	return jdu.SetElectriccontrollerID(c.ID)
}

// AddLayerIDs adds the "layers" edge to the JobLayer entity by IDs.
func (jdu *JobDetailUpdate) AddLayerIDs(ids ...int) *JobDetailUpdate {
	jdu.mutation.AddLayerIDs(ids...)
	return jdu
}

// AddLayers adds the "layers" edges to the JobLayer entity.
func (jdu *JobDetailUpdate) AddLayers(j ...*JobLayer) *JobDetailUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jdu.AddLayerIDs(ids...)
}

// AddPaymentIDs adds the "payments" edge to the JobPayments entity by IDs.
func (jdu *JobDetailUpdate) AddPaymentIDs(ids ...int) *JobDetailUpdate {
	jdu.mutation.AddPaymentIDs(ids...)
	return jdu
}

// AddPayments adds the "payments" edges to the JobPayments entity.
func (jdu *JobDetailUpdate) AddPayments(j ...*JobPayments) *JobDetailUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jdu.AddPaymentIDs(ids...)
}

// Mutation returns the JobDetailMutation object of the builder.
func (jdu *JobDetailUpdate) Mutation() *JobDetailMutation {
	return jdu.mutation
}

// ClearOwner clears the "owner" edge to the JobOwner entity.
func (jdu *JobDetailUpdate) ClearOwner() *JobDetailUpdate {
	jdu.mutation.ClearOwner()
	return jdu
}

// ClearContractor clears the "contractor" edge to the JobContractor entity.
func (jdu *JobDetailUpdate) ClearContractor() *JobDetailUpdate {
	jdu.mutation.ClearContractor()
	return jdu
}

// ClearAuthor clears the "author" edge to the JobAuthor entity.
func (jdu *JobDetailUpdate) ClearAuthor() *JobDetailUpdate {
	jdu.mutation.ClearAuthor()
	return jdu
}

// ClearProgress clears the "progress" edge to the JobProgress entity.
func (jdu *JobDetailUpdate) ClearProgress() *JobDetailUpdate {
	jdu.mutation.ClearProgress()
	return jdu
}

// ClearInspector clears the "inspector" edge to the CompanyEngineer entity.
func (jdu *JobDetailUpdate) ClearInspector() *JobDetailUpdate {
	jdu.mutation.ClearInspector()
	return jdu
}

// ClearArchitect clears the "architect" edge to the CompanyEngineer entity.
func (jdu *JobDetailUpdate) ClearArchitect() *JobDetailUpdate {
	jdu.mutation.ClearArchitect()
	return jdu
}

// ClearStatic clears the "static" edge to the CompanyEngineer entity.
func (jdu *JobDetailUpdate) ClearStatic() *JobDetailUpdate {
	jdu.mutation.ClearStatic()
	return jdu
}

// ClearMechanic clears the "mechanic" edge to the CompanyEngineer entity.
func (jdu *JobDetailUpdate) ClearMechanic() *JobDetailUpdate {
	jdu.mutation.ClearMechanic()
	return jdu
}

// ClearElectric clears the "electric" edge to the CompanyEngineer entity.
func (jdu *JobDetailUpdate) ClearElectric() *JobDetailUpdate {
	jdu.mutation.ClearElectric()
	return jdu
}

// ClearController clears the "controller" edge to the CompanyEngineer entity.
func (jdu *JobDetailUpdate) ClearController() *JobDetailUpdate {
	jdu.mutation.ClearController()
	return jdu
}

// ClearMechaniccontroller clears the "mechaniccontroller" edge to the CompanyEngineer entity.
func (jdu *JobDetailUpdate) ClearMechaniccontroller() *JobDetailUpdate {
	jdu.mutation.ClearMechaniccontroller()
	return jdu
}

// ClearElectriccontroller clears the "electriccontroller" edge to the CompanyEngineer entity.
func (jdu *JobDetailUpdate) ClearElectriccontroller() *JobDetailUpdate {
	jdu.mutation.ClearElectriccontroller()
	return jdu
}

// ClearLayers clears all "layers" edges to the JobLayer entity.
func (jdu *JobDetailUpdate) ClearLayers() *JobDetailUpdate {
	jdu.mutation.ClearLayers()
	return jdu
}

// RemoveLayerIDs removes the "layers" edge to JobLayer entities by IDs.
func (jdu *JobDetailUpdate) RemoveLayerIDs(ids ...int) *JobDetailUpdate {
	jdu.mutation.RemoveLayerIDs(ids...)
	return jdu
}

// RemoveLayers removes "layers" edges to JobLayer entities.
func (jdu *JobDetailUpdate) RemoveLayers(j ...*JobLayer) *JobDetailUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jdu.RemoveLayerIDs(ids...)
}

// ClearPayments clears all "payments" edges to the JobPayments entity.
func (jdu *JobDetailUpdate) ClearPayments() *JobDetailUpdate {
	jdu.mutation.ClearPayments()
	return jdu
}

// RemovePaymentIDs removes the "payments" edge to JobPayments entities by IDs.
func (jdu *JobDetailUpdate) RemovePaymentIDs(ids ...int) *JobDetailUpdate {
	jdu.mutation.RemovePaymentIDs(ids...)
	return jdu
}

// RemovePayments removes "payments" edges to JobPayments entities.
func (jdu *JobDetailUpdate) RemovePayments(j ...*JobPayments) *JobDetailUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jdu.RemovePaymentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jdu *JobDetailUpdate) Save(ctx context.Context) (int, error) {
	jdu.defaults()
	return withHooks(ctx, jdu.sqlSave, jdu.mutation, jdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jdu *JobDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := jdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jdu *JobDetailUpdate) Exec(ctx context.Context) error {
	_, err := jdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jdu *JobDetailUpdate) ExecX(ctx context.Context) {
	if err := jdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jdu *JobDetailUpdate) defaults() {
	if _, ok := jdu.mutation.UpdatedAt(); !ok {
		v := jobdetail.UpdateDefaultUpdatedAt()
		jdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jdu *JobDetailUpdate) check() error {
	if v, ok := jdu.mutation.YibfNo(); ok {
		if err := jobdetail.YibfNoValidator(v); err != nil {
			return &ValidationError{Name: "YibfNo", err: fmt.Errorf(`ent: validator failed for field "JobDetail.YibfNo": %w`, err)}
		}
	}
	return nil
}

func (jdu *JobDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := jdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobdetail.Table, jobdetail.Columns, sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt))
	if ps := jdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jdu.mutation.YibfNo(); ok {
		_spec.SetField(jobdetail.FieldYibfNo, field.TypeInt, value)
	}
	if value, ok := jdu.mutation.AddedYibfNo(); ok {
		_spec.AddField(jobdetail.FieldYibfNo, field.TypeInt, value)
	}
	if value, ok := jdu.mutation.Idare(); ok {
		_spec.SetField(jobdetail.FieldIdare, field.TypeString, value)
	}
	if jdu.mutation.IdareCleared() {
		_spec.ClearField(jobdetail.FieldIdare, field.TypeString)
	}
	if value, ok := jdu.mutation.Pafta(); ok {
		_spec.SetField(jobdetail.FieldPafta, field.TypeString, value)
	}
	if jdu.mutation.PaftaCleared() {
		_spec.ClearField(jobdetail.FieldPafta, field.TypeString)
	}
	if value, ok := jdu.mutation.Ada(); ok {
		_spec.SetField(jobdetail.FieldAda, field.TypeString, value)
	}
	if jdu.mutation.AdaCleared() {
		_spec.ClearField(jobdetail.FieldAda, field.TypeString)
	}
	if value, ok := jdu.mutation.Parsel(); ok {
		_spec.SetField(jobdetail.FieldParsel, field.TypeString, value)
	}
	if jdu.mutation.ParselCleared() {
		_spec.ClearField(jobdetail.FieldParsel, field.TypeString)
	}
	if value, ok := jdu.mutation.FolderNo(); ok {
		_spec.SetField(jobdetail.FieldFolderNo, field.TypeString, value)
	}
	if jdu.mutation.FolderNoCleared() {
		_spec.ClearField(jobdetail.FieldFolderNo, field.TypeString)
	}
	if value, ok := jdu.mutation.Status(); ok {
		_spec.SetField(jobdetail.FieldStatus, field.TypeInt, value)
	}
	if value, ok := jdu.mutation.AddedStatus(); ok {
		_spec.AddField(jobdetail.FieldStatus, field.TypeInt, value)
	}
	if value, ok := jdu.mutation.ContractDate(); ok {
		_spec.SetField(jobdetail.FieldContractDate, field.TypeTime, value)
	}
	if jdu.mutation.ContractDateCleared() {
		_spec.ClearField(jobdetail.FieldContractDate, field.TypeTime)
	}
	if value, ok := jdu.mutation.CompletionDate(); ok {
		_spec.SetField(jobdetail.FieldCompletionDate, field.TypeTime, value)
	}
	if jdu.mutation.CompletionDateCleared() {
		_spec.ClearField(jobdetail.FieldCompletionDate, field.TypeTime)
	}
	if value, ok := jdu.mutation.StartDate(); ok {
		_spec.SetField(jobdetail.FieldStartDate, field.TypeTime, value)
	}
	if jdu.mutation.StartDateCleared() {
		_spec.ClearField(jobdetail.FieldStartDate, field.TypeTime)
	}
	if value, ok := jdu.mutation.LicenseDate(); ok {
		_spec.SetField(jobdetail.FieldLicenseDate, field.TypeTime, value)
	}
	if jdu.mutation.LicenseDateCleared() {
		_spec.ClearField(jobdetail.FieldLicenseDate, field.TypeTime)
	}
	if value, ok := jdu.mutation.LicenseNo(); ok {
		_spec.SetField(jobdetail.FieldLicenseNo, field.TypeString, value)
	}
	if jdu.mutation.LicenseNoCleared() {
		_spec.ClearField(jobdetail.FieldLicenseNo, field.TypeString)
	}
	if value, ok := jdu.mutation.ConstructionArea(); ok {
		_spec.SetField(jobdetail.FieldConstructionArea, field.TypeString, value)
	}
	if jdu.mutation.ConstructionAreaCleared() {
		_spec.ClearField(jobdetail.FieldConstructionArea, field.TypeString)
	}
	if value, ok := jdu.mutation.City(); ok {
		_spec.SetField(jobdetail.FieldCity, field.TypeString, value)
	}
	if jdu.mutation.CityCleared() {
		_spec.ClearField(jobdetail.FieldCity, field.TypeString)
	}
	if value, ok := jdu.mutation.District(); ok {
		_spec.SetField(jobdetail.FieldDistrict, field.TypeString, value)
	}
	if jdu.mutation.DistrictCleared() {
		_spec.ClearField(jobdetail.FieldDistrict, field.TypeString)
	}
	if value, ok := jdu.mutation.Village(); ok {
		_spec.SetField(jobdetail.FieldVillage, field.TypeString, value)
	}
	if jdu.mutation.VillageCleared() {
		_spec.ClearField(jobdetail.FieldVillage, field.TypeString)
	}
	if value, ok := jdu.mutation.Street(); ok {
		_spec.SetField(jobdetail.FieldStreet, field.TypeString, value)
	}
	if jdu.mutation.StreetCleared() {
		_spec.ClearField(jobdetail.FieldStreet, field.TypeString)
	}
	if value, ok := jdu.mutation.BuildingClass(); ok {
		_spec.SetField(jobdetail.FieldBuildingClass, field.TypeString, value)
	}
	if jdu.mutation.BuildingClassCleared() {
		_spec.ClearField(jobdetail.FieldBuildingClass, field.TypeString)
	}
	if value, ok := jdu.mutation.BuildingType(); ok {
		_spec.SetField(jobdetail.FieldBuildingType, field.TypeString, value)
	}
	if jdu.mutation.BuildingTypeCleared() {
		_spec.ClearField(jobdetail.FieldBuildingType, field.TypeString)
	}
	if value, ok := jdu.mutation.BuildingBlock(); ok {
		_spec.SetField(jobdetail.FieldBuildingBlock, field.TypeString, value)
	}
	if jdu.mutation.BuildingBlockCleared() {
		_spec.ClearField(jobdetail.FieldBuildingBlock, field.TypeString)
	}
	if value, ok := jdu.mutation.LandArea(); ok {
		_spec.SetField(jobdetail.FieldLandArea, field.TypeString, value)
	}
	if jdu.mutation.LandAreaCleared() {
		_spec.ClearField(jobdetail.FieldLandArea, field.TypeString)
	}
	if value, ok := jdu.mutation.Floors(); ok {
		_spec.SetField(jobdetail.FieldFloors, field.TypeInt, value)
	}
	if value, ok := jdu.mutation.AddedFloors(); ok {
		_spec.AddField(jobdetail.FieldFloors, field.TypeInt, value)
	}
	if jdu.mutation.FloorsCleared() {
		_spec.ClearField(jobdetail.FieldFloors, field.TypeInt)
	}
	if value, ok := jdu.mutation.UsagePurpose(); ok {
		_spec.SetField(jobdetail.FieldUsagePurpose, field.TypeString, value)
	}
	if jdu.mutation.UsagePurposeCleared() {
		_spec.ClearField(jobdetail.FieldUsagePurpose, field.TypeString)
	}
	if value, ok := jdu.mutation.Note(); ok {
		_spec.SetField(jobdetail.FieldNote, field.TypeString, value)
	}
	if jdu.mutation.NoteCleared() {
		_spec.ClearField(jobdetail.FieldNote, field.TypeString)
	}
	if value, ok := jdu.mutation.Started(); ok {
		_spec.SetField(jobdetail.FieldStarted, field.TypeInt, value)
	}
	if value, ok := jdu.mutation.AddedStarted(); ok {
		_spec.AddField(jobdetail.FieldStarted, field.TypeInt, value)
	}
	if value, ok := jdu.mutation.Deleted(); ok {
		_spec.SetField(jobdetail.FieldDeleted, field.TypeInt, value)
	}
	if value, ok := jdu.mutation.AddedDeleted(); ok {
		_spec.AddField(jobdetail.FieldDeleted, field.TypeInt, value)
	}
	if value, ok := jdu.mutation.CreatedAt(); ok {
		_spec.SetField(jobdetail.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := jdu.mutation.UpdatedAt(); ok {
		_spec.SetField(jobdetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if jdu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.OwnerTable,
			Columns: []string{jobdetail.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobowner.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jdu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.OwnerTable,
			Columns: []string{jobdetail.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobowner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jdu.mutation.ContractorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ContractorTable,
			Columns: []string{jobdetail.ContractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobcontractor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jdu.mutation.ContractorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ContractorTable,
			Columns: []string{jobdetail.ContractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobcontractor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jdu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.AuthorTable,
			Columns: []string{jobdetail.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobauthor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jdu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.AuthorTable,
			Columns: []string{jobdetail.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobauthor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jdu.mutation.ProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ProgressTable,
			Columns: []string{jobdetail.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jdu.mutation.ProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ProgressTable,
			Columns: []string{jobdetail.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jdu.mutation.InspectorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.InspectorTable,
			Columns: []string{jobdetail.InspectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jdu.mutation.InspectorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.InspectorTable,
			Columns: []string{jobdetail.InspectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jdu.mutation.ArchitectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ArchitectTable,
			Columns: []string{jobdetail.ArchitectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jdu.mutation.ArchitectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ArchitectTable,
			Columns: []string{jobdetail.ArchitectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jdu.mutation.StaticCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.StaticTable,
			Columns: []string{jobdetail.StaticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jdu.mutation.StaticIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.StaticTable,
			Columns: []string{jobdetail.StaticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jdu.mutation.MechanicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.MechanicTable,
			Columns: []string{jobdetail.MechanicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jdu.mutation.MechanicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.MechanicTable,
			Columns: []string{jobdetail.MechanicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jdu.mutation.ElectricCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ElectricTable,
			Columns: []string{jobdetail.ElectricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jdu.mutation.ElectricIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ElectricTable,
			Columns: []string{jobdetail.ElectricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jdu.mutation.ControllerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ControllerTable,
			Columns: []string{jobdetail.ControllerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jdu.mutation.ControllerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ControllerTable,
			Columns: []string{jobdetail.ControllerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jdu.mutation.MechaniccontrollerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.MechaniccontrollerTable,
			Columns: []string{jobdetail.MechaniccontrollerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jdu.mutation.MechaniccontrollerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.MechaniccontrollerTable,
			Columns: []string{jobdetail.MechaniccontrollerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jdu.mutation.ElectriccontrollerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ElectriccontrollerTable,
			Columns: []string{jobdetail.ElectriccontrollerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jdu.mutation.ElectriccontrollerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ElectriccontrollerTable,
			Columns: []string{jobdetail.ElectriccontrollerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jdu.mutation.LayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobdetail.LayersTable,
			Columns: []string{jobdetail.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblayer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jdu.mutation.RemovedLayersIDs(); len(nodes) > 0 && !jdu.mutation.LayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobdetail.LayersTable,
			Columns: []string{jobdetail.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jdu.mutation.LayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobdetail.LayersTable,
			Columns: []string{jobdetail.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jdu.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobdetail.PaymentsTable,
			Columns: []string{jobdetail.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobpayments.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jdu.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !jdu.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobdetail.PaymentsTable,
			Columns: []string{jobdetail.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobpayments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jdu.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobdetail.PaymentsTable,
			Columns: []string{jobdetail.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobpayments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jdu.mutation.done = true
	return n, nil
}

// JobDetailUpdateOne is the builder for updating a single JobDetail entity.
type JobDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobDetailMutation
}

// SetYibfNo sets the "YibfNo" field.
func (jduo *JobDetailUpdateOne) SetYibfNo(i int) *JobDetailUpdateOne {
	jduo.mutation.ResetYibfNo()
	jduo.mutation.SetYibfNo(i)
	return jduo
}

// SetNillableYibfNo sets the "YibfNo" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableYibfNo(i *int) *JobDetailUpdateOne {
	if i != nil {
		jduo.SetYibfNo(*i)
	}
	return jduo
}

// AddYibfNo adds i to the "YibfNo" field.
func (jduo *JobDetailUpdateOne) AddYibfNo(i int) *JobDetailUpdateOne {
	jduo.mutation.AddYibfNo(i)
	return jduo
}

// SetIdare sets the "Idare" field.
func (jduo *JobDetailUpdateOne) SetIdare(s string) *JobDetailUpdateOne {
	jduo.mutation.SetIdare(s)
	return jduo
}

// SetNillableIdare sets the "Idare" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableIdare(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetIdare(*s)
	}
	return jduo
}

// ClearIdare clears the value of the "Idare" field.
func (jduo *JobDetailUpdateOne) ClearIdare() *JobDetailUpdateOne {
	jduo.mutation.ClearIdare()
	return jduo
}

// SetPafta sets the "Pafta" field.
func (jduo *JobDetailUpdateOne) SetPafta(s string) *JobDetailUpdateOne {
	jduo.mutation.SetPafta(s)
	return jduo
}

// SetNillablePafta sets the "Pafta" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillablePafta(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetPafta(*s)
	}
	return jduo
}

// ClearPafta clears the value of the "Pafta" field.
func (jduo *JobDetailUpdateOne) ClearPafta() *JobDetailUpdateOne {
	jduo.mutation.ClearPafta()
	return jduo
}

// SetAda sets the "Ada" field.
func (jduo *JobDetailUpdateOne) SetAda(s string) *JobDetailUpdateOne {
	jduo.mutation.SetAda(s)
	return jduo
}

// SetNillableAda sets the "Ada" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableAda(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetAda(*s)
	}
	return jduo
}

// ClearAda clears the value of the "Ada" field.
func (jduo *JobDetailUpdateOne) ClearAda() *JobDetailUpdateOne {
	jduo.mutation.ClearAda()
	return jduo
}

// SetParsel sets the "Parsel" field.
func (jduo *JobDetailUpdateOne) SetParsel(s string) *JobDetailUpdateOne {
	jduo.mutation.SetParsel(s)
	return jduo
}

// SetNillableParsel sets the "Parsel" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableParsel(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetParsel(*s)
	}
	return jduo
}

// ClearParsel clears the value of the "Parsel" field.
func (jduo *JobDetailUpdateOne) ClearParsel() *JobDetailUpdateOne {
	jduo.mutation.ClearParsel()
	return jduo
}

// SetFolderNo sets the "FolderNo" field.
func (jduo *JobDetailUpdateOne) SetFolderNo(s string) *JobDetailUpdateOne {
	jduo.mutation.SetFolderNo(s)
	return jduo
}

// SetNillableFolderNo sets the "FolderNo" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableFolderNo(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetFolderNo(*s)
	}
	return jduo
}

// ClearFolderNo clears the value of the "FolderNo" field.
func (jduo *JobDetailUpdateOne) ClearFolderNo() *JobDetailUpdateOne {
	jduo.mutation.ClearFolderNo()
	return jduo
}

// SetStatus sets the "Status" field.
func (jduo *JobDetailUpdateOne) SetStatus(i int) *JobDetailUpdateOne {
	jduo.mutation.ResetStatus()
	jduo.mutation.SetStatus(i)
	return jduo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableStatus(i *int) *JobDetailUpdateOne {
	if i != nil {
		jduo.SetStatus(*i)
	}
	return jduo
}

// AddStatus adds i to the "Status" field.
func (jduo *JobDetailUpdateOne) AddStatus(i int) *JobDetailUpdateOne {
	jduo.mutation.AddStatus(i)
	return jduo
}

// SetContractDate sets the "ContractDate" field.
func (jduo *JobDetailUpdateOne) SetContractDate(t time.Time) *JobDetailUpdateOne {
	jduo.mutation.SetContractDate(t)
	return jduo
}

// SetNillableContractDate sets the "ContractDate" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableContractDate(t *time.Time) *JobDetailUpdateOne {
	if t != nil {
		jduo.SetContractDate(*t)
	}
	return jduo
}

// ClearContractDate clears the value of the "ContractDate" field.
func (jduo *JobDetailUpdateOne) ClearContractDate() *JobDetailUpdateOne {
	jduo.mutation.ClearContractDate()
	return jduo
}

// SetCompletionDate sets the "CompletionDate" field.
func (jduo *JobDetailUpdateOne) SetCompletionDate(t time.Time) *JobDetailUpdateOne {
	jduo.mutation.SetCompletionDate(t)
	return jduo
}

// SetNillableCompletionDate sets the "CompletionDate" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableCompletionDate(t *time.Time) *JobDetailUpdateOne {
	if t != nil {
		jduo.SetCompletionDate(*t)
	}
	return jduo
}

// ClearCompletionDate clears the value of the "CompletionDate" field.
func (jduo *JobDetailUpdateOne) ClearCompletionDate() *JobDetailUpdateOne {
	jduo.mutation.ClearCompletionDate()
	return jduo
}

// SetStartDate sets the "StartDate" field.
func (jduo *JobDetailUpdateOne) SetStartDate(t time.Time) *JobDetailUpdateOne {
	jduo.mutation.SetStartDate(t)
	return jduo
}

// SetNillableStartDate sets the "StartDate" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableStartDate(t *time.Time) *JobDetailUpdateOne {
	if t != nil {
		jduo.SetStartDate(*t)
	}
	return jduo
}

// ClearStartDate clears the value of the "StartDate" field.
func (jduo *JobDetailUpdateOne) ClearStartDate() *JobDetailUpdateOne {
	jduo.mutation.ClearStartDate()
	return jduo
}

// SetLicenseDate sets the "LicenseDate" field.
func (jduo *JobDetailUpdateOne) SetLicenseDate(t time.Time) *JobDetailUpdateOne {
	jduo.mutation.SetLicenseDate(t)
	return jduo
}

// SetNillableLicenseDate sets the "LicenseDate" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableLicenseDate(t *time.Time) *JobDetailUpdateOne {
	if t != nil {
		jduo.SetLicenseDate(*t)
	}
	return jduo
}

// ClearLicenseDate clears the value of the "LicenseDate" field.
func (jduo *JobDetailUpdateOne) ClearLicenseDate() *JobDetailUpdateOne {
	jduo.mutation.ClearLicenseDate()
	return jduo
}

// SetLicenseNo sets the "LicenseNo" field.
func (jduo *JobDetailUpdateOne) SetLicenseNo(s string) *JobDetailUpdateOne {
	jduo.mutation.SetLicenseNo(s)
	return jduo
}

// SetNillableLicenseNo sets the "LicenseNo" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableLicenseNo(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetLicenseNo(*s)
	}
	return jduo
}

// ClearLicenseNo clears the value of the "LicenseNo" field.
func (jduo *JobDetailUpdateOne) ClearLicenseNo() *JobDetailUpdateOne {
	jduo.mutation.ClearLicenseNo()
	return jduo
}

// SetConstructionArea sets the "ConstructionArea" field.
func (jduo *JobDetailUpdateOne) SetConstructionArea(s string) *JobDetailUpdateOne {
	jduo.mutation.SetConstructionArea(s)
	return jduo
}

// SetNillableConstructionArea sets the "ConstructionArea" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableConstructionArea(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetConstructionArea(*s)
	}
	return jduo
}

// ClearConstructionArea clears the value of the "ConstructionArea" field.
func (jduo *JobDetailUpdateOne) ClearConstructionArea() *JobDetailUpdateOne {
	jduo.mutation.ClearConstructionArea()
	return jduo
}

// SetCity sets the "City" field.
func (jduo *JobDetailUpdateOne) SetCity(s string) *JobDetailUpdateOne {
	jduo.mutation.SetCity(s)
	return jduo
}

// SetNillableCity sets the "City" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableCity(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetCity(*s)
	}
	return jduo
}

// ClearCity clears the value of the "City" field.
func (jduo *JobDetailUpdateOne) ClearCity() *JobDetailUpdateOne {
	jduo.mutation.ClearCity()
	return jduo
}

// SetDistrict sets the "District" field.
func (jduo *JobDetailUpdateOne) SetDistrict(s string) *JobDetailUpdateOne {
	jduo.mutation.SetDistrict(s)
	return jduo
}

// SetNillableDistrict sets the "District" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableDistrict(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetDistrict(*s)
	}
	return jduo
}

// ClearDistrict clears the value of the "District" field.
func (jduo *JobDetailUpdateOne) ClearDistrict() *JobDetailUpdateOne {
	jduo.mutation.ClearDistrict()
	return jduo
}

// SetVillage sets the "Village" field.
func (jduo *JobDetailUpdateOne) SetVillage(s string) *JobDetailUpdateOne {
	jduo.mutation.SetVillage(s)
	return jduo
}

// SetNillableVillage sets the "Village" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableVillage(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetVillage(*s)
	}
	return jduo
}

// ClearVillage clears the value of the "Village" field.
func (jduo *JobDetailUpdateOne) ClearVillage() *JobDetailUpdateOne {
	jduo.mutation.ClearVillage()
	return jduo
}

// SetStreet sets the "Street" field.
func (jduo *JobDetailUpdateOne) SetStreet(s string) *JobDetailUpdateOne {
	jduo.mutation.SetStreet(s)
	return jduo
}

// SetNillableStreet sets the "Street" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableStreet(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetStreet(*s)
	}
	return jduo
}

// ClearStreet clears the value of the "Street" field.
func (jduo *JobDetailUpdateOne) ClearStreet() *JobDetailUpdateOne {
	jduo.mutation.ClearStreet()
	return jduo
}

// SetBuildingClass sets the "BuildingClass" field.
func (jduo *JobDetailUpdateOne) SetBuildingClass(s string) *JobDetailUpdateOne {
	jduo.mutation.SetBuildingClass(s)
	return jduo
}

// SetNillableBuildingClass sets the "BuildingClass" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableBuildingClass(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetBuildingClass(*s)
	}
	return jduo
}

// ClearBuildingClass clears the value of the "BuildingClass" field.
func (jduo *JobDetailUpdateOne) ClearBuildingClass() *JobDetailUpdateOne {
	jduo.mutation.ClearBuildingClass()
	return jduo
}

// SetBuildingType sets the "BuildingType" field.
func (jduo *JobDetailUpdateOne) SetBuildingType(s string) *JobDetailUpdateOne {
	jduo.mutation.SetBuildingType(s)
	return jduo
}

// SetNillableBuildingType sets the "BuildingType" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableBuildingType(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetBuildingType(*s)
	}
	return jduo
}

// ClearBuildingType clears the value of the "BuildingType" field.
func (jduo *JobDetailUpdateOne) ClearBuildingType() *JobDetailUpdateOne {
	jduo.mutation.ClearBuildingType()
	return jduo
}

// SetBuildingBlock sets the "BuildingBlock" field.
func (jduo *JobDetailUpdateOne) SetBuildingBlock(s string) *JobDetailUpdateOne {
	jduo.mutation.SetBuildingBlock(s)
	return jduo
}

// SetNillableBuildingBlock sets the "BuildingBlock" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableBuildingBlock(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetBuildingBlock(*s)
	}
	return jduo
}

// ClearBuildingBlock clears the value of the "BuildingBlock" field.
func (jduo *JobDetailUpdateOne) ClearBuildingBlock() *JobDetailUpdateOne {
	jduo.mutation.ClearBuildingBlock()
	return jduo
}

// SetLandArea sets the "LandArea" field.
func (jduo *JobDetailUpdateOne) SetLandArea(s string) *JobDetailUpdateOne {
	jduo.mutation.SetLandArea(s)
	return jduo
}

// SetNillableLandArea sets the "LandArea" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableLandArea(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetLandArea(*s)
	}
	return jduo
}

// ClearLandArea clears the value of the "LandArea" field.
func (jduo *JobDetailUpdateOne) ClearLandArea() *JobDetailUpdateOne {
	jduo.mutation.ClearLandArea()
	return jduo
}

// SetFloors sets the "Floors" field.
func (jduo *JobDetailUpdateOne) SetFloors(i int) *JobDetailUpdateOne {
	jduo.mutation.ResetFloors()
	jduo.mutation.SetFloors(i)
	return jduo
}

// SetNillableFloors sets the "Floors" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableFloors(i *int) *JobDetailUpdateOne {
	if i != nil {
		jduo.SetFloors(*i)
	}
	return jduo
}

// AddFloors adds i to the "Floors" field.
func (jduo *JobDetailUpdateOne) AddFloors(i int) *JobDetailUpdateOne {
	jduo.mutation.AddFloors(i)
	return jduo
}

// ClearFloors clears the value of the "Floors" field.
func (jduo *JobDetailUpdateOne) ClearFloors() *JobDetailUpdateOne {
	jduo.mutation.ClearFloors()
	return jduo
}

// SetUsagePurpose sets the "UsagePurpose" field.
func (jduo *JobDetailUpdateOne) SetUsagePurpose(s string) *JobDetailUpdateOne {
	jduo.mutation.SetUsagePurpose(s)
	return jduo
}

// SetNillableUsagePurpose sets the "UsagePurpose" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableUsagePurpose(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetUsagePurpose(*s)
	}
	return jduo
}

// ClearUsagePurpose clears the value of the "UsagePurpose" field.
func (jduo *JobDetailUpdateOne) ClearUsagePurpose() *JobDetailUpdateOne {
	jduo.mutation.ClearUsagePurpose()
	return jduo
}

// SetNote sets the "Note" field.
func (jduo *JobDetailUpdateOne) SetNote(s string) *JobDetailUpdateOne {
	jduo.mutation.SetNote(s)
	return jduo
}

// SetNillableNote sets the "Note" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableNote(s *string) *JobDetailUpdateOne {
	if s != nil {
		jduo.SetNote(*s)
	}
	return jduo
}

// ClearNote clears the value of the "Note" field.
func (jduo *JobDetailUpdateOne) ClearNote() *JobDetailUpdateOne {
	jduo.mutation.ClearNote()
	return jduo
}

// SetStarted sets the "Started" field.
func (jduo *JobDetailUpdateOne) SetStarted(i int) *JobDetailUpdateOne {
	jduo.mutation.ResetStarted()
	jduo.mutation.SetStarted(i)
	return jduo
}

// SetNillableStarted sets the "Started" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableStarted(i *int) *JobDetailUpdateOne {
	if i != nil {
		jduo.SetStarted(*i)
	}
	return jduo
}

// AddStarted adds i to the "Started" field.
func (jduo *JobDetailUpdateOne) AddStarted(i int) *JobDetailUpdateOne {
	jduo.mutation.AddStarted(i)
	return jduo
}

// SetDeleted sets the "Deleted" field.
func (jduo *JobDetailUpdateOne) SetDeleted(i int) *JobDetailUpdateOne {
	jduo.mutation.ResetDeleted()
	jduo.mutation.SetDeleted(i)
	return jduo
}

// SetNillableDeleted sets the "Deleted" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableDeleted(i *int) *JobDetailUpdateOne {
	if i != nil {
		jduo.SetDeleted(*i)
	}
	return jduo
}

// AddDeleted adds i to the "Deleted" field.
func (jduo *JobDetailUpdateOne) AddDeleted(i int) *JobDetailUpdateOne {
	jduo.mutation.AddDeleted(i)
	return jduo
}

// SetCreatedAt sets the "CreatedAt" field.
func (jduo *JobDetailUpdateOne) SetCreatedAt(t time.Time) *JobDetailUpdateOne {
	jduo.mutation.SetCreatedAt(t)
	return jduo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableCreatedAt(t *time.Time) *JobDetailUpdateOne {
	if t != nil {
		jduo.SetCreatedAt(*t)
	}
	return jduo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (jduo *JobDetailUpdateOne) SetUpdatedAt(t time.Time) *JobDetailUpdateOne {
	jduo.mutation.SetUpdatedAt(t)
	return jduo
}

// SetOwnerID sets the "owner" edge to the JobOwner entity by ID.
func (jduo *JobDetailUpdateOne) SetOwnerID(id int) *JobDetailUpdateOne {
	jduo.mutation.SetOwnerID(id)
	return jduo
}

// SetNillableOwnerID sets the "owner" edge to the JobOwner entity by ID if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableOwnerID(id *int) *JobDetailUpdateOne {
	if id != nil {
		jduo = jduo.SetOwnerID(*id)
	}
	return jduo
}

// SetOwner sets the "owner" edge to the JobOwner entity.
func (jduo *JobDetailUpdateOne) SetOwner(j *JobOwner) *JobDetailUpdateOne {
	return jduo.SetOwnerID(j.ID)
}

// SetContractorID sets the "contractor" edge to the JobContractor entity by ID.
func (jduo *JobDetailUpdateOne) SetContractorID(id int) *JobDetailUpdateOne {
	jduo.mutation.SetContractorID(id)
	return jduo
}

// SetNillableContractorID sets the "contractor" edge to the JobContractor entity by ID if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableContractorID(id *int) *JobDetailUpdateOne {
	if id != nil {
		jduo = jduo.SetContractorID(*id)
	}
	return jduo
}

// SetContractor sets the "contractor" edge to the JobContractor entity.
func (jduo *JobDetailUpdateOne) SetContractor(j *JobContractor) *JobDetailUpdateOne {
	return jduo.SetContractorID(j.ID)
}

// SetAuthorID sets the "author" edge to the JobAuthor entity by ID.
func (jduo *JobDetailUpdateOne) SetAuthorID(id int) *JobDetailUpdateOne {
	jduo.mutation.SetAuthorID(id)
	return jduo
}

// SetNillableAuthorID sets the "author" edge to the JobAuthor entity by ID if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableAuthorID(id *int) *JobDetailUpdateOne {
	if id != nil {
		jduo = jduo.SetAuthorID(*id)
	}
	return jduo
}

// SetAuthor sets the "author" edge to the JobAuthor entity.
func (jduo *JobDetailUpdateOne) SetAuthor(j *JobAuthor) *JobDetailUpdateOne {
	return jduo.SetAuthorID(j.ID)
}

// SetProgressID sets the "progress" edge to the JobProgress entity by ID.
func (jduo *JobDetailUpdateOne) SetProgressID(id int) *JobDetailUpdateOne {
	jduo.mutation.SetProgressID(id)
	return jduo
}

// SetNillableProgressID sets the "progress" edge to the JobProgress entity by ID if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableProgressID(id *int) *JobDetailUpdateOne {
	if id != nil {
		jduo = jduo.SetProgressID(*id)
	}
	return jduo
}

// SetProgress sets the "progress" edge to the JobProgress entity.
func (jduo *JobDetailUpdateOne) SetProgress(j *JobProgress) *JobDetailUpdateOne {
	return jduo.SetProgressID(j.ID)
}

// SetInspectorID sets the "inspector" edge to the CompanyEngineer entity by ID.
func (jduo *JobDetailUpdateOne) SetInspectorID(id int) *JobDetailUpdateOne {
	jduo.mutation.SetInspectorID(id)
	return jduo
}

// SetNillableInspectorID sets the "inspector" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableInspectorID(id *int) *JobDetailUpdateOne {
	if id != nil {
		jduo = jduo.SetInspectorID(*id)
	}
	return jduo
}

// SetInspector sets the "inspector" edge to the CompanyEngineer entity.
func (jduo *JobDetailUpdateOne) SetInspector(c *CompanyEngineer) *JobDetailUpdateOne {
	return jduo.SetInspectorID(c.ID)
}

// SetArchitectID sets the "architect" edge to the CompanyEngineer entity by ID.
func (jduo *JobDetailUpdateOne) SetArchitectID(id int) *JobDetailUpdateOne {
	jduo.mutation.SetArchitectID(id)
	return jduo
}

// SetNillableArchitectID sets the "architect" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableArchitectID(id *int) *JobDetailUpdateOne {
	if id != nil {
		jduo = jduo.SetArchitectID(*id)
	}
	return jduo
}

// SetArchitect sets the "architect" edge to the CompanyEngineer entity.
func (jduo *JobDetailUpdateOne) SetArchitect(c *CompanyEngineer) *JobDetailUpdateOne {
	return jduo.SetArchitectID(c.ID)
}

// SetStaticID sets the "static" edge to the CompanyEngineer entity by ID.
func (jduo *JobDetailUpdateOne) SetStaticID(id int) *JobDetailUpdateOne {
	jduo.mutation.SetStaticID(id)
	return jduo
}

// SetNillableStaticID sets the "static" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableStaticID(id *int) *JobDetailUpdateOne {
	if id != nil {
		jduo = jduo.SetStaticID(*id)
	}
	return jduo
}

// SetStatic sets the "static" edge to the CompanyEngineer entity.
func (jduo *JobDetailUpdateOne) SetStatic(c *CompanyEngineer) *JobDetailUpdateOne {
	return jduo.SetStaticID(c.ID)
}

// SetMechanicID sets the "mechanic" edge to the CompanyEngineer entity by ID.
func (jduo *JobDetailUpdateOne) SetMechanicID(id int) *JobDetailUpdateOne {
	jduo.mutation.SetMechanicID(id)
	return jduo
}

// SetNillableMechanicID sets the "mechanic" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableMechanicID(id *int) *JobDetailUpdateOne {
	if id != nil {
		jduo = jduo.SetMechanicID(*id)
	}
	return jduo
}

// SetMechanic sets the "mechanic" edge to the CompanyEngineer entity.
func (jduo *JobDetailUpdateOne) SetMechanic(c *CompanyEngineer) *JobDetailUpdateOne {
	return jduo.SetMechanicID(c.ID)
}

// SetElectricID sets the "electric" edge to the CompanyEngineer entity by ID.
func (jduo *JobDetailUpdateOne) SetElectricID(id int) *JobDetailUpdateOne {
	jduo.mutation.SetElectricID(id)
	return jduo
}

// SetNillableElectricID sets the "electric" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableElectricID(id *int) *JobDetailUpdateOne {
	if id != nil {
		jduo = jduo.SetElectricID(*id)
	}
	return jduo
}

// SetElectric sets the "electric" edge to the CompanyEngineer entity.
func (jduo *JobDetailUpdateOne) SetElectric(c *CompanyEngineer) *JobDetailUpdateOne {
	return jduo.SetElectricID(c.ID)
}

// SetControllerID sets the "controller" edge to the CompanyEngineer entity by ID.
func (jduo *JobDetailUpdateOne) SetControllerID(id int) *JobDetailUpdateOne {
	jduo.mutation.SetControllerID(id)
	return jduo
}

// SetNillableControllerID sets the "controller" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableControllerID(id *int) *JobDetailUpdateOne {
	if id != nil {
		jduo = jduo.SetControllerID(*id)
	}
	return jduo
}

// SetController sets the "controller" edge to the CompanyEngineer entity.
func (jduo *JobDetailUpdateOne) SetController(c *CompanyEngineer) *JobDetailUpdateOne {
	return jduo.SetControllerID(c.ID)
}

// SetMechaniccontrollerID sets the "mechaniccontroller" edge to the CompanyEngineer entity by ID.
func (jduo *JobDetailUpdateOne) SetMechaniccontrollerID(id int) *JobDetailUpdateOne {
	jduo.mutation.SetMechaniccontrollerID(id)
	return jduo
}

// SetNillableMechaniccontrollerID sets the "mechaniccontroller" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableMechaniccontrollerID(id *int) *JobDetailUpdateOne {
	if id != nil {
		jduo = jduo.SetMechaniccontrollerID(*id)
	}
	return jduo
}

// SetMechaniccontroller sets the "mechaniccontroller" edge to the CompanyEngineer entity.
func (jduo *JobDetailUpdateOne) SetMechaniccontroller(c *CompanyEngineer) *JobDetailUpdateOne {
	return jduo.SetMechaniccontrollerID(c.ID)
}

// SetElectriccontrollerID sets the "electriccontroller" edge to the CompanyEngineer entity by ID.
func (jduo *JobDetailUpdateOne) SetElectriccontrollerID(id int) *JobDetailUpdateOne {
	jduo.mutation.SetElectriccontrollerID(id)
	return jduo
}

// SetNillableElectriccontrollerID sets the "electriccontroller" edge to the CompanyEngineer entity by ID if the given value is not nil.
func (jduo *JobDetailUpdateOne) SetNillableElectriccontrollerID(id *int) *JobDetailUpdateOne {
	if id != nil {
		jduo = jduo.SetElectriccontrollerID(*id)
	}
	return jduo
}

// SetElectriccontroller sets the "electriccontroller" edge to the CompanyEngineer entity.
func (jduo *JobDetailUpdateOne) SetElectriccontroller(c *CompanyEngineer) *JobDetailUpdateOne {
	return jduo.SetElectriccontrollerID(c.ID)
}

// AddLayerIDs adds the "layers" edge to the JobLayer entity by IDs.
func (jduo *JobDetailUpdateOne) AddLayerIDs(ids ...int) *JobDetailUpdateOne {
	jduo.mutation.AddLayerIDs(ids...)
	return jduo
}

// AddLayers adds the "layers" edges to the JobLayer entity.
func (jduo *JobDetailUpdateOne) AddLayers(j ...*JobLayer) *JobDetailUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jduo.AddLayerIDs(ids...)
}

// AddPaymentIDs adds the "payments" edge to the JobPayments entity by IDs.
func (jduo *JobDetailUpdateOne) AddPaymentIDs(ids ...int) *JobDetailUpdateOne {
	jduo.mutation.AddPaymentIDs(ids...)
	return jduo
}

// AddPayments adds the "payments" edges to the JobPayments entity.
func (jduo *JobDetailUpdateOne) AddPayments(j ...*JobPayments) *JobDetailUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jduo.AddPaymentIDs(ids...)
}

// Mutation returns the JobDetailMutation object of the builder.
func (jduo *JobDetailUpdateOne) Mutation() *JobDetailMutation {
	return jduo.mutation
}

// ClearOwner clears the "owner" edge to the JobOwner entity.
func (jduo *JobDetailUpdateOne) ClearOwner() *JobDetailUpdateOne {
	jduo.mutation.ClearOwner()
	return jduo
}

// ClearContractor clears the "contractor" edge to the JobContractor entity.
func (jduo *JobDetailUpdateOne) ClearContractor() *JobDetailUpdateOne {
	jduo.mutation.ClearContractor()
	return jduo
}

// ClearAuthor clears the "author" edge to the JobAuthor entity.
func (jduo *JobDetailUpdateOne) ClearAuthor() *JobDetailUpdateOne {
	jduo.mutation.ClearAuthor()
	return jduo
}

// ClearProgress clears the "progress" edge to the JobProgress entity.
func (jduo *JobDetailUpdateOne) ClearProgress() *JobDetailUpdateOne {
	jduo.mutation.ClearProgress()
	return jduo
}

// ClearInspector clears the "inspector" edge to the CompanyEngineer entity.
func (jduo *JobDetailUpdateOne) ClearInspector() *JobDetailUpdateOne {
	jduo.mutation.ClearInspector()
	return jduo
}

// ClearArchitect clears the "architect" edge to the CompanyEngineer entity.
func (jduo *JobDetailUpdateOne) ClearArchitect() *JobDetailUpdateOne {
	jduo.mutation.ClearArchitect()
	return jduo
}

// ClearStatic clears the "static" edge to the CompanyEngineer entity.
func (jduo *JobDetailUpdateOne) ClearStatic() *JobDetailUpdateOne {
	jduo.mutation.ClearStatic()
	return jduo
}

// ClearMechanic clears the "mechanic" edge to the CompanyEngineer entity.
func (jduo *JobDetailUpdateOne) ClearMechanic() *JobDetailUpdateOne {
	jduo.mutation.ClearMechanic()
	return jduo
}

// ClearElectric clears the "electric" edge to the CompanyEngineer entity.
func (jduo *JobDetailUpdateOne) ClearElectric() *JobDetailUpdateOne {
	jduo.mutation.ClearElectric()
	return jduo
}

// ClearController clears the "controller" edge to the CompanyEngineer entity.
func (jduo *JobDetailUpdateOne) ClearController() *JobDetailUpdateOne {
	jduo.mutation.ClearController()
	return jduo
}

// ClearMechaniccontroller clears the "mechaniccontroller" edge to the CompanyEngineer entity.
func (jduo *JobDetailUpdateOne) ClearMechaniccontroller() *JobDetailUpdateOne {
	jduo.mutation.ClearMechaniccontroller()
	return jduo
}

// ClearElectriccontroller clears the "electriccontroller" edge to the CompanyEngineer entity.
func (jduo *JobDetailUpdateOne) ClearElectriccontroller() *JobDetailUpdateOne {
	jduo.mutation.ClearElectriccontroller()
	return jduo
}

// ClearLayers clears all "layers" edges to the JobLayer entity.
func (jduo *JobDetailUpdateOne) ClearLayers() *JobDetailUpdateOne {
	jduo.mutation.ClearLayers()
	return jduo
}

// RemoveLayerIDs removes the "layers" edge to JobLayer entities by IDs.
func (jduo *JobDetailUpdateOne) RemoveLayerIDs(ids ...int) *JobDetailUpdateOne {
	jduo.mutation.RemoveLayerIDs(ids...)
	return jduo
}

// RemoveLayers removes "layers" edges to JobLayer entities.
func (jduo *JobDetailUpdateOne) RemoveLayers(j ...*JobLayer) *JobDetailUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jduo.RemoveLayerIDs(ids...)
}

// ClearPayments clears all "payments" edges to the JobPayments entity.
func (jduo *JobDetailUpdateOne) ClearPayments() *JobDetailUpdateOne {
	jduo.mutation.ClearPayments()
	return jduo
}

// RemovePaymentIDs removes the "payments" edge to JobPayments entities by IDs.
func (jduo *JobDetailUpdateOne) RemovePaymentIDs(ids ...int) *JobDetailUpdateOne {
	jduo.mutation.RemovePaymentIDs(ids...)
	return jduo
}

// RemovePayments removes "payments" edges to JobPayments entities.
func (jduo *JobDetailUpdateOne) RemovePayments(j ...*JobPayments) *JobDetailUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jduo.RemovePaymentIDs(ids...)
}

// Where appends a list predicates to the JobDetailUpdate builder.
func (jduo *JobDetailUpdateOne) Where(ps ...predicate.JobDetail) *JobDetailUpdateOne {
	jduo.mutation.Where(ps...)
	return jduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jduo *JobDetailUpdateOne) Select(field string, fields ...string) *JobDetailUpdateOne {
	jduo.fields = append([]string{field}, fields...)
	return jduo
}

// Save executes the query and returns the updated JobDetail entity.
func (jduo *JobDetailUpdateOne) Save(ctx context.Context) (*JobDetail, error) {
	jduo.defaults()
	return withHooks(ctx, jduo.sqlSave, jduo.mutation, jduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jduo *JobDetailUpdateOne) SaveX(ctx context.Context) *JobDetail {
	node, err := jduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jduo *JobDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := jduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jduo *JobDetailUpdateOne) ExecX(ctx context.Context) {
	if err := jduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jduo *JobDetailUpdateOne) defaults() {
	if _, ok := jduo.mutation.UpdatedAt(); !ok {
		v := jobdetail.UpdateDefaultUpdatedAt()
		jduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jduo *JobDetailUpdateOne) check() error {
	if v, ok := jduo.mutation.YibfNo(); ok {
		if err := jobdetail.YibfNoValidator(v); err != nil {
			return &ValidationError{Name: "YibfNo", err: fmt.Errorf(`ent: validator failed for field "JobDetail.YibfNo": %w`, err)}
		}
	}
	return nil
}

func (jduo *JobDetailUpdateOne) sqlSave(ctx context.Context) (_node *JobDetail, err error) {
	if err := jduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobdetail.Table, jobdetail.Columns, sqlgraph.NewFieldSpec(jobdetail.FieldID, field.TypeInt))
	id, ok := jduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JobDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobdetail.FieldID)
		for _, f := range fields {
			if !jobdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jobdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jduo.mutation.YibfNo(); ok {
		_spec.SetField(jobdetail.FieldYibfNo, field.TypeInt, value)
	}
	if value, ok := jduo.mutation.AddedYibfNo(); ok {
		_spec.AddField(jobdetail.FieldYibfNo, field.TypeInt, value)
	}
	if value, ok := jduo.mutation.Idare(); ok {
		_spec.SetField(jobdetail.FieldIdare, field.TypeString, value)
	}
	if jduo.mutation.IdareCleared() {
		_spec.ClearField(jobdetail.FieldIdare, field.TypeString)
	}
	if value, ok := jduo.mutation.Pafta(); ok {
		_spec.SetField(jobdetail.FieldPafta, field.TypeString, value)
	}
	if jduo.mutation.PaftaCleared() {
		_spec.ClearField(jobdetail.FieldPafta, field.TypeString)
	}
	if value, ok := jduo.mutation.Ada(); ok {
		_spec.SetField(jobdetail.FieldAda, field.TypeString, value)
	}
	if jduo.mutation.AdaCleared() {
		_spec.ClearField(jobdetail.FieldAda, field.TypeString)
	}
	if value, ok := jduo.mutation.Parsel(); ok {
		_spec.SetField(jobdetail.FieldParsel, field.TypeString, value)
	}
	if jduo.mutation.ParselCleared() {
		_spec.ClearField(jobdetail.FieldParsel, field.TypeString)
	}
	if value, ok := jduo.mutation.FolderNo(); ok {
		_spec.SetField(jobdetail.FieldFolderNo, field.TypeString, value)
	}
	if jduo.mutation.FolderNoCleared() {
		_spec.ClearField(jobdetail.FieldFolderNo, field.TypeString)
	}
	if value, ok := jduo.mutation.Status(); ok {
		_spec.SetField(jobdetail.FieldStatus, field.TypeInt, value)
	}
	if value, ok := jduo.mutation.AddedStatus(); ok {
		_spec.AddField(jobdetail.FieldStatus, field.TypeInt, value)
	}
	if value, ok := jduo.mutation.ContractDate(); ok {
		_spec.SetField(jobdetail.FieldContractDate, field.TypeTime, value)
	}
	if jduo.mutation.ContractDateCleared() {
		_spec.ClearField(jobdetail.FieldContractDate, field.TypeTime)
	}
	if value, ok := jduo.mutation.CompletionDate(); ok {
		_spec.SetField(jobdetail.FieldCompletionDate, field.TypeTime, value)
	}
	if jduo.mutation.CompletionDateCleared() {
		_spec.ClearField(jobdetail.FieldCompletionDate, field.TypeTime)
	}
	if value, ok := jduo.mutation.StartDate(); ok {
		_spec.SetField(jobdetail.FieldStartDate, field.TypeTime, value)
	}
	if jduo.mutation.StartDateCleared() {
		_spec.ClearField(jobdetail.FieldStartDate, field.TypeTime)
	}
	if value, ok := jduo.mutation.LicenseDate(); ok {
		_spec.SetField(jobdetail.FieldLicenseDate, field.TypeTime, value)
	}
	if jduo.mutation.LicenseDateCleared() {
		_spec.ClearField(jobdetail.FieldLicenseDate, field.TypeTime)
	}
	if value, ok := jduo.mutation.LicenseNo(); ok {
		_spec.SetField(jobdetail.FieldLicenseNo, field.TypeString, value)
	}
	if jduo.mutation.LicenseNoCleared() {
		_spec.ClearField(jobdetail.FieldLicenseNo, field.TypeString)
	}
	if value, ok := jduo.mutation.ConstructionArea(); ok {
		_spec.SetField(jobdetail.FieldConstructionArea, field.TypeString, value)
	}
	if jduo.mutation.ConstructionAreaCleared() {
		_spec.ClearField(jobdetail.FieldConstructionArea, field.TypeString)
	}
	if value, ok := jduo.mutation.City(); ok {
		_spec.SetField(jobdetail.FieldCity, field.TypeString, value)
	}
	if jduo.mutation.CityCleared() {
		_spec.ClearField(jobdetail.FieldCity, field.TypeString)
	}
	if value, ok := jduo.mutation.District(); ok {
		_spec.SetField(jobdetail.FieldDistrict, field.TypeString, value)
	}
	if jduo.mutation.DistrictCleared() {
		_spec.ClearField(jobdetail.FieldDistrict, field.TypeString)
	}
	if value, ok := jduo.mutation.Village(); ok {
		_spec.SetField(jobdetail.FieldVillage, field.TypeString, value)
	}
	if jduo.mutation.VillageCleared() {
		_spec.ClearField(jobdetail.FieldVillage, field.TypeString)
	}
	if value, ok := jduo.mutation.Street(); ok {
		_spec.SetField(jobdetail.FieldStreet, field.TypeString, value)
	}
	if jduo.mutation.StreetCleared() {
		_spec.ClearField(jobdetail.FieldStreet, field.TypeString)
	}
	if value, ok := jduo.mutation.BuildingClass(); ok {
		_spec.SetField(jobdetail.FieldBuildingClass, field.TypeString, value)
	}
	if jduo.mutation.BuildingClassCleared() {
		_spec.ClearField(jobdetail.FieldBuildingClass, field.TypeString)
	}
	if value, ok := jduo.mutation.BuildingType(); ok {
		_spec.SetField(jobdetail.FieldBuildingType, field.TypeString, value)
	}
	if jduo.mutation.BuildingTypeCleared() {
		_spec.ClearField(jobdetail.FieldBuildingType, field.TypeString)
	}
	if value, ok := jduo.mutation.BuildingBlock(); ok {
		_spec.SetField(jobdetail.FieldBuildingBlock, field.TypeString, value)
	}
	if jduo.mutation.BuildingBlockCleared() {
		_spec.ClearField(jobdetail.FieldBuildingBlock, field.TypeString)
	}
	if value, ok := jduo.mutation.LandArea(); ok {
		_spec.SetField(jobdetail.FieldLandArea, field.TypeString, value)
	}
	if jduo.mutation.LandAreaCleared() {
		_spec.ClearField(jobdetail.FieldLandArea, field.TypeString)
	}
	if value, ok := jduo.mutation.Floors(); ok {
		_spec.SetField(jobdetail.FieldFloors, field.TypeInt, value)
	}
	if value, ok := jduo.mutation.AddedFloors(); ok {
		_spec.AddField(jobdetail.FieldFloors, field.TypeInt, value)
	}
	if jduo.mutation.FloorsCleared() {
		_spec.ClearField(jobdetail.FieldFloors, field.TypeInt)
	}
	if value, ok := jduo.mutation.UsagePurpose(); ok {
		_spec.SetField(jobdetail.FieldUsagePurpose, field.TypeString, value)
	}
	if jduo.mutation.UsagePurposeCleared() {
		_spec.ClearField(jobdetail.FieldUsagePurpose, field.TypeString)
	}
	if value, ok := jduo.mutation.Note(); ok {
		_spec.SetField(jobdetail.FieldNote, field.TypeString, value)
	}
	if jduo.mutation.NoteCleared() {
		_spec.ClearField(jobdetail.FieldNote, field.TypeString)
	}
	if value, ok := jduo.mutation.Started(); ok {
		_spec.SetField(jobdetail.FieldStarted, field.TypeInt, value)
	}
	if value, ok := jduo.mutation.AddedStarted(); ok {
		_spec.AddField(jobdetail.FieldStarted, field.TypeInt, value)
	}
	if value, ok := jduo.mutation.Deleted(); ok {
		_spec.SetField(jobdetail.FieldDeleted, field.TypeInt, value)
	}
	if value, ok := jduo.mutation.AddedDeleted(); ok {
		_spec.AddField(jobdetail.FieldDeleted, field.TypeInt, value)
	}
	if value, ok := jduo.mutation.CreatedAt(); ok {
		_spec.SetField(jobdetail.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := jduo.mutation.UpdatedAt(); ok {
		_spec.SetField(jobdetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if jduo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.OwnerTable,
			Columns: []string{jobdetail.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobowner.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.OwnerTable,
			Columns: []string{jobdetail.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobowner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jduo.mutation.ContractorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ContractorTable,
			Columns: []string{jobdetail.ContractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobcontractor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduo.mutation.ContractorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ContractorTable,
			Columns: []string{jobdetail.ContractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobcontractor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jduo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.AuthorTable,
			Columns: []string{jobdetail.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobauthor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.AuthorTable,
			Columns: []string{jobdetail.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobauthor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jduo.mutation.ProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ProgressTable,
			Columns: []string{jobdetail.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduo.mutation.ProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ProgressTable,
			Columns: []string{jobdetail.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobprogress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jduo.mutation.InspectorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.InspectorTable,
			Columns: []string{jobdetail.InspectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduo.mutation.InspectorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.InspectorTable,
			Columns: []string{jobdetail.InspectorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jduo.mutation.ArchitectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ArchitectTable,
			Columns: []string{jobdetail.ArchitectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduo.mutation.ArchitectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ArchitectTable,
			Columns: []string{jobdetail.ArchitectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jduo.mutation.StaticCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.StaticTable,
			Columns: []string{jobdetail.StaticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduo.mutation.StaticIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.StaticTable,
			Columns: []string{jobdetail.StaticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jduo.mutation.MechanicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.MechanicTable,
			Columns: []string{jobdetail.MechanicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduo.mutation.MechanicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.MechanicTable,
			Columns: []string{jobdetail.MechanicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jduo.mutation.ElectricCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ElectricTable,
			Columns: []string{jobdetail.ElectricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduo.mutation.ElectricIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ElectricTable,
			Columns: []string{jobdetail.ElectricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jduo.mutation.ControllerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ControllerTable,
			Columns: []string{jobdetail.ControllerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduo.mutation.ControllerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ControllerTable,
			Columns: []string{jobdetail.ControllerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jduo.mutation.MechaniccontrollerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.MechaniccontrollerTable,
			Columns: []string{jobdetail.MechaniccontrollerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduo.mutation.MechaniccontrollerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.MechaniccontrollerTable,
			Columns: []string{jobdetail.MechaniccontrollerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jduo.mutation.ElectriccontrollerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ElectriccontrollerTable,
			Columns: []string{jobdetail.ElectriccontrollerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduo.mutation.ElectriccontrollerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobdetail.ElectriccontrollerTable,
			Columns: []string{jobdetail.ElectriccontrollerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jduo.mutation.LayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobdetail.LayersTable,
			Columns: []string{jobdetail.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblayer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduo.mutation.RemovedLayersIDs(); len(nodes) > 0 && !jduo.mutation.LayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobdetail.LayersTable,
			Columns: []string{jobdetail.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduo.mutation.LayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobdetail.LayersTable,
			Columns: []string{jobdetail.LayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(joblayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jduo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobdetail.PaymentsTable,
			Columns: []string{jobdetail.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobpayments.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduo.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !jduo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobdetail.PaymentsTable,
			Columns: []string{jobdetail.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobpayments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jduo.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   jobdetail.PaymentsTable,
			Columns: []string{jobdetail.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobpayments.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &JobDetail{config: jduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jduo.mutation.done = true
	return _node, nil
}
