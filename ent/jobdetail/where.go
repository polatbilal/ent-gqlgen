// Code generated by ent, DO NOT EDIT.

package jobdetail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/polatbilal/gqlgen-ent/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldID, id))
}

// YibfNo applies equality check predicate on the "YibfNo" field. It's identical to YibfNoEQ.
func YibfNo(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldYibfNo, v))
}

// Idare applies equality check predicate on the "Idare" field. It's identical to IdareEQ.
func Idare(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldIdare, v))
}

// Pafta applies equality check predicate on the "Pafta" field. It's identical to PaftaEQ.
func Pafta(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldPafta, v))
}

// Ada applies equality check predicate on the "Ada" field. It's identical to AdaEQ.
func Ada(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldAda, v))
}

// Parsel applies equality check predicate on the "Parsel" field. It's identical to ParselEQ.
func Parsel(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldParsel, v))
}

// FolderNo applies equality check predicate on the "FolderNo" field. It's identical to FolderNoEQ.
func FolderNo(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldFolderNo, v))
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldStatus, v))
}

// ContractDate applies equality check predicate on the "ContractDate" field. It's identical to ContractDateEQ.
func ContractDate(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldContractDate, v))
}

// CompletionDate applies equality check predicate on the "CompletionDate" field. It's identical to CompletionDateEQ.
func CompletionDate(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldCompletionDate, v))
}

// StartDate applies equality check predicate on the "StartDate" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldStartDate, v))
}

// LicenseDate applies equality check predicate on the "LicenseDate" field. It's identical to LicenseDateEQ.
func LicenseDate(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldLicenseDate, v))
}

// LicenseNo applies equality check predicate on the "LicenseNo" field. It's identical to LicenseNoEQ.
func LicenseNo(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldLicenseNo, v))
}

// ConstructionArea applies equality check predicate on the "ConstructionArea" field. It's identical to ConstructionAreaEQ.
func ConstructionArea(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldConstructionArea, v))
}

// YDSAddress applies equality check predicate on the "YDSAddress" field. It's identical to YDSAddressEQ.
func YDSAddress(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldYDSAddress, v))
}

// Address applies equality check predicate on the "Address" field. It's identical to AddressEQ.
func Address(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldAddress, v))
}

// BuildingClass applies equality check predicate on the "BuildingClass" field. It's identical to BuildingClassEQ.
func BuildingClass(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldBuildingClass, v))
}

// BuildingType applies equality check predicate on the "BuildingType" field. It's identical to BuildingTypeEQ.
func BuildingType(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldBuildingType, v))
}

// UnitPrice applies equality check predicate on the "UnitPrice" field. It's identical to UnitPriceEQ.
func UnitPrice(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldUnitPrice, v))
}

// LandArea applies equality check predicate on the "LandArea" field. It's identical to LandAreaEQ.
func LandArea(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldLandArea, v))
}

// Floors applies equality check predicate on the "Floors" field. It's identical to FloorsEQ.
func Floors(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldFloors, v))
}

// UsagePurpose applies equality check predicate on the "UsagePurpose" field. It's identical to UsagePurposeEQ.
func UsagePurpose(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldUsagePurpose, v))
}

// Note applies equality check predicate on the "Note" field. It's identical to NoteEQ.
func Note(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldNote, v))
}

// Coordinates applies equality check predicate on the "Coordinates" field. It's identical to CoordinatesEQ.
func Coordinates(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldCoordinates, v))
}

// Started applies equality check predicate on the "Started" field. It's identical to StartedEQ.
func Started(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldStarted, v))
}

// CreatedAt applies equality check predicate on the "CreatedAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// YibfNoEQ applies the EQ predicate on the "YibfNo" field.
func YibfNoEQ(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldYibfNo, v))
}

// YibfNoNEQ applies the NEQ predicate on the "YibfNo" field.
func YibfNoNEQ(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldYibfNo, v))
}

// YibfNoIn applies the In predicate on the "YibfNo" field.
func YibfNoIn(vs ...int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldYibfNo, vs...))
}

// YibfNoNotIn applies the NotIn predicate on the "YibfNo" field.
func YibfNoNotIn(vs ...int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldYibfNo, vs...))
}

// YibfNoGT applies the GT predicate on the "YibfNo" field.
func YibfNoGT(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldYibfNo, v))
}

// YibfNoGTE applies the GTE predicate on the "YibfNo" field.
func YibfNoGTE(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldYibfNo, v))
}

// YibfNoLT applies the LT predicate on the "YibfNo" field.
func YibfNoLT(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldYibfNo, v))
}

// YibfNoLTE applies the LTE predicate on the "YibfNo" field.
func YibfNoLTE(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldYibfNo, v))
}

// IdareEQ applies the EQ predicate on the "Idare" field.
func IdareEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldIdare, v))
}

// IdareNEQ applies the NEQ predicate on the "Idare" field.
func IdareNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldIdare, v))
}

// IdareIn applies the In predicate on the "Idare" field.
func IdareIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldIdare, vs...))
}

// IdareNotIn applies the NotIn predicate on the "Idare" field.
func IdareNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldIdare, vs...))
}

// IdareGT applies the GT predicate on the "Idare" field.
func IdareGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldIdare, v))
}

// IdareGTE applies the GTE predicate on the "Idare" field.
func IdareGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldIdare, v))
}

// IdareLT applies the LT predicate on the "Idare" field.
func IdareLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldIdare, v))
}

// IdareLTE applies the LTE predicate on the "Idare" field.
func IdareLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldIdare, v))
}

// IdareContains applies the Contains predicate on the "Idare" field.
func IdareContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldIdare, v))
}

// IdareHasPrefix applies the HasPrefix predicate on the "Idare" field.
func IdareHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldIdare, v))
}

// IdareHasSuffix applies the HasSuffix predicate on the "Idare" field.
func IdareHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldIdare, v))
}

// IdareIsNil applies the IsNil predicate on the "Idare" field.
func IdareIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldIdare))
}

// IdareNotNil applies the NotNil predicate on the "Idare" field.
func IdareNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldIdare))
}

// IdareEqualFold applies the EqualFold predicate on the "Idare" field.
func IdareEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldIdare, v))
}

// IdareContainsFold applies the ContainsFold predicate on the "Idare" field.
func IdareContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldIdare, v))
}

// PaftaEQ applies the EQ predicate on the "Pafta" field.
func PaftaEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldPafta, v))
}

// PaftaNEQ applies the NEQ predicate on the "Pafta" field.
func PaftaNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldPafta, v))
}

// PaftaIn applies the In predicate on the "Pafta" field.
func PaftaIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldPafta, vs...))
}

// PaftaNotIn applies the NotIn predicate on the "Pafta" field.
func PaftaNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldPafta, vs...))
}

// PaftaGT applies the GT predicate on the "Pafta" field.
func PaftaGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldPafta, v))
}

// PaftaGTE applies the GTE predicate on the "Pafta" field.
func PaftaGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldPafta, v))
}

// PaftaLT applies the LT predicate on the "Pafta" field.
func PaftaLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldPafta, v))
}

// PaftaLTE applies the LTE predicate on the "Pafta" field.
func PaftaLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldPafta, v))
}

// PaftaContains applies the Contains predicate on the "Pafta" field.
func PaftaContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldPafta, v))
}

// PaftaHasPrefix applies the HasPrefix predicate on the "Pafta" field.
func PaftaHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldPafta, v))
}

// PaftaHasSuffix applies the HasSuffix predicate on the "Pafta" field.
func PaftaHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldPafta, v))
}

// PaftaIsNil applies the IsNil predicate on the "Pafta" field.
func PaftaIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldPafta))
}

// PaftaNotNil applies the NotNil predicate on the "Pafta" field.
func PaftaNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldPafta))
}

// PaftaEqualFold applies the EqualFold predicate on the "Pafta" field.
func PaftaEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldPafta, v))
}

// PaftaContainsFold applies the ContainsFold predicate on the "Pafta" field.
func PaftaContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldPafta, v))
}

// AdaEQ applies the EQ predicate on the "Ada" field.
func AdaEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldAda, v))
}

// AdaNEQ applies the NEQ predicate on the "Ada" field.
func AdaNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldAda, v))
}

// AdaIn applies the In predicate on the "Ada" field.
func AdaIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldAda, vs...))
}

// AdaNotIn applies the NotIn predicate on the "Ada" field.
func AdaNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldAda, vs...))
}

// AdaGT applies the GT predicate on the "Ada" field.
func AdaGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldAda, v))
}

// AdaGTE applies the GTE predicate on the "Ada" field.
func AdaGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldAda, v))
}

// AdaLT applies the LT predicate on the "Ada" field.
func AdaLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldAda, v))
}

// AdaLTE applies the LTE predicate on the "Ada" field.
func AdaLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldAda, v))
}

// AdaContains applies the Contains predicate on the "Ada" field.
func AdaContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldAda, v))
}

// AdaHasPrefix applies the HasPrefix predicate on the "Ada" field.
func AdaHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldAda, v))
}

// AdaHasSuffix applies the HasSuffix predicate on the "Ada" field.
func AdaHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldAda, v))
}

// AdaIsNil applies the IsNil predicate on the "Ada" field.
func AdaIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldAda))
}

// AdaNotNil applies the NotNil predicate on the "Ada" field.
func AdaNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldAda))
}

// AdaEqualFold applies the EqualFold predicate on the "Ada" field.
func AdaEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldAda, v))
}

// AdaContainsFold applies the ContainsFold predicate on the "Ada" field.
func AdaContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldAda, v))
}

// ParselEQ applies the EQ predicate on the "Parsel" field.
func ParselEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldParsel, v))
}

// ParselNEQ applies the NEQ predicate on the "Parsel" field.
func ParselNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldParsel, v))
}

// ParselIn applies the In predicate on the "Parsel" field.
func ParselIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldParsel, vs...))
}

// ParselNotIn applies the NotIn predicate on the "Parsel" field.
func ParselNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldParsel, vs...))
}

// ParselGT applies the GT predicate on the "Parsel" field.
func ParselGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldParsel, v))
}

// ParselGTE applies the GTE predicate on the "Parsel" field.
func ParselGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldParsel, v))
}

// ParselLT applies the LT predicate on the "Parsel" field.
func ParselLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldParsel, v))
}

// ParselLTE applies the LTE predicate on the "Parsel" field.
func ParselLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldParsel, v))
}

// ParselContains applies the Contains predicate on the "Parsel" field.
func ParselContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldParsel, v))
}

// ParselHasPrefix applies the HasPrefix predicate on the "Parsel" field.
func ParselHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldParsel, v))
}

// ParselHasSuffix applies the HasSuffix predicate on the "Parsel" field.
func ParselHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldParsel, v))
}

// ParselIsNil applies the IsNil predicate on the "Parsel" field.
func ParselIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldParsel))
}

// ParselNotNil applies the NotNil predicate on the "Parsel" field.
func ParselNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldParsel))
}

// ParselEqualFold applies the EqualFold predicate on the "Parsel" field.
func ParselEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldParsel, v))
}

// ParselContainsFold applies the ContainsFold predicate on the "Parsel" field.
func ParselContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldParsel, v))
}

// FolderNoEQ applies the EQ predicate on the "FolderNo" field.
func FolderNoEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldFolderNo, v))
}

// FolderNoNEQ applies the NEQ predicate on the "FolderNo" field.
func FolderNoNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldFolderNo, v))
}

// FolderNoIn applies the In predicate on the "FolderNo" field.
func FolderNoIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldFolderNo, vs...))
}

// FolderNoNotIn applies the NotIn predicate on the "FolderNo" field.
func FolderNoNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldFolderNo, vs...))
}

// FolderNoGT applies the GT predicate on the "FolderNo" field.
func FolderNoGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldFolderNo, v))
}

// FolderNoGTE applies the GTE predicate on the "FolderNo" field.
func FolderNoGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldFolderNo, v))
}

// FolderNoLT applies the LT predicate on the "FolderNo" field.
func FolderNoLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldFolderNo, v))
}

// FolderNoLTE applies the LTE predicate on the "FolderNo" field.
func FolderNoLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldFolderNo, v))
}

// FolderNoContains applies the Contains predicate on the "FolderNo" field.
func FolderNoContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldFolderNo, v))
}

// FolderNoHasPrefix applies the HasPrefix predicate on the "FolderNo" field.
func FolderNoHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldFolderNo, v))
}

// FolderNoHasSuffix applies the HasSuffix predicate on the "FolderNo" field.
func FolderNoHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldFolderNo, v))
}

// FolderNoIsNil applies the IsNil predicate on the "FolderNo" field.
func FolderNoIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldFolderNo))
}

// FolderNoNotNil applies the NotNil predicate on the "FolderNo" field.
func FolderNoNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldFolderNo))
}

// FolderNoEqualFold applies the EqualFold predicate on the "FolderNo" field.
func FolderNoEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldFolderNo, v))
}

// FolderNoContainsFold applies the ContainsFold predicate on the "FolderNo" field.
func FolderNoContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldFolderNo, v))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "Status" field.
func StatusGT(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "Status" field.
func StatusGTE(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "Status" field.
func StatusLT(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "Status" field.
func StatusLTE(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldStatus, v))
}

// ContractDateEQ applies the EQ predicate on the "ContractDate" field.
func ContractDateEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldContractDate, v))
}

// ContractDateNEQ applies the NEQ predicate on the "ContractDate" field.
func ContractDateNEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldContractDate, v))
}

// ContractDateIn applies the In predicate on the "ContractDate" field.
func ContractDateIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldContractDate, vs...))
}

// ContractDateNotIn applies the NotIn predicate on the "ContractDate" field.
func ContractDateNotIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldContractDate, vs...))
}

// ContractDateGT applies the GT predicate on the "ContractDate" field.
func ContractDateGT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldContractDate, v))
}

// ContractDateGTE applies the GTE predicate on the "ContractDate" field.
func ContractDateGTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldContractDate, v))
}

// ContractDateLT applies the LT predicate on the "ContractDate" field.
func ContractDateLT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldContractDate, v))
}

// ContractDateLTE applies the LTE predicate on the "ContractDate" field.
func ContractDateLTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldContractDate, v))
}

// ContractDateIsNil applies the IsNil predicate on the "ContractDate" field.
func ContractDateIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldContractDate))
}

// ContractDateNotNil applies the NotNil predicate on the "ContractDate" field.
func ContractDateNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldContractDate))
}

// CompletionDateEQ applies the EQ predicate on the "CompletionDate" field.
func CompletionDateEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldCompletionDate, v))
}

// CompletionDateNEQ applies the NEQ predicate on the "CompletionDate" field.
func CompletionDateNEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldCompletionDate, v))
}

// CompletionDateIn applies the In predicate on the "CompletionDate" field.
func CompletionDateIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldCompletionDate, vs...))
}

// CompletionDateNotIn applies the NotIn predicate on the "CompletionDate" field.
func CompletionDateNotIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldCompletionDate, vs...))
}

// CompletionDateGT applies the GT predicate on the "CompletionDate" field.
func CompletionDateGT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldCompletionDate, v))
}

// CompletionDateGTE applies the GTE predicate on the "CompletionDate" field.
func CompletionDateGTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldCompletionDate, v))
}

// CompletionDateLT applies the LT predicate on the "CompletionDate" field.
func CompletionDateLT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldCompletionDate, v))
}

// CompletionDateLTE applies the LTE predicate on the "CompletionDate" field.
func CompletionDateLTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldCompletionDate, v))
}

// CompletionDateIsNil applies the IsNil predicate on the "CompletionDate" field.
func CompletionDateIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldCompletionDate))
}

// CompletionDateNotNil applies the NotNil predicate on the "CompletionDate" field.
func CompletionDateNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldCompletionDate))
}

// StartDateEQ applies the EQ predicate on the "StartDate" field.
func StartDateEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "StartDate" field.
func StartDateNEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "StartDate" field.
func StartDateIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "StartDate" field.
func StartDateNotIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "StartDate" field.
func StartDateGT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "StartDate" field.
func StartDateGTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "StartDate" field.
func StartDateLT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "StartDate" field.
func StartDateLTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldStartDate, v))
}

// StartDateIsNil applies the IsNil predicate on the "StartDate" field.
func StartDateIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldStartDate))
}

// StartDateNotNil applies the NotNil predicate on the "StartDate" field.
func StartDateNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldStartDate))
}

// LicenseDateEQ applies the EQ predicate on the "LicenseDate" field.
func LicenseDateEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldLicenseDate, v))
}

// LicenseDateNEQ applies the NEQ predicate on the "LicenseDate" field.
func LicenseDateNEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldLicenseDate, v))
}

// LicenseDateIn applies the In predicate on the "LicenseDate" field.
func LicenseDateIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldLicenseDate, vs...))
}

// LicenseDateNotIn applies the NotIn predicate on the "LicenseDate" field.
func LicenseDateNotIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldLicenseDate, vs...))
}

// LicenseDateGT applies the GT predicate on the "LicenseDate" field.
func LicenseDateGT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldLicenseDate, v))
}

// LicenseDateGTE applies the GTE predicate on the "LicenseDate" field.
func LicenseDateGTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldLicenseDate, v))
}

// LicenseDateLT applies the LT predicate on the "LicenseDate" field.
func LicenseDateLT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldLicenseDate, v))
}

// LicenseDateLTE applies the LTE predicate on the "LicenseDate" field.
func LicenseDateLTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldLicenseDate, v))
}

// LicenseDateIsNil applies the IsNil predicate on the "LicenseDate" field.
func LicenseDateIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldLicenseDate))
}

// LicenseDateNotNil applies the NotNil predicate on the "LicenseDate" field.
func LicenseDateNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldLicenseDate))
}

// LicenseNoEQ applies the EQ predicate on the "LicenseNo" field.
func LicenseNoEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldLicenseNo, v))
}

// LicenseNoNEQ applies the NEQ predicate on the "LicenseNo" field.
func LicenseNoNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldLicenseNo, v))
}

// LicenseNoIn applies the In predicate on the "LicenseNo" field.
func LicenseNoIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldLicenseNo, vs...))
}

// LicenseNoNotIn applies the NotIn predicate on the "LicenseNo" field.
func LicenseNoNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldLicenseNo, vs...))
}

// LicenseNoGT applies the GT predicate on the "LicenseNo" field.
func LicenseNoGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldLicenseNo, v))
}

// LicenseNoGTE applies the GTE predicate on the "LicenseNo" field.
func LicenseNoGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldLicenseNo, v))
}

// LicenseNoLT applies the LT predicate on the "LicenseNo" field.
func LicenseNoLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldLicenseNo, v))
}

// LicenseNoLTE applies the LTE predicate on the "LicenseNo" field.
func LicenseNoLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldLicenseNo, v))
}

// LicenseNoContains applies the Contains predicate on the "LicenseNo" field.
func LicenseNoContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldLicenseNo, v))
}

// LicenseNoHasPrefix applies the HasPrefix predicate on the "LicenseNo" field.
func LicenseNoHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldLicenseNo, v))
}

// LicenseNoHasSuffix applies the HasSuffix predicate on the "LicenseNo" field.
func LicenseNoHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldLicenseNo, v))
}

// LicenseNoIsNil applies the IsNil predicate on the "LicenseNo" field.
func LicenseNoIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldLicenseNo))
}

// LicenseNoNotNil applies the NotNil predicate on the "LicenseNo" field.
func LicenseNoNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldLicenseNo))
}

// LicenseNoEqualFold applies the EqualFold predicate on the "LicenseNo" field.
func LicenseNoEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldLicenseNo, v))
}

// LicenseNoContainsFold applies the ContainsFold predicate on the "LicenseNo" field.
func LicenseNoContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldLicenseNo, v))
}

// ConstructionAreaEQ applies the EQ predicate on the "ConstructionArea" field.
func ConstructionAreaEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldConstructionArea, v))
}

// ConstructionAreaNEQ applies the NEQ predicate on the "ConstructionArea" field.
func ConstructionAreaNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldConstructionArea, v))
}

// ConstructionAreaIn applies the In predicate on the "ConstructionArea" field.
func ConstructionAreaIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldConstructionArea, vs...))
}

// ConstructionAreaNotIn applies the NotIn predicate on the "ConstructionArea" field.
func ConstructionAreaNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldConstructionArea, vs...))
}

// ConstructionAreaGT applies the GT predicate on the "ConstructionArea" field.
func ConstructionAreaGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldConstructionArea, v))
}

// ConstructionAreaGTE applies the GTE predicate on the "ConstructionArea" field.
func ConstructionAreaGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldConstructionArea, v))
}

// ConstructionAreaLT applies the LT predicate on the "ConstructionArea" field.
func ConstructionAreaLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldConstructionArea, v))
}

// ConstructionAreaLTE applies the LTE predicate on the "ConstructionArea" field.
func ConstructionAreaLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldConstructionArea, v))
}

// ConstructionAreaContains applies the Contains predicate on the "ConstructionArea" field.
func ConstructionAreaContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldConstructionArea, v))
}

// ConstructionAreaHasPrefix applies the HasPrefix predicate on the "ConstructionArea" field.
func ConstructionAreaHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldConstructionArea, v))
}

// ConstructionAreaHasSuffix applies the HasSuffix predicate on the "ConstructionArea" field.
func ConstructionAreaHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldConstructionArea, v))
}

// ConstructionAreaIsNil applies the IsNil predicate on the "ConstructionArea" field.
func ConstructionAreaIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldConstructionArea))
}

// ConstructionAreaNotNil applies the NotNil predicate on the "ConstructionArea" field.
func ConstructionAreaNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldConstructionArea))
}

// ConstructionAreaEqualFold applies the EqualFold predicate on the "ConstructionArea" field.
func ConstructionAreaEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldConstructionArea, v))
}

// ConstructionAreaContainsFold applies the ContainsFold predicate on the "ConstructionArea" field.
func ConstructionAreaContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldConstructionArea, v))
}

// YDSAddressEQ applies the EQ predicate on the "YDSAddress" field.
func YDSAddressEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldYDSAddress, v))
}

// YDSAddressNEQ applies the NEQ predicate on the "YDSAddress" field.
func YDSAddressNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldYDSAddress, v))
}

// YDSAddressIn applies the In predicate on the "YDSAddress" field.
func YDSAddressIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldYDSAddress, vs...))
}

// YDSAddressNotIn applies the NotIn predicate on the "YDSAddress" field.
func YDSAddressNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldYDSAddress, vs...))
}

// YDSAddressGT applies the GT predicate on the "YDSAddress" field.
func YDSAddressGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldYDSAddress, v))
}

// YDSAddressGTE applies the GTE predicate on the "YDSAddress" field.
func YDSAddressGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldYDSAddress, v))
}

// YDSAddressLT applies the LT predicate on the "YDSAddress" field.
func YDSAddressLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldYDSAddress, v))
}

// YDSAddressLTE applies the LTE predicate on the "YDSAddress" field.
func YDSAddressLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldYDSAddress, v))
}

// YDSAddressContains applies the Contains predicate on the "YDSAddress" field.
func YDSAddressContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldYDSAddress, v))
}

// YDSAddressHasPrefix applies the HasPrefix predicate on the "YDSAddress" field.
func YDSAddressHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldYDSAddress, v))
}

// YDSAddressHasSuffix applies the HasSuffix predicate on the "YDSAddress" field.
func YDSAddressHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldYDSAddress, v))
}

// YDSAddressIsNil applies the IsNil predicate on the "YDSAddress" field.
func YDSAddressIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldYDSAddress))
}

// YDSAddressNotNil applies the NotNil predicate on the "YDSAddress" field.
func YDSAddressNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldYDSAddress))
}

// YDSAddressEqualFold applies the EqualFold predicate on the "YDSAddress" field.
func YDSAddressEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldYDSAddress, v))
}

// YDSAddressContainsFold applies the ContainsFold predicate on the "YDSAddress" field.
func YDSAddressContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldYDSAddress, v))
}

// AddressEQ applies the EQ predicate on the "Address" field.
func AddressEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "Address" field.
func AddressNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "Address" field.
func AddressIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "Address" field.
func AddressNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "Address" field.
func AddressGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "Address" field.
func AddressGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "Address" field.
func AddressLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "Address" field.
func AddressLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "Address" field.
func AddressContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "Address" field.
func AddressHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "Address" field.
func AddressHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "Address" field.
func AddressIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "Address" field.
func AddressNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "Address" field.
func AddressEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "Address" field.
func AddressContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldAddress, v))
}

// BuildingClassEQ applies the EQ predicate on the "BuildingClass" field.
func BuildingClassEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldBuildingClass, v))
}

// BuildingClassNEQ applies the NEQ predicate on the "BuildingClass" field.
func BuildingClassNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldBuildingClass, v))
}

// BuildingClassIn applies the In predicate on the "BuildingClass" field.
func BuildingClassIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldBuildingClass, vs...))
}

// BuildingClassNotIn applies the NotIn predicate on the "BuildingClass" field.
func BuildingClassNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldBuildingClass, vs...))
}

// BuildingClassGT applies the GT predicate on the "BuildingClass" field.
func BuildingClassGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldBuildingClass, v))
}

// BuildingClassGTE applies the GTE predicate on the "BuildingClass" field.
func BuildingClassGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldBuildingClass, v))
}

// BuildingClassLT applies the LT predicate on the "BuildingClass" field.
func BuildingClassLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldBuildingClass, v))
}

// BuildingClassLTE applies the LTE predicate on the "BuildingClass" field.
func BuildingClassLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldBuildingClass, v))
}

// BuildingClassContains applies the Contains predicate on the "BuildingClass" field.
func BuildingClassContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldBuildingClass, v))
}

// BuildingClassHasPrefix applies the HasPrefix predicate on the "BuildingClass" field.
func BuildingClassHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldBuildingClass, v))
}

// BuildingClassHasSuffix applies the HasSuffix predicate on the "BuildingClass" field.
func BuildingClassHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldBuildingClass, v))
}

// BuildingClassIsNil applies the IsNil predicate on the "BuildingClass" field.
func BuildingClassIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldBuildingClass))
}

// BuildingClassNotNil applies the NotNil predicate on the "BuildingClass" field.
func BuildingClassNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldBuildingClass))
}

// BuildingClassEqualFold applies the EqualFold predicate on the "BuildingClass" field.
func BuildingClassEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldBuildingClass, v))
}

// BuildingClassContainsFold applies the ContainsFold predicate on the "BuildingClass" field.
func BuildingClassContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldBuildingClass, v))
}

// BuildingTypeEQ applies the EQ predicate on the "BuildingType" field.
func BuildingTypeEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldBuildingType, v))
}

// BuildingTypeNEQ applies the NEQ predicate on the "BuildingType" field.
func BuildingTypeNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldBuildingType, v))
}

// BuildingTypeIn applies the In predicate on the "BuildingType" field.
func BuildingTypeIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldBuildingType, vs...))
}

// BuildingTypeNotIn applies the NotIn predicate on the "BuildingType" field.
func BuildingTypeNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldBuildingType, vs...))
}

// BuildingTypeGT applies the GT predicate on the "BuildingType" field.
func BuildingTypeGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldBuildingType, v))
}

// BuildingTypeGTE applies the GTE predicate on the "BuildingType" field.
func BuildingTypeGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldBuildingType, v))
}

// BuildingTypeLT applies the LT predicate on the "BuildingType" field.
func BuildingTypeLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldBuildingType, v))
}

// BuildingTypeLTE applies the LTE predicate on the "BuildingType" field.
func BuildingTypeLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldBuildingType, v))
}

// BuildingTypeContains applies the Contains predicate on the "BuildingType" field.
func BuildingTypeContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldBuildingType, v))
}

// BuildingTypeHasPrefix applies the HasPrefix predicate on the "BuildingType" field.
func BuildingTypeHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldBuildingType, v))
}

// BuildingTypeHasSuffix applies the HasSuffix predicate on the "BuildingType" field.
func BuildingTypeHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldBuildingType, v))
}

// BuildingTypeIsNil applies the IsNil predicate on the "BuildingType" field.
func BuildingTypeIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldBuildingType))
}

// BuildingTypeNotNil applies the NotNil predicate on the "BuildingType" field.
func BuildingTypeNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldBuildingType))
}

// BuildingTypeEqualFold applies the EqualFold predicate on the "BuildingType" field.
func BuildingTypeEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldBuildingType, v))
}

// BuildingTypeContainsFold applies the ContainsFold predicate on the "BuildingType" field.
func BuildingTypeContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldBuildingType, v))
}

// UnitPriceEQ applies the EQ predicate on the "UnitPrice" field.
func UnitPriceEQ(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldUnitPrice, v))
}

// UnitPriceNEQ applies the NEQ predicate on the "UnitPrice" field.
func UnitPriceNEQ(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldUnitPrice, v))
}

// UnitPriceIn applies the In predicate on the "UnitPrice" field.
func UnitPriceIn(vs ...float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldUnitPrice, vs...))
}

// UnitPriceNotIn applies the NotIn predicate on the "UnitPrice" field.
func UnitPriceNotIn(vs ...float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldUnitPrice, vs...))
}

// UnitPriceGT applies the GT predicate on the "UnitPrice" field.
func UnitPriceGT(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldUnitPrice, v))
}

// UnitPriceGTE applies the GTE predicate on the "UnitPrice" field.
func UnitPriceGTE(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldUnitPrice, v))
}

// UnitPriceLT applies the LT predicate on the "UnitPrice" field.
func UnitPriceLT(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldUnitPrice, v))
}

// UnitPriceLTE applies the LTE predicate on the "UnitPrice" field.
func UnitPriceLTE(v float64) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldUnitPrice, v))
}

// UnitPriceIsNil applies the IsNil predicate on the "UnitPrice" field.
func UnitPriceIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldUnitPrice))
}

// UnitPriceNotNil applies the NotNil predicate on the "UnitPrice" field.
func UnitPriceNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldUnitPrice))
}

// LandAreaEQ applies the EQ predicate on the "LandArea" field.
func LandAreaEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldLandArea, v))
}

// LandAreaNEQ applies the NEQ predicate on the "LandArea" field.
func LandAreaNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldLandArea, v))
}

// LandAreaIn applies the In predicate on the "LandArea" field.
func LandAreaIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldLandArea, vs...))
}

// LandAreaNotIn applies the NotIn predicate on the "LandArea" field.
func LandAreaNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldLandArea, vs...))
}

// LandAreaGT applies the GT predicate on the "LandArea" field.
func LandAreaGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldLandArea, v))
}

// LandAreaGTE applies the GTE predicate on the "LandArea" field.
func LandAreaGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldLandArea, v))
}

// LandAreaLT applies the LT predicate on the "LandArea" field.
func LandAreaLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldLandArea, v))
}

// LandAreaLTE applies the LTE predicate on the "LandArea" field.
func LandAreaLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldLandArea, v))
}

// LandAreaContains applies the Contains predicate on the "LandArea" field.
func LandAreaContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldLandArea, v))
}

// LandAreaHasPrefix applies the HasPrefix predicate on the "LandArea" field.
func LandAreaHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldLandArea, v))
}

// LandAreaHasSuffix applies the HasSuffix predicate on the "LandArea" field.
func LandAreaHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldLandArea, v))
}

// LandAreaIsNil applies the IsNil predicate on the "LandArea" field.
func LandAreaIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldLandArea))
}

// LandAreaNotNil applies the NotNil predicate on the "LandArea" field.
func LandAreaNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldLandArea))
}

// LandAreaEqualFold applies the EqualFold predicate on the "LandArea" field.
func LandAreaEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldLandArea, v))
}

// LandAreaContainsFold applies the ContainsFold predicate on the "LandArea" field.
func LandAreaContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldLandArea, v))
}

// FloorsEQ applies the EQ predicate on the "Floors" field.
func FloorsEQ(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldFloors, v))
}

// FloorsNEQ applies the NEQ predicate on the "Floors" field.
func FloorsNEQ(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldFloors, v))
}

// FloorsIn applies the In predicate on the "Floors" field.
func FloorsIn(vs ...int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldFloors, vs...))
}

// FloorsNotIn applies the NotIn predicate on the "Floors" field.
func FloorsNotIn(vs ...int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldFloors, vs...))
}

// FloorsGT applies the GT predicate on the "Floors" field.
func FloorsGT(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldFloors, v))
}

// FloorsGTE applies the GTE predicate on the "Floors" field.
func FloorsGTE(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldFloors, v))
}

// FloorsLT applies the LT predicate on the "Floors" field.
func FloorsLT(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldFloors, v))
}

// FloorsLTE applies the LTE predicate on the "Floors" field.
func FloorsLTE(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldFloors, v))
}

// FloorsIsNil applies the IsNil predicate on the "Floors" field.
func FloorsIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldFloors))
}

// FloorsNotNil applies the NotNil predicate on the "Floors" field.
func FloorsNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldFloors))
}

// UsagePurposeEQ applies the EQ predicate on the "UsagePurpose" field.
func UsagePurposeEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldUsagePurpose, v))
}

// UsagePurposeNEQ applies the NEQ predicate on the "UsagePurpose" field.
func UsagePurposeNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldUsagePurpose, v))
}

// UsagePurposeIn applies the In predicate on the "UsagePurpose" field.
func UsagePurposeIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldUsagePurpose, vs...))
}

// UsagePurposeNotIn applies the NotIn predicate on the "UsagePurpose" field.
func UsagePurposeNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldUsagePurpose, vs...))
}

// UsagePurposeGT applies the GT predicate on the "UsagePurpose" field.
func UsagePurposeGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldUsagePurpose, v))
}

// UsagePurposeGTE applies the GTE predicate on the "UsagePurpose" field.
func UsagePurposeGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldUsagePurpose, v))
}

// UsagePurposeLT applies the LT predicate on the "UsagePurpose" field.
func UsagePurposeLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldUsagePurpose, v))
}

// UsagePurposeLTE applies the LTE predicate on the "UsagePurpose" field.
func UsagePurposeLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldUsagePurpose, v))
}

// UsagePurposeContains applies the Contains predicate on the "UsagePurpose" field.
func UsagePurposeContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldUsagePurpose, v))
}

// UsagePurposeHasPrefix applies the HasPrefix predicate on the "UsagePurpose" field.
func UsagePurposeHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldUsagePurpose, v))
}

// UsagePurposeHasSuffix applies the HasSuffix predicate on the "UsagePurpose" field.
func UsagePurposeHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldUsagePurpose, v))
}

// UsagePurposeIsNil applies the IsNil predicate on the "UsagePurpose" field.
func UsagePurposeIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldUsagePurpose))
}

// UsagePurposeNotNil applies the NotNil predicate on the "UsagePurpose" field.
func UsagePurposeNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldUsagePurpose))
}

// UsagePurposeEqualFold applies the EqualFold predicate on the "UsagePurpose" field.
func UsagePurposeEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldUsagePurpose, v))
}

// UsagePurposeContainsFold applies the ContainsFold predicate on the "UsagePurpose" field.
func UsagePurposeContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldUsagePurpose, v))
}

// NoteEQ applies the EQ predicate on the "Note" field.
func NoteEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldNote, v))
}

// NoteNEQ applies the NEQ predicate on the "Note" field.
func NoteNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldNote, v))
}

// NoteIn applies the In predicate on the "Note" field.
func NoteIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldNote, vs...))
}

// NoteNotIn applies the NotIn predicate on the "Note" field.
func NoteNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldNote, vs...))
}

// NoteGT applies the GT predicate on the "Note" field.
func NoteGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldNote, v))
}

// NoteGTE applies the GTE predicate on the "Note" field.
func NoteGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldNote, v))
}

// NoteLT applies the LT predicate on the "Note" field.
func NoteLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldNote, v))
}

// NoteLTE applies the LTE predicate on the "Note" field.
func NoteLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldNote, v))
}

// NoteContains applies the Contains predicate on the "Note" field.
func NoteContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldNote, v))
}

// NoteHasPrefix applies the HasPrefix predicate on the "Note" field.
func NoteHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldNote, v))
}

// NoteHasSuffix applies the HasSuffix predicate on the "Note" field.
func NoteHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldNote, v))
}

// NoteIsNil applies the IsNil predicate on the "Note" field.
func NoteIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldNote))
}

// NoteNotNil applies the NotNil predicate on the "Note" field.
func NoteNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldNote))
}

// NoteEqualFold applies the EqualFold predicate on the "Note" field.
func NoteEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldNote, v))
}

// NoteContainsFold applies the ContainsFold predicate on the "Note" field.
func NoteContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldNote, v))
}

// CoordinatesEQ applies the EQ predicate on the "Coordinates" field.
func CoordinatesEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldCoordinates, v))
}

// CoordinatesNEQ applies the NEQ predicate on the "Coordinates" field.
func CoordinatesNEQ(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldCoordinates, v))
}

// CoordinatesIn applies the In predicate on the "Coordinates" field.
func CoordinatesIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldCoordinates, vs...))
}

// CoordinatesNotIn applies the NotIn predicate on the "Coordinates" field.
func CoordinatesNotIn(vs ...string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldCoordinates, vs...))
}

// CoordinatesGT applies the GT predicate on the "Coordinates" field.
func CoordinatesGT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldCoordinates, v))
}

// CoordinatesGTE applies the GTE predicate on the "Coordinates" field.
func CoordinatesGTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldCoordinates, v))
}

// CoordinatesLT applies the LT predicate on the "Coordinates" field.
func CoordinatesLT(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldCoordinates, v))
}

// CoordinatesLTE applies the LTE predicate on the "Coordinates" field.
func CoordinatesLTE(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldCoordinates, v))
}

// CoordinatesContains applies the Contains predicate on the "Coordinates" field.
func CoordinatesContains(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContains(FieldCoordinates, v))
}

// CoordinatesHasPrefix applies the HasPrefix predicate on the "Coordinates" field.
func CoordinatesHasPrefix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasPrefix(FieldCoordinates, v))
}

// CoordinatesHasSuffix applies the HasSuffix predicate on the "Coordinates" field.
func CoordinatesHasSuffix(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldHasSuffix(FieldCoordinates, v))
}

// CoordinatesIsNil applies the IsNil predicate on the "Coordinates" field.
func CoordinatesIsNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIsNull(FieldCoordinates))
}

// CoordinatesNotNil applies the NotNil predicate on the "Coordinates" field.
func CoordinatesNotNil() predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotNull(FieldCoordinates))
}

// CoordinatesEqualFold applies the EqualFold predicate on the "Coordinates" field.
func CoordinatesEqualFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEqualFold(FieldCoordinates, v))
}

// CoordinatesContainsFold applies the ContainsFold predicate on the "Coordinates" field.
func CoordinatesContainsFold(v string) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldContainsFold(FieldCoordinates, v))
}

// StartedEQ applies the EQ predicate on the "Started" field.
func StartedEQ(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldStarted, v))
}

// StartedNEQ applies the NEQ predicate on the "Started" field.
func StartedNEQ(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldStarted, v))
}

// StartedIn applies the In predicate on the "Started" field.
func StartedIn(vs ...int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldStarted, vs...))
}

// StartedNotIn applies the NotIn predicate on the "Started" field.
func StartedNotIn(vs ...int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldStarted, vs...))
}

// StartedGT applies the GT predicate on the "Started" field.
func StartedGT(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldStarted, v))
}

// StartedGTE applies the GTE predicate on the "Started" field.
func StartedGTE(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldStarted, v))
}

// StartedLT applies the LT predicate on the "Started" field.
func StartedLT(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldStarted, v))
}

// StartedLTE applies the LTE predicate on the "Started" field.
func StartedLTE(v int) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldStarted, v))
}

// CreatedAtEQ applies the EQ predicate on the "CreatedAt" field.
func CreatedAtEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "CreatedAt" field.
func CreatedAtNEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "CreatedAt" field.
func CreatedAtIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "CreatedAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "CreatedAt" field.
func CreatedAtGT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "CreatedAt" field.
func CreatedAtGTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "CreatedAt" field.
func CreatedAtLT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "CreatedAt" field.
func CreatedAtLTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.JobDetail {
	return predicate.JobDetail(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasCompany applies the HasEdge predicate on the "company" edge.
func HasCompany() predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyWith applies the HasEdge predicate on the "company" edge with a given conditions (other predicates).
func HasCompanyWith(preds ...predicate.CompanyDetail) predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := newCompanyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.JobOwner) predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContractor applies the HasEdge predicate on the "contractor" edge.
func HasContractor() predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ContractorTable, ContractorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContractorWith applies the HasEdge predicate on the "contractor" edge with a given conditions (other predicates).
func HasContractorWith(preds ...predicate.JobContractor) predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := newContractorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAuthor applies the HasEdge predicate on the "author" edge.
func HasAuthor() predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorWith applies the HasEdge predicate on the "author" edge with a given conditions (other predicates).
func HasAuthorWith(preds ...predicate.JobAuthor) predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := newAuthorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProgress applies the HasEdge predicate on the "progress" edge.
func HasProgress() predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProgressTable, ProgressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgressWith applies the HasEdge predicate on the "progress" edge with a given conditions (other predicates).
func HasProgressWith(preds ...predicate.JobProgress) predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := newProgressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSupervisor applies the HasEdge predicate on the "supervisor" edge.
func HasSupervisor() predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SupervisorTable, SupervisorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSupervisorWith applies the HasEdge predicate on the "supervisor" edge with a given conditions (other predicates).
func HasSupervisorWith(preds ...predicate.JobSuperVisor) predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := newSupervisorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInspector applies the HasEdge predicate on the "inspector" edge.
func HasInspector() predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InspectorTable, InspectorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInspectorWith applies the HasEdge predicate on the "inspector" edge with a given conditions (other predicates).
func HasInspectorWith(preds ...predicate.CompanyEngineer) predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := newInspectorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasArchitect applies the HasEdge predicate on the "architect" edge.
func HasArchitect() predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ArchitectTable, ArchitectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArchitectWith applies the HasEdge predicate on the "architect" edge with a given conditions (other predicates).
func HasArchitectWith(preds ...predicate.CompanyEngineer) predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := newArchitectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatic applies the HasEdge predicate on the "static" edge.
func HasStatic() predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StaticTable, StaticColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStaticWith applies the HasEdge predicate on the "static" edge with a given conditions (other predicates).
func HasStaticWith(preds ...predicate.CompanyEngineer) predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := newStaticStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMechanic applies the HasEdge predicate on the "mechanic" edge.
func HasMechanic() predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MechanicTable, MechanicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMechanicWith applies the HasEdge predicate on the "mechanic" edge with a given conditions (other predicates).
func HasMechanicWith(preds ...predicate.CompanyEngineer) predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := newMechanicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasElectric applies the HasEdge predicate on the "electric" edge.
func HasElectric() predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ElectricTable, ElectricColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasElectricWith applies the HasEdge predicate on the "electric" edge with a given conditions (other predicates).
func HasElectricWith(preds ...predicate.CompanyEngineer) predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := newElectricStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasController applies the HasEdge predicate on the "controller" edge.
func HasController() predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ControllerTable, ControllerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasControllerWith applies the HasEdge predicate on the "controller" edge with a given conditions (other predicates).
func HasControllerWith(preds ...predicate.CompanyEngineer) predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := newControllerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMechaniccontroller applies the HasEdge predicate on the "mechaniccontroller" edge.
func HasMechaniccontroller() predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MechaniccontrollerTable, MechaniccontrollerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMechaniccontrollerWith applies the HasEdge predicate on the "mechaniccontroller" edge with a given conditions (other predicates).
func HasMechaniccontrollerWith(preds ...predicate.CompanyEngineer) predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := newMechaniccontrollerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasElectriccontroller applies the HasEdge predicate on the "electriccontroller" edge.
func HasElectriccontroller() predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ElectriccontrollerTable, ElectriccontrollerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasElectriccontrollerWith applies the HasEdge predicate on the "electriccontroller" edge with a given conditions (other predicates).
func HasElectriccontrollerWith(preds ...predicate.CompanyEngineer) predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := newElectriccontrollerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLayers applies the HasEdge predicate on the "layers" edge.
func HasLayers() predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LayersTable, LayersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLayersWith applies the HasEdge predicate on the "layers" edge with a given conditions (other predicates).
func HasLayersWith(preds ...predicate.JobLayer) predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := newLayersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPayments applies the HasEdge predicate on the "payments" edge.
func HasPayments() predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PaymentsTable, PaymentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentsWith applies the HasEdge predicate on the "payments" edge with a given conditions (other predicates).
func HasPaymentsWith(preds ...predicate.JobPayments) predicate.JobDetail {
	return predicate.JobDetail(func(s *sql.Selector) {
		step := newPaymentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JobDetail) predicate.JobDetail {
	return predicate.JobDetail(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JobDetail) predicate.JobDetail {
	return predicate.JobDetail(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JobDetail) predicate.JobDetail {
	return predicate.JobDetail(sql.NotPredicates(p))
}
