// Code generated by ent, DO NOT EDIT.

package jobdetail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the jobdetail type in the database.
	Label = "job_detail"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldYibfNo holds the string denoting the yibfno field in the database.
	FieldYibfNo = "yibf_no"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldAdministration holds the string denoting the administration field in the database.
	FieldAdministration = "administration"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldIsland holds the string denoting the island field in the database.
	FieldIsland = "island"
	// FieldParcel holds the string denoting the parcel field in the database.
	FieldParcel = "parcel"
	// FieldSheet holds the string denoting the sheet field in the database.
	FieldSheet = "sheet"
	// FieldContractDate holds the string denoting the contractdate field in the database.
	FieldContractDate = "contract_date"
	// FieldStartDate holds the string denoting the startdate field in the database.
	FieldStartDate = "start_date"
	// FieldLicenseDate holds the string denoting the licensedate field in the database.
	FieldLicenseDate = "license_date"
	// FieldLicenseNo holds the string denoting the licenseno field in the database.
	FieldLicenseNo = "license_no"
	// FieldCompletionDate holds the string denoting the completiondate field in the database.
	FieldCompletionDate = "completion_date"
	// FieldLandArea holds the string denoting the landarea field in the database.
	FieldLandArea = "land_area"
	// FieldTotalArea holds the string denoting the totalarea field in the database.
	FieldTotalArea = "total_area"
	// FieldConstructionArea holds the string denoting the constructionarea field in the database.
	FieldConstructionArea = "construction_area"
	// FieldLeftArea holds the string denoting the leftarea field in the database.
	FieldLeftArea = "left_area"
	// FieldYDSAddress holds the string denoting the ydsaddress field in the database.
	FieldYDSAddress = "yds_address"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldBuildingClass holds the string denoting the buildingclass field in the database.
	FieldBuildingClass = "building_class"
	// FieldBuildingType holds the string denoting the buildingtype field in the database.
	FieldBuildingType = "building_type"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldUnitPrice holds the string denoting the unitprice field in the database.
	FieldUnitPrice = "unit_price"
	// FieldFloorCount holds the string denoting the floorcount field in the database.
	FieldFloorCount = "floor_count"
	// FieldBKSReferenceNo holds the string denoting the bksreferenceno field in the database.
	FieldBKSReferenceNo = "bks_reference_no"
	// FieldCoordinates holds the string denoting the coordinates field in the database.
	FieldCoordinates = "coordinates"
	// FieldFolderNo holds the string denoting the folderno field in the database.
	FieldFolderNo = "folder_no"
	// FieldUploadedFile holds the string denoting the uploadedfile field in the database.
	FieldUploadedFile = "uploaded_file"
	// FieldIndustryArea holds the string denoting the industryarea field in the database.
	FieldIndustryArea = "industry_area"
	// FieldClusterStructure holds the string denoting the clusterstructure field in the database.
	FieldClusterStructure = "cluster_structure"
	// FieldIsLicenseExpired holds the string denoting the islicenseexpired field in the database.
	FieldIsLicenseExpired = "is_license_expired"
	// FieldIsCompleted holds the string denoting the iscompleted field in the database.
	FieldIsCompleted = "is_completed"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeContractor holds the string denoting the contractor edge name in mutations.
	EdgeContractor = "contractor"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// EdgeProgress holds the string denoting the progress edge name in mutations.
	EdgeProgress = "progress"
	// EdgeSupervisor holds the string denoting the supervisor edge name in mutations.
	EdgeSupervisor = "supervisor"
	// EdgeInspector holds the string denoting the inspector edge name in mutations.
	EdgeInspector = "inspector"
	// EdgeArchitect holds the string denoting the architect edge name in mutations.
	EdgeArchitect = "architect"
	// EdgeStatic holds the string denoting the static edge name in mutations.
	EdgeStatic = "static"
	// EdgeMechanic holds the string denoting the mechanic edge name in mutations.
	EdgeMechanic = "mechanic"
	// EdgeElectric holds the string denoting the electric edge name in mutations.
	EdgeElectric = "electric"
	// EdgeController holds the string denoting the controller edge name in mutations.
	EdgeController = "controller"
	// EdgeMechaniccontroller holds the string denoting the mechaniccontroller edge name in mutations.
	EdgeMechaniccontroller = "mechaniccontroller"
	// EdgeElectriccontroller holds the string denoting the electriccontroller edge name in mutations.
	EdgeElectriccontroller = "electriccontroller"
	// EdgeLayers holds the string denoting the layers edge name in mutations.
	EdgeLayers = "layers"
	// EdgePayments holds the string denoting the payments edge name in mutations.
	EdgePayments = "payments"
	// Table holds the table name of the jobdetail in the database.
	Table = "job_details"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "job_details"
	// CompanyInverseTable is the table name for the CompanyDetail entity.
	// It exists in this package in order to avoid circular dependency with the "companydetail" package.
	CompanyInverseTable = "company_details"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_id"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "job_details"
	// OwnerInverseTable is the table name for the JobOwner entity.
	// It exists in this package in order to avoid circular dependency with the "jobowner" package.
	OwnerInverseTable = "job_owners"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// ContractorTable is the table that holds the contractor relation/edge.
	ContractorTable = "job_details"
	// ContractorInverseTable is the table name for the JobContractor entity.
	// It exists in this package in order to avoid circular dependency with the "jobcontractor" package.
	ContractorInverseTable = "job_contractors"
	// ContractorColumn is the table column denoting the contractor relation/edge.
	ContractorColumn = "contractor_id"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "job_details"
	// AuthorInverseTable is the table name for the JobAuthor entity.
	// It exists in this package in order to avoid circular dependency with the "jobauthor" package.
	AuthorInverseTable = "job_authors"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "author_id"
	// ProgressTable is the table that holds the progress relation/edge.
	ProgressTable = "job_details"
	// ProgressInverseTable is the table name for the JobProgress entity.
	// It exists in this package in order to avoid circular dependency with the "jobprogress" package.
	ProgressInverseTable = "job_progresses"
	// ProgressColumn is the table column denoting the progress relation/edge.
	ProgressColumn = "progress_id"
	// SupervisorTable is the table that holds the supervisor relation/edge.
	SupervisorTable = "job_details"
	// SupervisorInverseTable is the table name for the JobSupervisor entity.
	// It exists in this package in order to avoid circular dependency with the "jobsupervisor" package.
	SupervisorInverseTable = "job_supervisors"
	// SupervisorColumn is the table column denoting the supervisor relation/edge.
	SupervisorColumn = "supervisor_id"
	// InspectorTable is the table that holds the inspector relation/edge.
	InspectorTable = "job_details"
	// InspectorInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	InspectorInverseTable = "company_engineers"
	// InspectorColumn is the table column denoting the inspector relation/edge.
	InspectorColumn = "inspector_id"
	// ArchitectTable is the table that holds the architect relation/edge.
	ArchitectTable = "job_details"
	// ArchitectInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	ArchitectInverseTable = "company_engineers"
	// ArchitectColumn is the table column denoting the architect relation/edge.
	ArchitectColumn = "architect_id"
	// StaticTable is the table that holds the static relation/edge.
	StaticTable = "job_details"
	// StaticInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	StaticInverseTable = "company_engineers"
	// StaticColumn is the table column denoting the static relation/edge.
	StaticColumn = "static_id"
	// MechanicTable is the table that holds the mechanic relation/edge.
	MechanicTable = "job_details"
	// MechanicInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	MechanicInverseTable = "company_engineers"
	// MechanicColumn is the table column denoting the mechanic relation/edge.
	MechanicColumn = "mechanic_id"
	// ElectricTable is the table that holds the electric relation/edge.
	ElectricTable = "job_details"
	// ElectricInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	ElectricInverseTable = "company_engineers"
	// ElectricColumn is the table column denoting the electric relation/edge.
	ElectricColumn = "electric_id"
	// ControllerTable is the table that holds the controller relation/edge.
	ControllerTable = "job_details"
	// ControllerInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	ControllerInverseTable = "company_engineers"
	// ControllerColumn is the table column denoting the controller relation/edge.
	ControllerColumn = "controller_id"
	// MechaniccontrollerTable is the table that holds the mechaniccontroller relation/edge.
	MechaniccontrollerTable = "job_details"
	// MechaniccontrollerInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	MechaniccontrollerInverseTable = "company_engineers"
	// MechaniccontrollerColumn is the table column denoting the mechaniccontroller relation/edge.
	MechaniccontrollerColumn = "mechaniccontroller_id"
	// ElectriccontrollerTable is the table that holds the electriccontroller relation/edge.
	ElectriccontrollerTable = "job_details"
	// ElectriccontrollerInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	ElectriccontrollerInverseTable = "company_engineers"
	// ElectriccontrollerColumn is the table column denoting the electriccontroller relation/edge.
	ElectriccontrollerColumn = "electriccontroller_id"
	// LayersTable is the table that holds the layers relation/edge.
	LayersTable = "job_layers"
	// LayersInverseTable is the table name for the JobLayer entity.
	// It exists in this package in order to avoid circular dependency with the "joblayer" package.
	LayersInverseTable = "job_layers"
	// LayersColumn is the table column denoting the layers relation/edge.
	LayersColumn = "job_id"
	// PaymentsTable is the table that holds the payments relation/edge.
	PaymentsTable = "job_payments"
	// PaymentsInverseTable is the table name for the JobPayments entity.
	// It exists in this package in order to avoid circular dependency with the "jobpayments" package.
	PaymentsInverseTable = "job_payments"
	// PaymentsColumn is the table column denoting the payments relation/edge.
	PaymentsColumn = "payments_id"
)

// Columns holds all SQL columns for jobdetail fields.
var Columns = []string{
	FieldID,
	FieldYibfNo,
	FieldTitle,
	FieldAdministration,
	FieldState,
	FieldIsland,
	FieldParcel,
	FieldSheet,
	FieldContractDate,
	FieldStartDate,
	FieldLicenseDate,
	FieldLicenseNo,
	FieldCompletionDate,
	FieldLandArea,
	FieldTotalArea,
	FieldConstructionArea,
	FieldLeftArea,
	FieldYDSAddress,
	FieldAddress,
	FieldBuildingClass,
	FieldBuildingType,
	FieldLevel,
	FieldUnitPrice,
	FieldFloorCount,
	FieldBKSReferenceNo,
	FieldCoordinates,
	FieldFolderNo,
	FieldUploadedFile,
	FieldIndustryArea,
	FieldClusterStructure,
	FieldIsLicenseExpired,
	FieldIsCompleted,
	FieldNote,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "job_details"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"company_id",
	"inspector_id",
	"architect_id",
	"static_id",
	"mechanic_id",
	"electric_id",
	"controller_id",
	"mechaniccontroller_id",
	"electriccontroller_id",
	"author_id",
	"contractor_id",
	"owner_id",
	"progress_id",
	"supervisor_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUploadedFile holds the default value on creation for the "UploadedFile" field.
	DefaultUploadedFile bool
	// DefaultIndustryArea holds the default value on creation for the "IndustryArea" field.
	DefaultIndustryArea bool
	// DefaultClusterStructure holds the default value on creation for the "ClusterStructure" field.
	DefaultClusterStructure bool
	// DefaultIsLicenseExpired holds the default value on creation for the "IsLicenseExpired" field.
	DefaultIsLicenseExpired bool
	// DefaultIsCompleted holds the default value on creation for the "IsCompleted" field.
	DefaultIsCompleted bool
	// DefaultCreatedAt holds the default value on creation for the "CreatedAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "UpdatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "UpdatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the JobDetail queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByYibfNo orders the results by the YibfNo field.
func ByYibfNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYibfNo, opts...).ToFunc()
}

// ByTitle orders the results by the Title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByAdministration orders the results by the Administration field.
func ByAdministration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdministration, opts...).ToFunc()
}

// ByState orders the results by the State field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByIsland orders the results by the Island field.
func ByIsland(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsland, opts...).ToFunc()
}

// ByParcel orders the results by the Parcel field.
func ByParcel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParcel, opts...).ToFunc()
}

// BySheet orders the results by the Sheet field.
func BySheet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSheet, opts...).ToFunc()
}

// ByContractDate orders the results by the ContractDate field.
func ByContractDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractDate, opts...).ToFunc()
}

// ByStartDate orders the results by the StartDate field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByLicenseDate orders the results by the LicenseDate field.
func ByLicenseDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicenseDate, opts...).ToFunc()
}

// ByLicenseNo orders the results by the LicenseNo field.
func ByLicenseNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicenseNo, opts...).ToFunc()
}

// ByCompletionDate orders the results by the CompletionDate field.
func ByCompletionDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletionDate, opts...).ToFunc()
}

// ByLandArea orders the results by the LandArea field.
func ByLandArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLandArea, opts...).ToFunc()
}

// ByTotalArea orders the results by the TotalArea field.
func ByTotalArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalArea, opts...).ToFunc()
}

// ByConstructionArea orders the results by the ConstructionArea field.
func ByConstructionArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConstructionArea, opts...).ToFunc()
}

// ByLeftArea orders the results by the LeftArea field.
func ByLeftArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLeftArea, opts...).ToFunc()
}

// ByYDSAddress orders the results by the YDSAddress field.
func ByYDSAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYDSAddress, opts...).ToFunc()
}

// ByAddress orders the results by the Address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByBuildingClass orders the results by the BuildingClass field.
func ByBuildingClass(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuildingClass, opts...).ToFunc()
}

// ByBuildingType orders the results by the BuildingType field.
func ByBuildingType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuildingType, opts...).ToFunc()
}

// ByLevel orders the results by the Level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByUnitPrice orders the results by the UnitPrice field.
func ByUnitPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnitPrice, opts...).ToFunc()
}

// ByFloorCount orders the results by the FloorCount field.
func ByFloorCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFloorCount, opts...).ToFunc()
}

// ByBKSReferenceNo orders the results by the BKSReferenceNo field.
func ByBKSReferenceNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBKSReferenceNo, opts...).ToFunc()
}

// ByCoordinates orders the results by the Coordinates field.
func ByCoordinates(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoordinates, opts...).ToFunc()
}

// ByFolderNo orders the results by the FolderNo field.
func ByFolderNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFolderNo, opts...).ToFunc()
}

// ByUploadedFile orders the results by the UploadedFile field.
func ByUploadedFile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploadedFile, opts...).ToFunc()
}

// ByIndustryArea orders the results by the IndustryArea field.
func ByIndustryArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndustryArea, opts...).ToFunc()
}

// ByClusterStructure orders the results by the ClusterStructure field.
func ByClusterStructure(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClusterStructure, opts...).ToFunc()
}

// ByIsLicenseExpired orders the results by the IsLicenseExpired field.
func ByIsLicenseExpired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsLicenseExpired, opts...).ToFunc()
}

// ByIsCompleted orders the results by the IsCompleted field.
func ByIsCompleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCompleted, opts...).ToFunc()
}

// ByNote orders the results by the Note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCompanyField orders the results by company field.
func ByCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyStep(), sql.OrderByField(field, opts...))
	}
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByContractorField orders the results by contractor field.
func ByContractorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContractorStep(), sql.OrderByField(field, opts...))
	}
}

// ByAuthorField orders the results by author field.
func ByAuthorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorStep(), sql.OrderByField(field, opts...))
	}
}

// ByProgressField orders the results by progress field.
func ByProgressField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgressStep(), sql.OrderByField(field, opts...))
	}
}

// BySupervisorField orders the results by supervisor field.
func BySupervisorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSupervisorStep(), sql.OrderByField(field, opts...))
	}
}

// ByInspectorField orders the results by inspector field.
func ByInspectorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInspectorStep(), sql.OrderByField(field, opts...))
	}
}

// ByArchitectField orders the results by architect field.
func ByArchitectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArchitectStep(), sql.OrderByField(field, opts...))
	}
}

// ByStaticField orders the results by static field.
func ByStaticField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStaticStep(), sql.OrderByField(field, opts...))
	}
}

// ByMechanicField orders the results by mechanic field.
func ByMechanicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMechanicStep(), sql.OrderByField(field, opts...))
	}
}

// ByElectricField orders the results by electric field.
func ByElectricField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newElectricStep(), sql.OrderByField(field, opts...))
	}
}

// ByControllerField orders the results by controller field.
func ByControllerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControllerStep(), sql.OrderByField(field, opts...))
	}
}

// ByMechaniccontrollerField orders the results by mechaniccontroller field.
func ByMechaniccontrollerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMechaniccontrollerStep(), sql.OrderByField(field, opts...))
	}
}

// ByElectriccontrollerField orders the results by electriccontroller field.
func ByElectriccontrollerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newElectriccontrollerStep(), sql.OrderByField(field, opts...))
	}
}

// ByLayersCount orders the results by layers count.
func ByLayersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLayersStep(), opts...)
	}
}

// ByLayers orders the results by layers terms.
func ByLayers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLayersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPaymentsCount orders the results by payments count.
func ByPaymentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPaymentsStep(), opts...)
	}
}

// ByPayments orders the results by payments terms.
func ByPayments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
	)
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newContractorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContractorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ContractorTable, ContractorColumn),
	)
}
func newAuthorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
	)
}
func newProgressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProgressTable, ProgressColumn),
	)
}
func newSupervisorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SupervisorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SupervisorTable, SupervisorColumn),
	)
}
func newInspectorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InspectorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InspectorTable, InspectorColumn),
	)
}
func newArchitectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArchitectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ArchitectTable, ArchitectColumn),
	)
}
func newStaticStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StaticInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StaticTable, StaticColumn),
	)
}
func newMechanicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MechanicInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MechanicTable, MechanicColumn),
	)
}
func newElectricStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ElectricInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ElectricTable, ElectricColumn),
	)
}
func newControllerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControllerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ControllerTable, ControllerColumn),
	)
}
func newMechaniccontrollerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MechaniccontrollerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MechaniccontrollerTable, MechaniccontrollerColumn),
	)
}
func newElectriccontrollerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ElectriccontrollerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ElectriccontrollerTable, ElectriccontrollerColumn),
	)
}
func newLayersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LayersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LayersTable, LayersColumn),
	)
}
func newPaymentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PaymentsTable, PaymentsColumn),
	)
}
