// Code generated by ent, DO NOT EDIT.

package jobdetail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the jobdetail type in the database.
	Label = "job_detail"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldYibfNo holds the string denoting the yibfno field in the database.
	FieldYibfNo = "yibf_no"
	// FieldProvince holds the string denoting the province field in the database.
	FieldProvince = "province"
	// FieldIdare holds the string denoting the idare field in the database.
	FieldIdare = "idare"
	// FieldPafta holds the string denoting the pafta field in the database.
	FieldPafta = "pafta"
	// FieldAda holds the string denoting the ada field in the database.
	FieldAda = "ada"
	// FieldParsel holds the string denoting the parsel field in the database.
	FieldParsel = "parsel"
	// FieldFolderNo holds the string denoting the folderno field in the database.
	FieldFolderNo = "folder_no"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldContractDate holds the string denoting the contractdate field in the database.
	FieldContractDate = "contract_date"
	// FieldStartDate holds the string denoting the startdate field in the database.
	FieldStartDate = "start_date"
	// FieldLicenseDate holds the string denoting the licensedate field in the database.
	FieldLicenseDate = "license_date"
	// FieldLicenseNo holds the string denoting the licenseno field in the database.
	FieldLicenseNo = "license_no"
	// FieldConstructionArea holds the string denoting the constructionarea field in the database.
	FieldConstructionArea = "construction_area"
	// FieldDistrict holds the string denoting the district field in the database.
	FieldDistrict = "district"
	// FieldVillage holds the string denoting the village field in the database.
	FieldVillage = "village"
	// FieldStreet holds the string denoting the street field in the database.
	FieldStreet = "street"
	// FieldBuildingClass holds the string denoting the buildingclass field in the database.
	FieldBuildingClass = "building_class"
	// FieldBuildingType holds the string denoting the buildingtype field in the database.
	FieldBuildingType = "building_type"
	// FieldBuildingBlock holds the string denoting the buildingblock field in the database.
	FieldBuildingBlock = "building_block"
	// FieldLandArea holds the string denoting the landarea field in the database.
	FieldLandArea = "land_area"
	// FieldFloors holds the string denoting the floors field in the database.
	FieldFloors = "floors"
	// FieldUsagePurpose holds the string denoting the usagepurpose field in the database.
	FieldUsagePurpose = "usage_purpose"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldStarted holds the string denoting the started field in the database.
	FieldStarted = "started"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeContractor holds the string denoting the contractor edge name in mutations.
	EdgeContractor = "contractor"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// EdgeProgress holds the string denoting the progress edge name in mutations.
	EdgeProgress = "progress"
	// EdgeInspector holds the string denoting the inspector edge name in mutations.
	EdgeInspector = "inspector"
	// EdgeArchitect holds the string denoting the architect edge name in mutations.
	EdgeArchitect = "architect"
	// EdgeStatic holds the string denoting the static edge name in mutations.
	EdgeStatic = "static"
	// EdgeMechanic holds the string denoting the mechanic edge name in mutations.
	EdgeMechanic = "mechanic"
	// EdgeElectric holds the string denoting the electric edge name in mutations.
	EdgeElectric = "electric"
	// EdgeController holds the string denoting the controller edge name in mutations.
	EdgeController = "controller"
	// EdgeMechaniccontroller holds the string denoting the mechaniccontroller edge name in mutations.
	EdgeMechaniccontroller = "mechaniccontroller"
	// EdgeElectriccontroller holds the string denoting the electriccontroller edge name in mutations.
	EdgeElectriccontroller = "electriccontroller"
	// EdgeLayers holds the string denoting the layers edge name in mutations.
	EdgeLayers = "layers"
	// Table holds the table name of the jobdetail in the database.
	Table = "job_details"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "job_details"
	// OwnerInverseTable is the table name for the JobOwner entity.
	// It exists in this package in order to avoid circular dependency with the "jobowner" package.
	OwnerInverseTable = "job_owners"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// ContractorTable is the table that holds the contractor relation/edge.
	ContractorTable = "job_details"
	// ContractorInverseTable is the table name for the JobContractor entity.
	// It exists in this package in order to avoid circular dependency with the "jobcontractor" package.
	ContractorInverseTable = "job_contractors"
	// ContractorColumn is the table column denoting the contractor relation/edge.
	ContractorColumn = "contractor_id"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "job_details"
	// AuthorInverseTable is the table name for the JobAuthor entity.
	// It exists in this package in order to avoid circular dependency with the "jobauthor" package.
	AuthorInverseTable = "job_authors"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "author_id"
	// ProgressTable is the table that holds the progress relation/edge.
	ProgressTable = "job_details"
	// ProgressInverseTable is the table name for the JobProgress entity.
	// It exists in this package in order to avoid circular dependency with the "jobprogress" package.
	ProgressInverseTable = "job_progresses"
	// ProgressColumn is the table column denoting the progress relation/edge.
	ProgressColumn = "progress_id"
	// InspectorTable is the table that holds the inspector relation/edge.
	InspectorTable = "job_details"
	// InspectorInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	InspectorInverseTable = "company_engineers"
	// InspectorColumn is the table column denoting the inspector relation/edge.
	InspectorColumn = "inspector_id"
	// ArchitectTable is the table that holds the architect relation/edge.
	ArchitectTable = "job_details"
	// ArchitectInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	ArchitectInverseTable = "company_engineers"
	// ArchitectColumn is the table column denoting the architect relation/edge.
	ArchitectColumn = "architect_id"
	// StaticTable is the table that holds the static relation/edge.
	StaticTable = "job_details"
	// StaticInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	StaticInverseTable = "company_engineers"
	// StaticColumn is the table column denoting the static relation/edge.
	StaticColumn = "static_id"
	// MechanicTable is the table that holds the mechanic relation/edge.
	MechanicTable = "job_details"
	// MechanicInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	MechanicInverseTable = "company_engineers"
	// MechanicColumn is the table column denoting the mechanic relation/edge.
	MechanicColumn = "mechanic_id"
	// ElectricTable is the table that holds the electric relation/edge.
	ElectricTable = "job_details"
	// ElectricInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	ElectricInverseTable = "company_engineers"
	// ElectricColumn is the table column denoting the electric relation/edge.
	ElectricColumn = "electric_id"
	// ControllerTable is the table that holds the controller relation/edge.
	ControllerTable = "job_details"
	// ControllerInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	ControllerInverseTable = "company_engineers"
	// ControllerColumn is the table column denoting the controller relation/edge.
	ControllerColumn = "controller_id"
	// MechaniccontrollerTable is the table that holds the mechaniccontroller relation/edge.
	MechaniccontrollerTable = "job_details"
	// MechaniccontrollerInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	MechaniccontrollerInverseTable = "company_engineers"
	// MechaniccontrollerColumn is the table column denoting the mechaniccontroller relation/edge.
	MechaniccontrollerColumn = "mechaniccontroller_id"
	// ElectriccontrollerTable is the table that holds the electriccontroller relation/edge.
	ElectriccontrollerTable = "job_details"
	// ElectriccontrollerInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	ElectriccontrollerInverseTable = "company_engineers"
	// ElectriccontrollerColumn is the table column denoting the electriccontroller relation/edge.
	ElectriccontrollerColumn = "electriccontroller_id"
	// LayersTable is the table that holds the layers relation/edge.
	LayersTable = "job_layers"
	// LayersInverseTable is the table name for the JobLayer entity.
	// It exists in this package in order to avoid circular dependency with the "joblayer" package.
	LayersInverseTable = "job_layers"
	// LayersColumn is the table column denoting the layers relation/edge.
	LayersColumn = "job_id"
)

// Columns holds all SQL columns for jobdetail fields.
var Columns = []string{
	FieldID,
	FieldYibfNo,
	FieldProvince,
	FieldIdare,
	FieldPafta,
	FieldAda,
	FieldParsel,
	FieldFolderNo,
	FieldStatus,
	FieldContractDate,
	FieldStartDate,
	FieldLicenseDate,
	FieldLicenseNo,
	FieldConstructionArea,
	FieldDistrict,
	FieldVillage,
	FieldStreet,
	FieldBuildingClass,
	FieldBuildingType,
	FieldBuildingBlock,
	FieldLandArea,
	FieldFloors,
	FieldUsagePurpose,
	FieldNote,
	FieldStarted,
	FieldDeleted,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "job_details"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"inspector_id",
	"architect_id",
	"static_id",
	"mechanic_id",
	"electric_id",
	"controller_id",
	"mechaniccontroller_id",
	"electriccontroller_id",
	"author_id",
	"contractor_id",
	"owner_id",
	"progress_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// YibfNoValidator is a validator for the "YibfNo" field. It is called by the builders before save.
	YibfNoValidator func(int) error
	// DefaultProvince holds the default value on creation for the "Province" field.
	DefaultProvince string
	// DefaultIdare holds the default value on creation for the "Idare" field.
	DefaultIdare string
	// DefaultPafta holds the default value on creation for the "Pafta" field.
	DefaultPafta string
	// DefaultAda holds the default value on creation for the "Ada" field.
	DefaultAda string
	// DefaultParsel holds the default value on creation for the "Parsel" field.
	DefaultParsel string
	// DefaultFolderNo holds the default value on creation for the "FolderNo" field.
	DefaultFolderNo string
	// DefaultStatus holds the default value on creation for the "Status" field.
	DefaultStatus int
	// DefaultLicenseNo holds the default value on creation for the "LicenseNo" field.
	DefaultLicenseNo string
	// DefaultDistrict holds the default value on creation for the "District" field.
	DefaultDistrict string
	// DefaultVillage holds the default value on creation for the "Village" field.
	DefaultVillage string
	// DefaultStreet holds the default value on creation for the "Street" field.
	DefaultStreet string
	// DefaultBuildingClass holds the default value on creation for the "BuildingClass" field.
	DefaultBuildingClass string
	// DefaultBuildingType holds the default value on creation for the "BuildingType" field.
	DefaultBuildingType string
	// DefaultBuildingBlock holds the default value on creation for the "BuildingBlock" field.
	DefaultBuildingBlock string
	// DefaultUsagePurpose holds the default value on creation for the "UsagePurpose" field.
	DefaultUsagePurpose string
	// DefaultStarted holds the default value on creation for the "Started" field.
	DefaultStarted int
	// DefaultDeleted holds the default value on creation for the "Deleted" field.
	DefaultDeleted int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the JobDetail queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByYibfNo orders the results by the YibfNo field.
func ByYibfNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYibfNo, opts...).ToFunc()
}

// ByProvince orders the results by the Province field.
func ByProvince(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvince, opts...).ToFunc()
}

// ByIdare orders the results by the Idare field.
func ByIdare(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdare, opts...).ToFunc()
}

// ByPafta orders the results by the Pafta field.
func ByPafta(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPafta, opts...).ToFunc()
}

// ByAda orders the results by the Ada field.
func ByAda(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAda, opts...).ToFunc()
}

// ByParsel orders the results by the Parsel field.
func ByParsel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParsel, opts...).ToFunc()
}

// ByFolderNo orders the results by the FolderNo field.
func ByFolderNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFolderNo, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByContractDate orders the results by the ContractDate field.
func ByContractDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractDate, opts...).ToFunc()
}

// ByStartDate orders the results by the StartDate field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByLicenseDate orders the results by the LicenseDate field.
func ByLicenseDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicenseDate, opts...).ToFunc()
}

// ByLicenseNo orders the results by the LicenseNo field.
func ByLicenseNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicenseNo, opts...).ToFunc()
}

// ByConstructionArea orders the results by the ConstructionArea field.
func ByConstructionArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConstructionArea, opts...).ToFunc()
}

// ByDistrict orders the results by the District field.
func ByDistrict(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDistrict, opts...).ToFunc()
}

// ByVillage orders the results by the Village field.
func ByVillage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVillage, opts...).ToFunc()
}

// ByStreet orders the results by the Street field.
func ByStreet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStreet, opts...).ToFunc()
}

// ByBuildingClass orders the results by the BuildingClass field.
func ByBuildingClass(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuildingClass, opts...).ToFunc()
}

// ByBuildingType orders the results by the BuildingType field.
func ByBuildingType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuildingType, opts...).ToFunc()
}

// ByBuildingBlock orders the results by the BuildingBlock field.
func ByBuildingBlock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuildingBlock, opts...).ToFunc()
}

// ByLandArea orders the results by the LandArea field.
func ByLandArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLandArea, opts...).ToFunc()
}

// ByFloors orders the results by the Floors field.
func ByFloors(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFloors, opts...).ToFunc()
}

// ByUsagePurpose orders the results by the UsagePurpose field.
func ByUsagePurpose(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsagePurpose, opts...).ToFunc()
}

// ByNote orders the results by the Note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByStarted orders the results by the Started field.
func ByStarted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStarted, opts...).ToFunc()
}

// ByDeleted orders the results by the Deleted field.
func ByDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleted, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByContractorField orders the results by contractor field.
func ByContractorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContractorStep(), sql.OrderByField(field, opts...))
	}
}

// ByAuthorField orders the results by author field.
func ByAuthorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorStep(), sql.OrderByField(field, opts...))
	}
}

// ByProgressField orders the results by progress field.
func ByProgressField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgressStep(), sql.OrderByField(field, opts...))
	}
}

// ByInspectorField orders the results by inspector field.
func ByInspectorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInspectorStep(), sql.OrderByField(field, opts...))
	}
}

// ByArchitectField orders the results by architect field.
func ByArchitectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArchitectStep(), sql.OrderByField(field, opts...))
	}
}

// ByStaticField orders the results by static field.
func ByStaticField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStaticStep(), sql.OrderByField(field, opts...))
	}
}

// ByMechanicField orders the results by mechanic field.
func ByMechanicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMechanicStep(), sql.OrderByField(field, opts...))
	}
}

// ByElectricField orders the results by electric field.
func ByElectricField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newElectricStep(), sql.OrderByField(field, opts...))
	}
}

// ByControllerField orders the results by controller field.
func ByControllerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControllerStep(), sql.OrderByField(field, opts...))
	}
}

// ByMechaniccontrollerField orders the results by mechaniccontroller field.
func ByMechaniccontrollerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMechaniccontrollerStep(), sql.OrderByField(field, opts...))
	}
}

// ByElectriccontrollerField orders the results by electriccontroller field.
func ByElectriccontrollerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newElectriccontrollerStep(), sql.OrderByField(field, opts...))
	}
}

// ByLayersCount orders the results by layers count.
func ByLayersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLayersStep(), opts...)
	}
}

// ByLayers orders the results by layers terms.
func ByLayers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLayersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newContractorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContractorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ContractorTable, ContractorColumn),
	)
}
func newAuthorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
	)
}
func newProgressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProgressTable, ProgressColumn),
	)
}
func newInspectorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InspectorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InspectorTable, InspectorColumn),
	)
}
func newArchitectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArchitectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ArchitectTable, ArchitectColumn),
	)
}
func newStaticStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StaticInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StaticTable, StaticColumn),
	)
}
func newMechanicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MechanicInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MechanicTable, MechanicColumn),
	)
}
func newElectricStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ElectricInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ElectricTable, ElectricColumn),
	)
}
func newControllerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControllerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ControllerTable, ControllerColumn),
	)
}
func newMechaniccontrollerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MechaniccontrollerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MechaniccontrollerTable, MechaniccontrollerColumn),
	)
}
func newElectriccontrollerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ElectriccontrollerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ElectriccontrollerTable, ElectriccontrollerColumn),
	)
}
func newLayersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LayersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LayersTable, LayersColumn),
	)
}
