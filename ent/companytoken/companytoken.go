// Code generated by ent, DO NOT EDIT.

package companytoken

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the companytoken type in the database.
	Label = "company_token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldYDKUsername holds the string denoting the ydkusername field in the database.
	FieldYDKUsername = "ydk_username"
	// FieldYDKPassword holds the string denoting the ydkpassword field in the database.
	FieldYDKPassword = "ydk_password"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldDepartmentId holds the string denoting the departmentid field in the database.
	FieldDepartmentId = "department_id"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// Table holds the table name of the companytoken in the database.
	Table = "company_tokens"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "company_tokens"
	// CompanyInverseTable is the table name for the CompanyDetail entity.
	// It exists in this package in order to avoid circular dependency with the "companydetail" package.
	CompanyInverseTable = "company_details"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "company_id"
)

// Columns holds all SQL columns for companytoken fields.
var Columns = []string{
	FieldID,
	FieldYDKUsername,
	FieldYDKPassword,
	FieldToken,
	FieldDepartmentId,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "company_tokens"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"company_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the CompanyToken queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByYDKUsername orders the results by the YDKUsername field.
func ByYDKUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYDKUsername, opts...).ToFunc()
}

// ByYDKPassword orders the results by the YDKPassword field.
func ByYDKPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYDKPassword, opts...).ToFunc()
}

// ByToken orders the results by the Token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// ByDepartmentId orders the results by the DepartmentId field.
func ByDepartmentId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartmentId, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCompanyField orders the results by company field.
func ByCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyStep(), sql.OrderByField(field, opts...))
	}
}
func newCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyTable, CompanyColumn),
	)
}
