// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/polatbilal/gqlgen-ent/ent/jobcontractor"
)

// JobContractor is the model entity for the JobContractor schema.
type JobContractor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// TcNo holds the value of the "TcNo" field.
	TcNo string `json:"TcNo,omitempty"`
	// RegisterNo holds the value of the "RegisterNo" field.
	RegisterNo string `json:"RegisterNo,omitempty"`
	// Address holds the value of the "Address" field.
	Address string `json:"Address,omitempty"`
	// TaxNo holds the value of the "TaxNo" field.
	TaxNo string `json:"TaxNo,omitempty"`
	// MobilePhone holds the value of the "MobilePhone" field.
	MobilePhone string `json:"MobilePhone,omitempty"`
	// Phone holds the value of the "Phone" field.
	Phone string `json:"Phone,omitempty"`
	// Email holds the value of the "Email" field.
	Email string `json:"Email,omitempty"`
	// PersonType holds the value of the "PersonType" field.
	PersonType string `json:"PersonType,omitempty"`
	// YDSID holds the value of the "YDSID" field.
	YDSID int `json:"YDSID,omitempty"`
	// Note holds the value of the "Note" field.
	Note string `json:"Note,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobContractorQuery when eager-loading is set.
	Edges        JobContractorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// JobContractorEdges holds the relations/edges for other nodes in the graph.
type JobContractorEdges struct {
	// Contractors holds the value of the contractors edge.
	Contractors []*JobRelations `json:"contractors,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedContractors map[string][]*JobRelations
}

// ContractorsOrErr returns the Contractors value or an error if the edge
// was not loaded in eager-loading.
func (e JobContractorEdges) ContractorsOrErr() ([]*JobRelations, error) {
	if e.loadedTypes[0] {
		return e.Contractors, nil
	}
	return nil, &NotLoadedError{edge: "contractors"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobContractor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobcontractor.FieldID, jobcontractor.FieldYDSID:
			values[i] = new(sql.NullInt64)
		case jobcontractor.FieldName, jobcontractor.FieldTcNo, jobcontractor.FieldRegisterNo, jobcontractor.FieldAddress, jobcontractor.FieldTaxNo, jobcontractor.FieldMobilePhone, jobcontractor.FieldPhone, jobcontractor.FieldEmail, jobcontractor.FieldPersonType, jobcontractor.FieldNote:
			values[i] = new(sql.NullString)
		case jobcontractor.FieldCreatedAt, jobcontractor.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobContractor fields.
func (jc *JobContractor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobcontractor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			jc.ID = int(value.Int64)
		case jobcontractor.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				jc.Name = value.String
			}
		case jobcontractor.FieldTcNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TcNo", values[i])
			} else if value.Valid {
				jc.TcNo = value.String
			}
		case jobcontractor.FieldRegisterNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RegisterNo", values[i])
			} else if value.Valid {
				jc.RegisterNo = value.String
			}
		case jobcontractor.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Address", values[i])
			} else if value.Valid {
				jc.Address = value.String
			}
		case jobcontractor.FieldTaxNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TaxNo", values[i])
			} else if value.Valid {
				jc.TaxNo = value.String
			}
		case jobcontractor.FieldMobilePhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field MobilePhone", values[i])
			} else if value.Valid {
				jc.MobilePhone = value.String
			}
		case jobcontractor.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Phone", values[i])
			} else if value.Valid {
				jc.Phone = value.String
			}
		case jobcontractor.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Email", values[i])
			} else if value.Valid {
				jc.Email = value.String
			}
		case jobcontractor.FieldPersonType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PersonType", values[i])
			} else if value.Valid {
				jc.PersonType = value.String
			}
		case jobcontractor.FieldYDSID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field YDSID", values[i])
			} else if value.Valid {
				jc.YDSID = int(value.Int64)
			}
		case jobcontractor.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Note", values[i])
			} else if value.Valid {
				jc.Note = value.String
			}
		case jobcontractor.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				jc.CreatedAt = value.Time
			}
		case jobcontractor.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				jc.UpdatedAt = value.Time
			}
		default:
			jc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobContractor.
// This includes values selected through modifiers, order, etc.
func (jc *JobContractor) Value(name string) (ent.Value, error) {
	return jc.selectValues.Get(name)
}

// QueryContractors queries the "contractors" edge of the JobContractor entity.
func (jc *JobContractor) QueryContractors() *JobRelationsQuery {
	return NewJobContractorClient(jc.config).QueryContractors(jc)
}

// Update returns a builder for updating this JobContractor.
// Note that you need to call JobContractor.Unwrap() before calling this method if this JobContractor
// was returned from a transaction, and the transaction was committed or rolled back.
func (jc *JobContractor) Update() *JobContractorUpdateOne {
	return NewJobContractorClient(jc.config).UpdateOne(jc)
}

// Unwrap unwraps the JobContractor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jc *JobContractor) Unwrap() *JobContractor {
	_tx, ok := jc.config.driver.(*txDriver)
	if !ok {
		panic("ent: JobContractor is not a transactional entity")
	}
	jc.config.driver = _tx.drv
	return jc
}

// String implements the fmt.Stringer.
func (jc *JobContractor) String() string {
	var builder strings.Builder
	builder.WriteString("JobContractor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jc.ID))
	builder.WriteString("Name=")
	builder.WriteString(jc.Name)
	builder.WriteString(", ")
	builder.WriteString("TcNo=")
	builder.WriteString(jc.TcNo)
	builder.WriteString(", ")
	builder.WriteString("RegisterNo=")
	builder.WriteString(jc.RegisterNo)
	builder.WriteString(", ")
	builder.WriteString("Address=")
	builder.WriteString(jc.Address)
	builder.WriteString(", ")
	builder.WriteString("TaxNo=")
	builder.WriteString(jc.TaxNo)
	builder.WriteString(", ")
	builder.WriteString("MobilePhone=")
	builder.WriteString(jc.MobilePhone)
	builder.WriteString(", ")
	builder.WriteString("Phone=")
	builder.WriteString(jc.Phone)
	builder.WriteString(", ")
	builder.WriteString("Email=")
	builder.WriteString(jc.Email)
	builder.WriteString(", ")
	builder.WriteString("PersonType=")
	builder.WriteString(jc.PersonType)
	builder.WriteString(", ")
	builder.WriteString("YDSID=")
	builder.WriteString(fmt.Sprintf("%v", jc.YDSID))
	builder.WriteString(", ")
	builder.WriteString("Note=")
	builder.WriteString(jc.Note)
	builder.WriteString(", ")
	builder.WriteString("CreatedAt=")
	builder.WriteString(jc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(jc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedContractors returns the Contractors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (jc *JobContractor) NamedContractors(name string) ([]*JobRelations, error) {
	if jc.Edges.namedContractors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := jc.Edges.namedContractors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (jc *JobContractor) appendNamedContractors(name string, edges ...*JobRelations) {
	if jc.Edges.namedContractors == nil {
		jc.Edges.namedContractors = make(map[string][]*JobRelations)
	}
	if len(edges) == 0 {
		jc.Edges.namedContractors[name] = []*JobRelations{}
	} else {
		jc.Edges.namedContractors[name] = append(jc.Edges.namedContractors[name], edges...)
	}
}

// JobContractors is a parsable slice of JobContractor.
type JobContractors []*JobContractor
