// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gqlgen-ent/ent/jobdetail"
	"gqlgen-ent/ent/jobpayments"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// JobPayments is the model entity for the JobPayments schema.
type JobPayments struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Date holds the value of the "Date" field.
	Date time.Time `json:"Date,omitempty"`
	// Amount holds the value of the "Amount" field.
	Amount int `json:"Amount,omitempty"`
	// Description holds the value of the "Description" field.
	Description string `json:"Description,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// Percentage holds the value of the "Percentage" field.
	Percentage float64 `json:"Percentage,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobPaymentsQuery when eager-loading is set.
	Edges        JobPaymentsEdges `json:"edges"`
	payments_id  *int
	selectValues sql.SelectValues
}

// JobPaymentsEdges holds the relations/edges for other nodes in the graph.
type JobPaymentsEdges struct {
	// Payments holds the value of the payments edge.
	Payments *JobDetail `json:"payments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// PaymentsOrErr returns the Payments value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobPaymentsEdges) PaymentsOrErr() (*JobDetail, error) {
	if e.Payments != nil {
		return e.Payments, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: jobdetail.Label}
	}
	return nil, &NotLoadedError{edge: "payments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobPayments) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobpayments.FieldPercentage:
			values[i] = new(sql.NullFloat64)
		case jobpayments.FieldID, jobpayments.FieldAmount:
			values[i] = new(sql.NullInt64)
		case jobpayments.FieldDescription, jobpayments.FieldStatus:
			values[i] = new(sql.NullString)
		case jobpayments.FieldDate, jobpayments.FieldCreatedAt, jobpayments.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case jobpayments.ForeignKeys[0]: // payments_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobPayments fields.
func (jp *JobPayments) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobpayments.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			jp.ID = int(value.Int64)
		case jobpayments.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Date", values[i])
			} else if value.Valid {
				jp.Date = value.Time
			}
		case jobpayments.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Amount", values[i])
			} else if value.Valid {
				jp.Amount = int(value.Int64)
			}
		case jobpayments.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Description", values[i])
			} else if value.Valid {
				jp.Description = value.String
			}
		case jobpayments.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				jp.Status = value.String
			}
		case jobpayments.FieldPercentage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Percentage", values[i])
			} else if value.Valid {
				jp.Percentage = value.Float64
			}
		case jobpayments.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				jp.CreatedAt = value.Time
			}
		case jobpayments.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				jp.UpdatedAt = value.Time
			}
		case jobpayments.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field payments_id", value)
			} else if value.Valid {
				jp.payments_id = new(int)
				*jp.payments_id = int(value.Int64)
			}
		default:
			jp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobPayments.
// This includes values selected through modifiers, order, etc.
func (jp *JobPayments) Value(name string) (ent.Value, error) {
	return jp.selectValues.Get(name)
}

// QueryPayments queries the "payments" edge of the JobPayments entity.
func (jp *JobPayments) QueryPayments() *JobDetailQuery {
	return NewJobPaymentsClient(jp.config).QueryPayments(jp)
}

// Update returns a builder for updating this JobPayments.
// Note that you need to call JobPayments.Unwrap() before calling this method if this JobPayments
// was returned from a transaction, and the transaction was committed or rolled back.
func (jp *JobPayments) Update() *JobPaymentsUpdateOne {
	return NewJobPaymentsClient(jp.config).UpdateOne(jp)
}

// Unwrap unwraps the JobPayments entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jp *JobPayments) Unwrap() *JobPayments {
	_tx, ok := jp.config.driver.(*txDriver)
	if !ok {
		panic("ent: JobPayments is not a transactional entity")
	}
	jp.config.driver = _tx.drv
	return jp
}

// String implements the fmt.Stringer.
func (jp *JobPayments) String() string {
	var builder strings.Builder
	builder.WriteString("JobPayments(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jp.ID))
	builder.WriteString("Date=")
	builder.WriteString(jp.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Amount=")
	builder.WriteString(fmt.Sprintf("%v", jp.Amount))
	builder.WriteString(", ")
	builder.WriteString("Description=")
	builder.WriteString(jp.Description)
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(jp.Status)
	builder.WriteString(", ")
	builder.WriteString("Percentage=")
	builder.WriteString(fmt.Sprintf("%v", jp.Percentage))
	builder.WriteString(", ")
	builder.WriteString("CreatedAt=")
	builder.WriteString(jp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(jp.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// JobPaymentsSlice is a parsable slice of JobPayments.
type JobPaymentsSlice []*JobPayments
