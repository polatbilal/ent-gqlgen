// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/polatbilal/gqlgen-ent/ent/companyengineer"
	"github.com/polatbilal/gqlgen-ent/ent/predicate"
)

// CompanyEngineerDelete is the builder for deleting a CompanyEngineer entity.
type CompanyEngineerDelete struct {
	config
	hooks    []Hook
	mutation *CompanyEngineerMutation
}

// Where appends a list predicates to the CompanyEngineerDelete builder.
func (ced *CompanyEngineerDelete) Where(ps ...predicate.CompanyEngineer) *CompanyEngineerDelete {
	ced.mutation.Where(ps...)
	return ced
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ced *CompanyEngineerDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ced.sqlExec, ced.mutation, ced.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ced *CompanyEngineerDelete) ExecX(ctx context.Context) int {
	n, err := ced.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ced *CompanyEngineerDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(companyengineer.Table, sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt))
	if ps := ced.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ced.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ced.mutation.done = true
	return affected, err
}

// CompanyEngineerDeleteOne is the builder for deleting a single CompanyEngineer entity.
type CompanyEngineerDeleteOne struct {
	ced *CompanyEngineerDelete
}

// Where appends a list predicates to the CompanyEngineerDelete builder.
func (cedo *CompanyEngineerDeleteOne) Where(ps ...predicate.CompanyEngineer) *CompanyEngineerDeleteOne {
	cedo.ced.mutation.Where(ps...)
	return cedo
}

// Exec executes the deletion query.
func (cedo *CompanyEngineerDeleteOne) Exec(ctx context.Context) error {
	n, err := cedo.ced.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{companyengineer.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cedo *CompanyEngineerDeleteOne) ExecX(ctx context.Context) {
	if err := cedo.Exec(ctx); err != nil {
		panic(err)
	}
}
