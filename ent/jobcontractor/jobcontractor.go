// Code generated by ent, DO NOT EDIT.

package jobcontractor

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the jobcontractor type in the database.
	Label = "job_contractor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTcNo holds the string denoting the tcno field in the database.
	FieldTcNo = "tc_no"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldRegisterNo holds the string denoting the registerno field in the database.
	FieldRegisterNo = "register_no"
	// FieldTaxAdmin holds the string denoting the taxadmin field in the database.
	FieldTaxAdmin = "tax_admin"
	// FieldTaxNo holds the string denoting the taxno field in the database.
	FieldTaxNo = "tax_no"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeContractors holds the string denoting the contractors edge name in mutations.
	EdgeContractors = "contractors"
	// Table holds the table name of the jobcontractor in the database.
	Table = "job_contractors"
	// ContractorsTable is the table that holds the contractors relation/edge.
	ContractorsTable = "job_details"
	// ContractorsInverseTable is the table name for the JobDetail entity.
	// It exists in this package in order to avoid circular dependency with the "jobdetail" package.
	ContractorsInverseTable = "job_details"
	// ContractorsColumn is the table column denoting the contractors relation/edge.
	ContractorsColumn = "contractor_id"
)

// Columns holds all SQL columns for jobcontractor fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldTcNo,
	FieldAddress,
	FieldRegisterNo,
	FieldTaxAdmin,
	FieldTaxNo,
	FieldPhone,
	FieldEmail,
	FieldNote,
	FieldDeleted,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "Name" field.
	DefaultName string
	// DefaultDeleted holds the default value on creation for the "Deleted" field.
	DefaultDeleted int
	// DefaultCreatedAt holds the default value on creation for the "CreatedAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "UpdatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "UpdatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the JobContractor queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the Name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTcNo orders the results by the TcNo field.
func ByTcNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTcNo, opts...).ToFunc()
}

// ByAddress orders the results by the Address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByRegisterNo orders the results by the RegisterNo field.
func ByRegisterNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegisterNo, opts...).ToFunc()
}

// ByTaxAdmin orders the results by the TaxAdmin field.
func ByTaxAdmin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxAdmin, opts...).ToFunc()
}

// ByTaxNo orders the results by the TaxNo field.
func ByTaxNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxNo, opts...).ToFunc()
}

// ByPhone orders the results by the Phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByEmail orders the results by the Email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByNote orders the results by the Note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByDeleted orders the results by the Deleted field.
func ByDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleted, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByContractorsCount orders the results by contractors count.
func ByContractorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContractorsStep(), opts...)
	}
}

// ByContractors orders the results by contractors terms.
func ByContractors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContractorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newContractorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContractorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ContractorsTable, ContractorsColumn),
	)
}
