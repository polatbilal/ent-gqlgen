// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/polatbilal/gqlgen-ent/ent/companydetail"
	"github.com/polatbilal/gqlgen-ent/ent/companytoken"
)

// CompanyToken is the model entity for the CompanyToken schema.
type CompanyToken struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// DepartmentId holds the value of the "DepartmentId" field.
	DepartmentId int `json:"DepartmentId,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompanyTokenQuery when eager-loading is set.
	Edges        CompanyTokenEdges `json:"edges"`
	company_id   *int
	selectValues sql.SelectValues
}

// CompanyTokenEdges holds the relations/edges for other nodes in the graph.
type CompanyTokenEdges struct {
	// Company holds the value of the company edge.
	Company *CompanyDetail `json:"company,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompanyTokenEdges) CompanyOrErr() (*CompanyDetail, error) {
	if e.Company != nil {
		return e.Company, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: companydetail.Label}
	}
	return nil, &NotLoadedError{edge: "company"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CompanyToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case companytoken.FieldID, companytoken.FieldDepartmentId:
			values[i] = new(sql.NullInt64)
		case companytoken.FieldToken:
			values[i] = new(sql.NullString)
		case companytoken.FieldCreatedAt, companytoken.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case companytoken.ForeignKeys[0]: // company_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CompanyToken fields.
func (ct *CompanyToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case companytoken.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ct.ID = int(value.Int64)
		case companytoken.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				ct.Token = value.String
			}
		case companytoken.FieldDepartmentId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DepartmentId", values[i])
			} else if value.Valid {
				ct.DepartmentId = int(value.Int64)
			}
		case companytoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				ct.CreatedAt = value.Time
			}
		case companytoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				ct.UpdatedAt = value.Time
			}
		case companytoken.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_id", value)
			} else if value.Valid {
				ct.company_id = new(int)
				*ct.company_id = int(value.Int64)
			}
		default:
			ct.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CompanyToken.
// This includes values selected through modifiers, order, etc.
func (ct *CompanyToken) Value(name string) (ent.Value, error) {
	return ct.selectValues.Get(name)
}

// QueryCompany queries the "company" edge of the CompanyToken entity.
func (ct *CompanyToken) QueryCompany() *CompanyDetailQuery {
	return NewCompanyTokenClient(ct.config).QueryCompany(ct)
}

// Update returns a builder for updating this CompanyToken.
// Note that you need to call CompanyToken.Unwrap() before calling this method if this CompanyToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (ct *CompanyToken) Update() *CompanyTokenUpdateOne {
	return NewCompanyTokenClient(ct.config).UpdateOne(ct)
}

// Unwrap unwraps the CompanyToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ct *CompanyToken) Unwrap() *CompanyToken {
	_tx, ok := ct.config.driver.(*txDriver)
	if !ok {
		panic("ent: CompanyToken is not a transactional entity")
	}
	ct.config.driver = _tx.drv
	return ct
}

// String implements the fmt.Stringer.
func (ct *CompanyToken) String() string {
	var builder strings.Builder
	builder.WriteString("CompanyToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ct.ID))
	builder.WriteString("token=")
	builder.WriteString(ct.Token)
	builder.WriteString(", ")
	builder.WriteString("DepartmentId=")
	builder.WriteString(fmt.Sprintf("%v", ct.DepartmentId))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(ct.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(ct.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CompanyTokens is a parsable slice of CompanyToken.
type CompanyTokens []*CompanyToken
