# JobDetail
type JobDetail {
  id: ID!
  YibfNo: Int!
  Idare: String
  Pafta: String
  Ada: String
  Parsel: String
  FolderNo: String
  Status: Int
  ContractDate: String
  StartDate: String
  CompletionDate: String
  LicenseDate: String
  LicenseNo: String
  ConstructionArea: String
  LandArea: String
  City: String
  District: String
  Village: String
  Street: String
  BuildingClass: String
  BuildingType: String
  BuildingBlock: String
  Floors: Int
  Note: String
  Started: Int
  UsagePurpose: String
  Deleted: Int
  Owner: JobOwner
  Contractor: JobContractor
  Author: JobAuthor
  Progress: JobProgress
  Inspector: CompanyEngineer
  Static: CompanyEngineer
  Architect: CompanyEngineer
  Mechanic: CompanyEngineer
  Electric: CompanyEngineer
  Controller: CompanyEngineer
  MechanicController: CompanyEngineer
  ElectricController: CompanyEngineer
  CreatedAt: String
  Layer: [JobLayer]
}

input JobInput {
  YibfNo: Int
  Idare: String
  Pafta: String
  Ada: String
  Parsel: String
  FolderNo: String
  Status: Int
  ContractDate: String
  StartDate: String
  CompletionDate: String
  LicenseDate: String
  LicenseNo: String
  ConstructionArea: String
  LandArea: String
  City: String
  District: String
  Village: String
  Street: String
  BuildingClass: String
  BuildingType: String
  BuildingBlock: String
  Floors: Int
  Note: String
  Started: Int
  UsagePurpose: String
  Deleted: Int
  Owner: [JobOwnerInput]
  Contractor: [JobContractorInput]
  Author: [JobAuthorInput]
  Progress: [JobProgressInput]
  Inspector: Int
  Static: Int
  Architect: Int
  Mechanic: Int
  Electric: Int
  Controller: Int
  MechanicController: Int
  ElectricController: Int
}

# Job Author
type JobAuthor {
  id: ID!
  Architect: String
  Static: String
  Mechanic: String
  Electric: String
  Floor: String
}

input JobAuthorInput {
  Architect: String
  Static: String
  Mechanic: String
  Electric: String
  Floor: String
}

# Job Progress
type JobProgress {
  id: ID!
  One: Int
  Two: Int
  Three: Int
  Four: Int
  Five: Int
  Six: Int
}

input JobProgressInput {
  One: Int
  Two: Int
  Three: Int
  Four: Int
  Five: Int
  Six: Int
}

extend type Query {
  job(yibfNo: Int!): JobDetail
  jobs: [JobDetail!]!
}

extend type Mutation {
  createJob(input: JobInput!): JobDetail! @goField(forceResolver: true) @auth

  updateJob(YibfNo: Int!, input: JobInput!): JobDetail!
    @goField(forceResolver: true)
    @auth

  deleteJob(YibfNo: Int!): Boolean! @goField(forceResolver: true) @auth
}
