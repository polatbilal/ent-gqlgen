package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"context"
	"fmt"

	"github.com/polatbilal/gqlgen-ent/ent"
	"github.com/polatbilal/gqlgen-ent/ent/jobcontractor"
	"github.com/polatbilal/gqlgen-ent/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/graph/model"
	"github.com/polatbilal/gqlgen-ent/middlewares"
)

// CreateContractor is the resolver for the createContractor field.
func (r *mutationResolver) CreateContractor(ctx context.Context, input model.JobContractorInput) (*ent.JobContractor, error) {
	client := middlewares.GetClientFromContext(ctx)
	contractor, err := client.JobContractor.Create().
		SetName(input.Name).
		SetNillableTcNo(input.TcNo).
		SetNillableRegisterNo(input.RegisterNo).
		SetNillableAddress(input.Address).
		SetNillableTaxNo(input.TaxNo).
		SetNillableMobilePhone(input.MobilePhone).
		SetNillablePhone(input.Phone).
		SetNillableEmail(input.Email).
		SetNillablePersonType(input.PersonType).
		SetNillableYDSID(input.Ydsid).
		Save(ctx)

	if err != nil {
		return nil, fmt.Errorf("failed to create contractor: %w", err)
	}

	return contractor, nil
}

// UpdateContractor is the resolver for the updateContractor field.
func (r *mutationResolver) UpdateContractor(ctx context.Context, ydsid int, input model.JobContractorInput) (*ent.JobContractor, error) {
	client := middlewares.GetClientFromContext(ctx)

	contractor, err := client.JobContractor.UpdateOneID(ydsid).
		SetName(input.Name).
		SetNillableTcNo(input.TcNo).
		SetNillableRegisterNo(input.RegisterNo).
		SetNillableAddress(input.Address).
		SetNillableTaxNo(input.TaxNo).
		SetNillableMobilePhone(input.MobilePhone).
		SetNillablePhone(input.Phone).
		SetNillableEmail(input.Email).
		SetNillablePersonType(input.PersonType).
		SetNillableYDSID(input.Ydsid).
		Save(ctx)

	if err != nil {
		return nil, fmt.Errorf("failed to update contractor: %w", err)
	}

	return contractor, nil
}

// AllContractor is the resolver for the allContractor field.
func (r *queryResolver) AllContractor(ctx context.Context) ([]*ent.JobContractor, error) {
	client := middlewares.GetClientFromContext(ctx)
	return client.JobContractor.Query().All(ctx)
}

// Contractor is the resolver for the contractor field.
func (r *queryResolver) Contractor(ctx context.Context, yibfNo int) (*ent.JobContractor, error) {
	client := middlewares.GetClientFromContext(ctx)
	return client.JobContractor.Query().Where(jobcontractor.HasContractorsWith(jobdetail.YibfNoEQ(yibfNo))).Only(ctx)
}

// GetContractor is the resolver for the getContractor field.
func (r *queryResolver) GetContractor(ctx context.Context, ydsid int) (*ent.JobContractor, error) {
	client := middlewares.GetClientFromContext(ctx)
	return client.JobContractor.Query().Where(jobcontractor.YDSID(ydsid)).Only(ctx)
}
