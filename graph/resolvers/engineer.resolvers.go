package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"context"
	"fmt"
	"strconv"

	"github.com/polatbilal/gqlgen-ent/ent"
	"github.com/polatbilal/gqlgen-ent/ent/companydetail"
	"github.com/polatbilal/gqlgen-ent/ent/companyengineer"
	"github.com/polatbilal/gqlgen-ent/ent/companyuser"
	"github.com/polatbilal/gqlgen-ent/ent/user"
	"github.com/polatbilal/gqlgen-ent/graph/model"
	"github.com/polatbilal/gqlgen-ent/middlewares"
)

// CreateEngineer is the resolver for the createEngineer field.
func (r *mutationResolver) CreateEngineer(ctx context.Context, input model.CompanyEngineerInput) (*ent.CompanyEngineer, error) {
	client := middlewares.GetClientFromContext(ctx)

	// YDSID ile denetçi kontrolü
	if input.RegNo != nil {
		exists, err := client.CompanyEngineer.Query().
			Where(companyengineer.YDSIDEQ(*input.Ydsid)).
			Exist(ctx)
		if err != nil {
			return nil, fmt.Errorf("denetçi kontrolü yapılırken hata oluştu: %v", err)
		}
		if exists {
			return nil, fmt.Errorf("bu ydsid numarasına (%d) sahip denetçi zaten mevcut", *input.RegNo)
		}
	}

	// CompanyCode ile şirketi bul
	company, err := client.CompanyDetail.Query().
		Where(companydetail.CompanyCodeEQ(*input.CompanyCode)).
		Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("şirket bulunamadı (kod: %d): %v", *input.CompanyCode, err)
	}

	createEngineer, err := client.CompanyEngineer.Create().
		SetNillableName(input.Name).
		SetNillableAddress(input.Address).
		SetNillableEmail(input.Email).
		SetNillableTcNo(input.TcNo).
		SetNillablePhone(input.Phone).
		SetNillableRegisterNo(input.RegNo).
		SetNillableCertNo(input.CertNo).
		SetNillableCareer(input.Career).
		SetNillablePosition(input.Position).
		SetNillableYDSID(input.Ydsid).
		SetNillableNote(input.Note).
		SetNillableEmployment(input.Employment).
		SetCompany(company).
		Save(ctx)

	if err != nil {
		return nil, fmt.Errorf("mühendis oluşturulamadı: %v, %s", err, createEngineer)
	}

	return createEngineer, nil
}

// UpdateEngineer is the resolver for the updateEngineer field.
func (r *mutationResolver) UpdateEngineer(ctx context.Context, ydsid int, input model.CompanyEngineerInput) (*ent.CompanyEngineer, error) {
	client := middlewares.GetClientFromContext(ctx)

	engineer, err := client.CompanyEngineer.UpdateOneID(ydsid).
		SetNillableName(input.Name).
		SetNillableAddress(input.Address).
		SetNillableEmail(input.Email).
		SetNillableTcNo(input.TcNo).
		SetNillablePhone(input.Phone).
		SetNillableRegisterNo(input.RegNo).
		SetNillableCertNo(input.CertNo).
		SetNillableCareer(input.Career).
		SetNillablePosition(input.Position).
		SetNillableNote(input.Note).
		SetNillableEmployment(input.Employment).
		Save(ctx)

	if err != nil {
		return nil, fmt.Errorf("failed to update engineer: %v", err)
	}

	return engineer, nil
}

// Engineer is the resolver for the Engineer field.
func (r *queryResolver) Engineer(ctx context.Context, filter *model.EngineerFilterInput) ([]*ent.CompanyEngineer, error) {
	client := middlewares.GetClientFromContext(ctx)
	query := client.CompanyEngineer.Query()

	// Kullanıcı bilgilerini context'ten al
	customClaim := middlewares.CtxValue(ctx)
	if customClaim == nil {
		return nil, fmt.Errorf("kullanıcı kimliği bulunamadı")
	}

	// Kullanıcının bağlı olduğu şirketleri bul
	userCompanies, err := client.CompanyUser.Query().
		Where(companyuser.HasUserWith(user.IDEQ(customClaim.ID))).
		QueryCompany().
		All(ctx)
	if err != nil {
		return nil, fmt.Errorf("kullanıcının şirketleri alınamadı: %v", err)
	}

	// Şirket ID'lerini topla
	companyIDs := make([]int, len(userCompanies))
	for i, company := range userCompanies {
		companyIDs[i] = company.ID
	}

	// Sorguyu kullanıcının şirketlerine göre filtrele
	query = query.Where(companyengineer.HasCompanyWith(companydetail.IDIn(companyIDs...)))

	if filter != nil {
		if filter.ID != nil && *filter.ID != "" {
			engineerID, err := strconv.Atoi(*filter.ID)
			if err != nil {
				return nil, fmt.Errorf("geçersiz mühendis ID'si: %v", err)
			}
			query = query.Where(companyengineer.IDEQ(engineerID))
		}
		if filter.Ydsid != nil {
			query = query.Where(companyengineer.YDSIDEQ(*filter.Ydsid))
		}
	}

	engineers, err := query.All(ctx)
	if err != nil {
		return nil, fmt.Errorf("mühendisler alınamadı: %v", err)
	}

	return engineers, nil
}
