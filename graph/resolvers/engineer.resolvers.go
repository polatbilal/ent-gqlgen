package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"context"
	"fmt"
	"gqlgen-ent/ent"
	"gqlgen-ent/ent/companyengineer"
	"gqlgen-ent/graph/generated"
	"gqlgen-ent/graph/model"
	"gqlgen-ent/middlewares"
	"gqlgen-ent/tools"
	"strconv"
)

// Employment is the resolver for the Employment field.
func (r *companyEngineerResolver) Employment(ctx context.Context, obj *ent.CompanyEngineer) (*string, error) {
	if obj.Employment.IsZero() {
		return nil, nil
	}
	employment := obj.Employment.Format("2006-01-02")
	return &employment, nil
}

// Dismissal is the resolver for the Dismissal field.
func (r *companyEngineerResolver) Dismissal(ctx context.Context, obj *ent.CompanyEngineer) (*string, error) {
	if obj.Dismissal.IsZero() {
		return nil, nil
	}
	dismissal := obj.Dismissal.Format("2006-01-02")
	return &dismissal, nil
}

// CreateEngineer is the resolver for the createEngineer field.
func (r *mutationResolver) CreateEngineer(ctx context.Context, input model.CompanyEngineerInput) (*ent.CompanyEngineer, error) {
	client := middlewares.GetClientFromContext(ctx)

	employmentPtr, err := tools.ParseDate(input.Employment)
	if err != nil {
		return nil, fmt.Errorf("employment date dönüşüm hatası: %v", err)
	}

	dismissalPtr, err := tools.ParseDate(input.Dismissal)
	if err != nil {
		return nil, fmt.Errorf("dismissal date dönüşüm hatası: %v", err)
	}

	createEngineer, err := client.CompanyEngineer.Create().
		SetNillableName(&input.Name).
		SetNillableAddress(input.Address).
		SetNillableEmail(input.Email).
		SetNillableTcNo(input.TcNo).
		SetNillablePhone(input.Phone).
		SetNillableRegNo(input.RegNo).
		SetNillableCertNo(input.CertNo).
		SetNillableCareer(input.Career).
		SetNillablePosition(input.Position).
		SetNillableNote(input.Note).
		SetNillableEmployment(employmentPtr).
		SetNillableDismissal(dismissalPtr).
		Save(ctx)

	if err != nil {
		return nil, fmt.Errorf("mühendis oluşturulamadı: %v, %s", err, createEngineer)
	}

	return createEngineer, nil
}

// UpdateEngineer is the resolver for the updateEngineer field.
func (r *mutationResolver) UpdateEngineer(ctx context.Context, id string, input model.CompanyEngineerInput) (*ent.CompanyEngineer, error) {
	client := middlewares.GetClientFromContext(ctx)

	engineerID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("failed to convert engineer ID: %v", err)
	}

	employmentPtr, err := tools.ParseDate(input.Employment)
	if err != nil {
		return nil, fmt.Errorf("employment date dönüşüm hatası: %v", err)
	}

	dismissalPtr, err := tools.ParseDate(input.Dismissal)
	if err != nil {
		return nil, fmt.Errorf("dismissal date dönüşüm hatası: %v", err)
	}

	engineer, err := client.CompanyEngineer.UpdateOneID(engineerID).
		SetNillableName(&input.Name).
		SetNillableAddress(input.Address).
		SetNillableEmail(input.Email).
		SetNillableTcNo(input.TcNo).
		SetNillablePhone(input.Phone).
		SetNillableRegNo(input.RegNo).
		SetNillableCertNo(input.CertNo).
		SetNillableCareer(input.Career).
		SetNillablePosition(input.Position).
		SetNillableNote(input.Note).
		SetNillableEmployment(employmentPtr).
		SetNillableDismissal(dismissalPtr).
		Save(ctx)

	if err != nil {
		return nil, fmt.Errorf("failed to update engineer: %v", err)
	}

	return engineer, nil
}

// Engineer is the resolver for the Engineer field.
func (r *queryResolver) Engineer(ctx context.Context, filter *model.EngineerFilterInput) ([]*ent.CompanyEngineer, error) {
	client := middlewares.GetClientFromContext(ctx)
	query := client.CompanyEngineer.Query()

	if filter != nil {
		if filter.ID != nil && *filter.ID != "" {
			engineerID, err := strconv.Atoi(*filter.ID)
			if err != nil {
				return nil, fmt.Errorf("invalid engineer ID: %v", err)
			}
			query = query.Where(companyengineer.IDEQ(engineerID))
		}
		if filter.Career != nil {
			query = query.Where(companyengineer.CareerEQ(*filter.Career))
		}
		if filter.Position != nil {
			query = query.Where(companyengineer.PositionEQ(*filter.Position))
		}
	}

	engineers, err := query.All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get engineers: %v", err)
	}

	return engineers, nil
}

// CompanyEngineer returns generated.CompanyEngineerResolver implementation.
func (r *Resolver) CompanyEngineer() generated.CompanyEngineerResolver {
	return &companyEngineerResolver{r}
}

type companyEngineerResolver struct{ *Resolver }
