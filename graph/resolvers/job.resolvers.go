package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"context"
	"fmt"

	"github.com/polatbilal/gqlgen-ent/ent"
	"github.com/polatbilal/gqlgen-ent/ent/companydetail"
	"github.com/polatbilal/gqlgen-ent/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/ent/joblayer"
	"github.com/polatbilal/gqlgen-ent/graph/generated"
	"github.com/polatbilal/gqlgen-ent/graph/helpers"
	"github.com/polatbilal/gqlgen-ent/graph/model"
	"github.com/polatbilal/gqlgen-ent/middlewares"
)

// Layer is the resolver for the Layer field.
func (r *jobDetailResolver) Layer(ctx context.Context, obj *ent.JobDetail) ([]*ent.JobLayer, error) {
	client := middlewares.GetClientFromContext(ctx)
	return client.JobLayer.Query().Where(joblayer.HasLayerWith(jobdetail.IDEQ(obj.ID))).All(ctx)
}

// CreateJob is the resolver for the createJob field.
func (r *mutationResolver) CreateJob(ctx context.Context, input model.JobInput) (*ent.JobDetail, error) {
	client := middlewares.GetClientFromContext(ctx)

	// YibfNo kontrolü
	_, err := client.JobDetail.Query().Where(jobdetail.YibfNoEQ(*input.YibfNo)).Only(ctx)
	if err == nil {
		return nil, fmt.Errorf("iş zaten mevcut")
	}

	if !ent.IsNotFound(err) {
		return nil, err
	}

	// CompanyCode ile şirketi bul
	company, err := client.CompanyDetail.Query().
		Where(companydetail.CompanyCodeEQ(input.CompanyCode)).
		Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("şirket bulunamadı (kod: %d): %v", input.CompanyCode, err)
	}

	// Mühendisleri kontrol et ve getir
	engineers, err := helpers.ValidateAndGetEngineers(ctx, input)
	if err != nil {
		return nil, err
	}

	// İş detayını oluştur
	jobDetailCreate := client.JobDetail.Create().
		SetCompany(company).
		SetYibfNo(*input.YibfNo).
		SetTitle(*input.Title).
		SetNillableAdministration(input.Administration).
		SetNillableState(input.State).
		SetNillableIsland(input.Island).
		SetNillableParcel(input.Parcel).
		SetNillableSheet(input.Sheet).
		SetNillableContractDate(input.ContractDate).
		SetNillableStartDate(input.StartDate).
		SetNillableLicenseDate(input.LicenseDate).
		SetNillableLicenseNo(input.LicenseNo).
		SetNillableCompletionDate(input.CompletionDate).
		SetNillableLandArea(input.LandArea).
		SetNillableTotalArea(input.TotalArea).
		SetNillableConstructionArea(input.ConstructionArea).
		SetNillableLeftArea(input.LeftArea).
		SetNillableYDSAddress(input.YDSAddress).
		SetNillableAddress(input.Address).
		SetNillableBuildingClass(input.BuildingClass).
		SetNillableBuildingType(input.BuildingType).
		SetNillableLevel(input.Level).
		SetNillableUnitPrice(input.UnitPrice).
		SetNillableFloorCount(input.FloorCount).
		SetNillableBKSReferenceNo(input.BKSReferenceNo).
		SetNillableCoordinates(input.Coordinates).
		SetNillableFolderNo(input.FolderNo).
		SetNillableUploadedFile(input.UploadedFile).
		SetNillableIndustryArea(input.IndustryArea).
		SetNillableClusterStructure(input.ClusterStructure).
		SetNillableIsLicenseExpired(input.IsLicenseExpired).
		SetNillableIsCompleted(input.IsCompleted).
		SetNillableNote(input.Note)

	if inspector, ok := engineers["inspector"]; ok {
		jobDetailCreate = jobDetailCreate.SetInspector(inspector)
	}
	if static, ok := engineers["static"]; ok {
		jobDetailCreate = jobDetailCreate.SetStatic(static)
	}
	if architect, ok := engineers["architect"]; ok {
		jobDetailCreate = jobDetailCreate.SetArchitect(architect)
	}
	if mechanic, ok := engineers["mechanic"]; ok {
		jobDetailCreate = jobDetailCreate.SetMechanic(mechanic)
	}
	if electric, ok := engineers["electric"]; ok {
		jobDetailCreate = jobDetailCreate.SetElectric(electric)
	}
	if controller, ok := engineers["controller"]; ok {
		jobDetailCreate = jobDetailCreate.SetController(controller)
	}
	if mechanicController, ok := engineers["mechanicController"]; ok {
		jobDetailCreate = jobDetailCreate.SetMechaniccontroller(mechanicController)
	}
	if electricController, ok := engineers["electricController"]; ok {
		jobDetailCreate = jobDetailCreate.SetElectriccontroller(electricController)
	}

	newJobDetail, err := jobDetailCreate.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("iş ayrıntısı oluşturulamadı: %v", err)
	}

	// Progress bilgilerini iş ayrıntısına ekle
	p, err := client.JobProgress.Create().
		SetOne(0).
		SetTwo(0).
		SetThree(0).
		SetFour(0).
		SetFive(0).
		SetSix(0).
		AddProgress(newJobDetail).
		Save(ctx)

	if err != nil {
		return nil, fmt.Errorf("progress oluşturulamadı: %v, %s", err, p)
	}
	return newJobDetail, nil
}

// UpdateJob is the resolver for the updateJob field.
func (r *mutationResolver) UpdateJob(ctx context.Context, yibfNo int, input model.JobInput) (*ent.JobDetail, error) {
	client := middlewares.GetClientFromContext(ctx)
	jobDetail, err := client.JobDetail.Query().Where(jobdetail.YibfNoEQ(yibfNo)).Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("iş ayrıntısı bulunamadı: %v", err)
	}

	// Mühendisleri kontrol et ve getir
	engineers, err := helpers.ValidateAndGetEngineers(ctx, input)
	if err != nil {
		return nil, err
	}

	// Mevcut iş detayını güncelle
	jobDetailUpdate := client.JobDetail.UpdateOne(jobDetail).
		SetNillableYibfNo(input.YibfNo).
		SetNillableTitle(input.Title).
		SetNillableAdministration(input.Administration).
		SetNillableState(input.State).
		SetNillableIsland(input.Island).
		SetNillableParcel(input.Parcel).
		SetNillableSheet(input.Sheet).
		SetNillableFolderNo(input.FolderNo).
		SetNillableContractDate(input.ContractDate).
		SetNillableStartDate(input.StartDate).
		SetNillableLicenseDate(input.LicenseDate).
		SetNillableLicenseNo(input.LicenseNo).
		SetNillableCompletionDate(input.CompletionDate).
		SetNillableConstructionArea(input.ConstructionArea).
		SetNillableLandArea(input.LandArea).
		SetNillableTotalArea(input.TotalArea).
		SetNillableAddress(input.Address).
		SetNillableBuildingClass(input.BuildingClass).
		SetNillableBuildingType(input.BuildingType).
		SetNillableLevel(input.Level).
		SetNillableUnitPrice(input.UnitPrice).
		SetNillableFloorCount(input.FloorCount).
		SetNillableBKSReferenceNo(input.BKSReferenceNo).
		SetNillableCoordinates(input.Coordinates).
		SetNillableFolderNo(input.FolderNo).
		SetNillableUploadedFile(input.UploadedFile).
		SetNillableIndustryArea(input.IndustryArea).
		SetNillableClusterStructure(input.ClusterStructure).
		SetNillableIsLicenseExpired(input.IsLicenseExpired).
		SetNillableIsCompleted(input.IsCompleted).
		SetNillableNote(input.Note)

	if inspector, ok := engineers["inspector"]; ok {
		jobDetailUpdate = jobDetailUpdate.SetInspector(inspector)
	}
	if static, ok := engineers["static"]; ok {
		jobDetailUpdate = jobDetailUpdate.SetStatic(static)
	}
	if architect, ok := engineers["architect"]; ok {
		jobDetailUpdate = jobDetailUpdate.SetArchitect(architect)
	}
	if mechanic, ok := engineers["mechanic"]; ok {
		jobDetailUpdate = jobDetailUpdate.SetMechanic(mechanic)
	}
	if electric, ok := engineers["electric"]; ok {
		jobDetailUpdate = jobDetailUpdate.SetElectric(electric)
	}
	if controller, ok := engineers["controller"]; ok {
		jobDetailUpdate = jobDetailUpdate.SetController(controller)
	}
	if mechanicController, ok := engineers["mechanicController"]; ok {
		jobDetailUpdate = jobDetailUpdate.SetMechaniccontroller(mechanicController)
	}
	if electricController, ok := engineers["electricController"]; ok {
		jobDetailUpdate = jobDetailUpdate.SetElectriccontroller(electricController)
	}

	newJobDetail, err := jobDetailUpdate.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("iş ayrıntısı güncellenemedi: %v", err)
	}

	return newJobDetail, nil
}

// Job is the resolver for the job field.
func (r *queryResolver) Job(ctx context.Context, yibfNo int) (*ent.JobDetail, error) {
	client := middlewares.GetClientFromContext(ctx)
	return client.JobDetail.Query().Where(jobdetail.YibfNo(yibfNo)).Only(ctx)
}

// Jobs is the resolver for the jobs field.
func (r *queryResolver) Jobs(ctx context.Context) (*ent.JobDetail, error) {
	client := middlewares.GetClientFromContext(ctx)
	jobs, err := client.JobDetail.Query().Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch jobs: %w", err)
	}

	return jobs, nil
}

// JobDetail returns generated.JobDetailResolver implementation.
func (r *Resolver) JobDetail() generated.JobDetailResolver { return &jobDetailResolver{r} }

type jobDetailResolver struct{ *Resolver }
