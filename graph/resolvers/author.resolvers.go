package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"context"

	"github.com/polatbilal/gqlgen-ent/ent"
	"github.com/polatbilal/gqlgen-ent/ent/jobauthor"
	"github.com/polatbilal/gqlgen-ent/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/graph/generated"
	"github.com/polatbilal/gqlgen-ent/graph/model"
	"github.com/polatbilal/gqlgen-ent/middlewares"
)

// CreateAuthor is the resolver for the createAuthor field.
func (r *mutationResolver) CreateAuthor(ctx context.Context, input model.JobAuthorInput) (*ent.JobAuthor, error) {
	client := middlewares.GetClientFromContext(ctx)

	jobdetail, err := client.JobDetail.Query().Where(jobdetail.YibfNoEQ(input.YibfNo)).Only(ctx)
	if err != nil {
		return nil, err
	}

	jobAuthor, err := client.JobAuthor.Create().
		SetNillableStatic(input.Static).
		SetNillableMechanic(input.Mechanic).
		SetNillableElectric(input.Electric).
		SetNillableArchitect(input.Architect).
		SetNillableGeotechnicalEngineer(input.GeotechnicalEngineer).
		SetNillableGeotechnicalGeologist(input.GeotechnicalGeologist).
		SetNillableGeotechnicalGeophysicist(input.GeotechnicalGeophysicist).
		AddAuthors(jobdetail).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	return jobAuthor, nil
}

// UpdateAuthor is the resolver for the updateAuthor field.
func (r *mutationResolver) UpdateAuthor(ctx context.Context, yibfNo int, input model.JobAuthorInput) (*ent.JobAuthor, error) {
	client := middlewares.GetClientFromContext(ctx)

	jobAuthor, err := client.JobAuthor.UpdateOneID(yibfNo).
		SetNillableStatic(input.Static).
		SetNillableMechanic(input.Mechanic).
		SetNillableElectric(input.Electric).
		SetNillableArchitect(input.Architect).
		SetNillableGeotechnicalEngineer(input.GeotechnicalEngineer).
		SetNillableGeotechnicalGeologist(input.GeotechnicalGeologist).
		SetNillableGeotechnicalGeophysicist(input.GeotechnicalGeophysicist).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	return jobAuthor, nil
}

// Author is the resolver for the author field.
func (r *queryResolver) Author(ctx context.Context, yibfNo int) (*ent.JobAuthor, error) {
	client := middlewares.GetClientFromContext(ctx)

	jobAuthor, err := client.JobAuthor.Query().Where(jobauthor.HasAuthorsWith(jobdetail.YibfNoEQ(yibfNo))).Only(ctx)
	if err != nil {
		return nil, err
	}

	return jobAuthor, nil
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
