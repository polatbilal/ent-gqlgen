package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"context"
	"strconv"

	"github.com/polatbilal/gqlgen-ent/ent"
	"github.com/polatbilal/gqlgen-ent/ent/jobdetail"
	"github.com/polatbilal/gqlgen-ent/ent/jobprogress"
	"github.com/polatbilal/gqlgen-ent/graph/model"
	"github.com/polatbilal/gqlgen-ent/middlewares"
)

// UpdateProgress is the resolver for the updateProgress field.
func (r *mutationResolver) UpdateProgress(ctx context.Context, input model.JobProgressInput) (*ent.JobProgress, error) {
	client := middlewares.GetClientFromContext(ctx)
	id, err := strconv.Atoi(*input.ID)
	if err != nil {
		return nil, err
	}
	return client.JobProgress.UpdateOneID(id).SetOne(*input.One).SetTwo(*input.Two).SetThree(*input.Three).SetFour(*input.Four).SetFive(*input.Five).SetSix(*input.Six).Save(ctx)
}

// GetProgress is the resolver for the getProgress field.
func (r *queryResolver) GetProgress(ctx context.Context, yibfNo int) (*ent.JobProgress, error) {
	client := middlewares.GetClientFromContext(ctx)
	return client.JobProgress.Query().Where(jobprogress.HasProgressWith(jobdetail.YibfNoEQ(yibfNo))).Only(ctx)
}
