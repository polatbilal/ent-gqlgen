package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"context"
	"fmt"
	"strconv"
	"time"

	"github.com/polatbilal/gqlgen-ent/ent"
	"github.com/polatbilal/gqlgen-ent/ent/user"
	"github.com/polatbilal/gqlgen-ent/graph/generated"
	"github.com/polatbilal/gqlgen-ent/graph/model"
	"github.com/polatbilal/gqlgen-ent/middlewares"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*ent.User, error) {
	client := middlewares.GetClientFromContext(ctx)

	// Kullanıcı adının daha önce kullanılıp kullanılmadığını kontrol et
	exists, err := client.User.Query().
		Where(user.Username(input.Username)).
		Exist(ctx)
	if err != nil {
		return nil, fmt.Errorf("kullanıcı kontrolü yapılırken hata: %v", err)
	}
	if exists {
		return nil, fmt.Errorf("bu kullanıcı adı zaten kullanımda: %s", input.Username)
	}

	// Önce kullanıcıyı oluştur
	user, err := client.User.Create().
		SetUsername(input.Username).
		SetName(input.Name).
		SetEmail(input.Email).
		SetPhone(input.Phone).
		SetPassword(input.Password).
		SetRole(input.Role).
		Save(ctx)

	if err != nil {
		return nil, fmt.Errorf("kullanıcı oluşturulurken hata: %v", err)
	}

	// Şirketleri ekle
	if len(input.CompanyIDs) > 0 {
		for _, companyID := range input.CompanyIDs {
			// CompanyUser oluştur
			_, err = client.CompanyUser.Create().
				SetUser(user).
				SetCompanyID(companyID).
				Save(ctx)

			if err != nil {
				return nil, fmt.Errorf("şirket bağlantısı oluşturulurken hata: %v", err)
			}
		}
	}

	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UserInput) (*ent.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*ent.User, error) {
	client := middlewares.GetClientFromContext(ctx)
	intID, err := strconv.Atoi(id)
	if err != nil {
		fmt.Println("Error:", err)
	}
	return client.User.Query().Where(user.IDEQ(intID)).Only(ctx)
}

// AllUsers is the resolver for the allUsers field.
func (r *queryResolver) AllUsers(ctx context.Context) ([]*ent.User, error) {
	client := middlewares.GetClientFromContext(ctx)
	return client.User.Query().All(ctx)
}

// CreatedAt is the resolver for the createdAt field.
func (r *userResolver) CreatedAt(ctx context.Context, obj *ent.User) (string, error) {
	return obj.CreatedAt.Format(time.RFC3339), nil
}

// Companies is the resolver for the companies field.
func (r *userResolver) Companies(ctx context.Context, obj *ent.User) ([]*ent.CompanyDetail, error) {
	return obj.QueryCompanies().QueryCompany().All(ctx)
}

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
