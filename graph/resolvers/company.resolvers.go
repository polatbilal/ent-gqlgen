package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"strconv"

	"github.com/polatbilal/gqlgen-ent/ent"
	"github.com/polatbilal/gqlgen-ent/ent/companydetail"
	"github.com/polatbilal/gqlgen-ent/graph/model"
	"github.com/polatbilal/gqlgen-ent/handlers/service"
	"github.com/polatbilal/gqlgen-ent/middlewares"
)

// UpdateCompany is the resolver for the updateCompany field.
func (r *mutationResolver) UpdateCompany(ctx context.Context, input model.CompanyDetailInput) (*ent.CompanyDetail, error) {
	client := middlewares.GetClientFromContext(ctx)

	company, err := client.CompanyDetail.Query().Where(companydetail.CompanyCodeEQ(input.CompanyCode)).Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("şirket bulunamadı: %v", err)
	}

	updatedCompany, err := client.CompanyDetail.UpdateOneID(company.ID).
		SetName(input.Name).
		SetCompanyCode(input.CompanyCode).
		SetNillableAddress(input.Address).
		SetNillablePhone(input.Phone).
		SetNillableEmail(input.Email).
		SetNillableWebsite(input.Website).
		SetNillableTaxAdmin(input.TaxAdmin).
		SetNillableTaxNo(input.TaxNo).
		SetNillableChamberInfo(input.ChamberInfo).
		SetNillableChamberRegisterNo(input.ChamberRegisterNo).
		SetNillableVisaDate(input.VisaDate).
		SetNillableVisaEndDate(input.VisaEndDate).
		SetNillableVisaFinishedFor90Days(input.VisaFinishedFor90days).
		SetNillableCorePersonAbsent90Days(input.CorePersonAbsent90days).
		SetNillableIsClosed(input.IsClosed).
		SetNillableOwnerName(input.OwnerName).
		SetNillableOwnerTcNo(input.OwnerTcNo).
		SetNillableOwnerAddress(input.OwnerAddress).
		SetNillableOwnerPhone(input.OwnerPhone).
		SetNillableOwnerEmail(input.OwnerEmail).
		SetNillableOwnerRegisterNo(input.OwnerRegisterNo).
		SetNillableOwnerCareer(input.OwnerCareer).
		Save(ctx)

	if err != nil {
		return nil, fmt.Errorf("şirket güncellenemedi: %v", err)
	}

	return updatedCompany, nil
}

// CompanyToken is the resolver for the CompanyToken field.
func (r *mutationResolver) CompanyToken(ctx context.Context, departmentID *int, input *model.CompanyTokenInput) (*ent.CompanyToken, error) {
	client := middlewares.GetClientFromContext(ctx)

	// 1. Önce token'ı kaydet
	tokenCreate := client.CompanyToken.Create().
		SetToken(*input.Token).
		SetDepartmentID(*departmentID).
		SetExpireDate(*input.ExpireDate)

	createCompanyToken, err := tokenCreate.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("şirket token oluşturulamadı: %v", err)
	}

	// 2. YDK API'den şirket verisini çek
	svc := &service.ExternalService{
		BaseURL: os.Getenv("YDK_BASE_URL"),
		Client:  &http.Client{},
	}

	// Şirket verisini çek
	requestBody := map[string]interface{}{
		"id": *departmentID,
	}

	jsonBody, err := json.Marshal(requestBody)
	if err != nil {
		fmt.Printf("JSON marshal hatası: %v\n", err)
		return createCompanyToken, nil
	}

	url := svc.BaseURL + service.ENDPOINT_COMPANY
	fmt.Printf("İstek URL: %s\n", url)

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonBody))
	if err != nil {
		fmt.Printf("HTTP request oluşturma hatası: %v\n", err)
		return createCompanyToken, nil
	}

	req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", *input.Token))
	req.Header.Set("Content-Type", "application/json")

	fmt.Printf("İstek gönderiliyor: %+v\n", req)
	resp, err := svc.Client.Do(req)
	if err != nil {
		fmt.Printf("HTTP isteği hatası: %v\n", err)
		return createCompanyToken, nil
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Printf("Response body okuma hatası: %v\n", err)
		return createCompanyToken, nil
	}

	fmt.Printf("API Yanıtı: %s\n", string(body))

	var ydkResponse service.YDKCompanyResponse
	if err := json.Unmarshal(body, &ydkResponse); err != nil {
		fmt.Printf("JSON parse hatası: %v\n", err)
		return createCompanyToken, nil
	}

	if len(ydkResponse.Items) > 0 {
		item := ydkResponse.Items[0]

		// 3. Şirket verisini kaydet
		taxNo, _ := strconv.Atoi(item.Department.Person.IdentityNumber)
		tcNo, _ := strconv.Atoi(item.Person.IdentityNumber)
		registerNo, _ := strconv.Atoi(item.OccupationalRegistrationNumber)

		company, err := client.CompanyDetail.Create().
			SetCompanyCode(item.Department.FileNumber).
			SetName(item.Department.Name).
			SetNillableAddress(&item.Department.Person.AddressStr).
			SetNillablePhone(&item.Department.Person.LastPhoneNumber).
			SetNillableEmail(&item.Department.Person.LastEPosta).
			SetNillableWebsite(&item.Department.Person.LastWebAddress).
			SetNillableTaxAdmin(&item.Department.Person.TaxAdministration).
			SetNillableTaxNo(&taxNo).
			SetNillableChamberInfo(&item.Department.ChamberInfo).
			SetNillableChamberRegisterNo(&item.Department.RegistrationNumber).
			SetNillableVisaFinishedFor90Days(&item.Department.VisaFinishedFor90Days).
			SetNillableCorePersonAbsent90Days(&item.Department.CorePersonAbsent90Days).
			SetNillableIsClosed(&item.Department.IsClosed).
			SetNillableOwnerName(&item.Person.FullName).
			SetNillableOwnerTcNo(&tcNo).
			SetNillableOwnerAddress(&item.Person.AddressStr).
			SetNillableOwnerPhone(&item.Person.LastPhoneNumber).
			SetNillableOwnerEmail(&item.Person.LastEPosta).
			SetNillableOwnerRegisterNo(&registerNo).
			SetNillableOwnerCareer(&item.Title.Name).
			Save(ctx)

		if err != nil {
			fmt.Printf("Şirket oluşturma hatası: %v\n", err)
			return createCompanyToken, nil
		}

		fmt.Printf("Şirket başarıyla oluşturuldu: ID=%d\n", company.ID)

		// 4. Token ile şirketi ilişkilendir
		if _, err := createCompanyToken.Update().
			SetCompany(company).
			Save(ctx); err != nil {
			fmt.Printf("Token ile şirket ilişkilendirilemedi: %v\n", err)
		}

		// Kullanıcı ID'sini context'ten al
		claims := middlewares.CtxValue(ctx)
		userID := claims.ID

		// CompanyUser ilişkisini oluştur
		_, err = client.CompanyUser.Create().
			SetCompanyID(company.ID).
			SetUserID(userID).
			Save(ctx)
		if err != nil {
			fmt.Printf("Kullanıcı-şirket ilişkisi oluşturulamadı: %v\n", err)
		}
	}

	return createCompanyToken, nil
}

// CompanyByCode is the resolver for the companyByCode field.
func (r *queryResolver) CompanyByCode(ctx context.Context, companyCode int) (*ent.CompanyDetail, error) {
	client := middlewares.GetClientFromContext(ctx)
	company, err := client.CompanyDetail.Query().Where(companydetail.CompanyCodeEQ(companyCode)).Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("şirket bulunamadı: %v", err)
	}
	return company, nil
}

// CompanyToken is the resolver for the companyToken field.
func (r *queryResolver) CompanyToken(ctx context.Context, companyCode *int) (*ent.CompanyToken, error) {
	client := middlewares.GetClientFromContext(ctx)

	company, err := client.CompanyDetail.Query().Where(companydetail.CompanyCodeEQ(*companyCode)).Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("şirket bulunamadı: %v", err)
	}

	companyToken, err := company.QueryTokens().Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("şirket token bulunamadı: %v", err)
	}

	return companyToken, nil
}
