package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"context"
	"fmt"
	"gqlgen-ent/ent"
	"gqlgen-ent/ent/companydetail"
	"gqlgen-ent/ent/companyengineer"
	"gqlgen-ent/graph/generated"
	"gqlgen-ent/graph/model"
	"gqlgen-ent/middlewares"
	"gqlgen-ent/tools"
)

// VisaDate is the resolver for the VisaDate field.
func (r *companyDetailResolver) VisaDate(ctx context.Context, obj *ent.CompanyDetail) (*string, error) {
	if obj.VisaDate.IsZero() {
		return nil, nil
	}
	visaDate := obj.VisaDate.Format("2006-01-02")
	return &visaDate, nil
}

// Owner is the resolver for the Owner field.
func (r *companyDetailResolver) Owner(ctx context.Context, obj *ent.CompanyDetail) (*ent.CompanyEngineer, error) {
	client := middlewares.GetClientFromContext(ctx)
	owner, err := client.CompanyEngineer.Query().Where(companyengineer.HasCompanyOwnersWith(companydetail.IDEQ(obj.ID))).Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to het owners: %v", err)
	}
	return owner, nil
}

// UpdateCompany is the resolver for the updateCompany field.
func (r *mutationResolver) UpdateCompany(ctx context.Context, input model.CompanyDetailInput) (*ent.CompanyDetail, error) {
	client := middlewares.GetClientFromContext(ctx)
	visaDatePtr, err := tools.ParseDate(input.VisaDate)
	if err != nil {
		return nil, fmt.Errorf("visa date dönüşüm hatası: %v", err)
	}

	updatedCompany, err := client.CompanyDetail.UpdateOneID(1).
		SetName(input.Name).
		SetAddress(*input.Address).
		SetCity(*input.City).
		SetState(*input.State).
		SetPhone(*input.Phone).
		SetFax(*input.Fax).
		SetMobile(*input.Mobile).
		SetEmail(*input.Email).
		SetWebsite(*input.Website).
		SetTaxAdmin(*input.TaxAdmin).
		SetTaxNo(*input.TaxNo).
		SetCommerce(*input.Commerce).
		SetCommerceReg(*input.CommerceReg).
		SetVisaDate(*visaDatePtr).
		SetCompanyOwnerID(*input.OwnerID).
		Save(ctx)

	if err != nil {
		return nil, err
	}
	return updatedCompany, nil
}

// Company is the resolver for the company field.
func (r *queryResolver) Company(ctx context.Context) (*ent.CompanyDetail, error) {
	client := middlewares.GetClientFromContext(ctx)
	company, err := client.CompanyDetail.Query().Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to het owners: %v", err)
	}
	return company, nil
}

// CompanyDetail returns generated.CompanyDetailResolver implementation.
func (r *Resolver) CompanyDetail() generated.CompanyDetailResolver { return &companyDetailResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type companyDetailResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
