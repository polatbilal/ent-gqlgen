package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"context"
	"fmt"

	"github.com/polatbilal/gqlgen-ent/ent"
	"github.com/polatbilal/gqlgen-ent/ent/jobowner"
	"github.com/polatbilal/gqlgen-ent/graph/model"
	"github.com/polatbilal/gqlgen-ent/middlewares"
)

// CreateOwner is the resolver for the createOwner field.
func (r *mutationResolver) CreateOwner(ctx context.Context, input model.JobOwnerInput) (*ent.JobOwner, error) {
	client := middlewares.GetClientFromContext(ctx)
	owner, err := client.JobOwner.Create().
		SetName(*input.Name).
		SetNillableTcNo(input.TcNo).
		SetNillableTaxAdmin(input.TaxAdmin).
		SetNillableTaxNo(input.TaxNo).
		SetNillablePhone(input.Phone).
		SetNillableEmail(input.Email).
		SetYDSID(*input.Ydsid).
		SetNillableShareholder(input.Shareholder).
		SetNillableNote(input.Note).
		Save(ctx)

	if err != nil {
		return nil, fmt.Errorf("failed to create owner: %w", err)
	}

	return owner, nil
}

// UpdateOwner is the resolver for the updateOwner field.
func (r *mutationResolver) UpdateOwner(ctx context.Context, ydsid int, input model.JobOwnerInput) (*ent.JobOwner, error) {
	client := middlewares.GetClientFromContext(ctx)

	owner, err := client.JobOwner.UpdateOneID(ydsid).
		SetNillableName(input.Name).
		SetNillableTcNo(input.TcNo).
		SetNillableTaxAdmin(input.TaxAdmin).
		SetNillableTaxNo(input.TaxNo).
		SetNillablePhone(input.Phone).
		SetNillableEmail(input.Email).
		SetNillableShareholder(input.Shareholder).
		SetNillableNote(input.Note).
		Save(ctx)

	if err != nil {
		return nil, fmt.Errorf("failed to update owner: %w", err)
	}

	return owner, nil
}

// AllOwner is the resolver for the allOwner field.
func (r *queryResolver) AllOwner(ctx context.Context) ([]*ent.JobOwner, error) {
	client := middlewares.GetClientFromContext(ctx)
	return client.JobOwner.Query().All(ctx)
}

// GetOwner is the resolver for the getOwner field.
func (r *queryResolver) GetOwner(ctx context.Context, ydsid int) (*ent.JobOwner, error) {
	client := middlewares.GetClientFromContext(ctx)
	return client.JobOwner.Query().Where(jobowner.YDSID(ydsid)).Only(ctx)
}
